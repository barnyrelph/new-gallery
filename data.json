{
    "project": {},
    "files": {
        "gallery-js/calendar-jumpnav.js": {
            "name": "gallery-js/calendar-jumpnav.js",
            "modules": {},
            "classes": {
                "Y.Plugin.Calendar.JumpNav": 1,
                "Y.Calendar.JumpNavView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/contextmenu-view.js": {
            "name": "gallery-js/contextmenu-view.js",
            "modules": {
                "gallery-contextmenu-view": 1
            },
            "classes": {
                "Y.ContextMenuView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-celleditor-inline.js": {
            "name": "gallery-js/datatable-celleditor-inline.js",
            "modules": {
                "gallery-datatable-celleditor-inline": 1
            },
            "classes": {
                "Y.DataTable.BaseCellInlineEditor": 1,
                "Y.DataTable.EditorOptions.inline": 1,
                "Y.DataTable.EditorOptions.inlineNumber": 1,
                "Y.DataTable.EditorOptions.inlineDate": 1,
                "Y.DataTable.EditorOptions.inlineAC": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-celleditor-popup.js": {
            "name": "gallery-js/datatable-celleditor-popup.js",
            "modules": {
                "gallery-datatable-celleditor-popup": 1
            },
            "classes": {
                "Y.DataTable.BaseCellPopupEditor": 1,
                "Y.DataTable.EditorOptions.text": 1,
                "Y.DataTable.EditorOptions.textarea": 1,
                "Y.DataTable.EditorOptions.number": 1,
                "Y.DataTable.EditorOptions.date": 1,
                "Y.DataTable.EditorOptions.calendar": 1,
                "Y.DataTable.EditorOptions.autocomplete": 1,
                "Y.DataTable.EditorOptions.radio": 1,
                "Y.DataTable.EditorOptions.dropdown": 1,
                "Y.DataTable.EditorOptions.checkbox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-checkbox-select.js": {
            "name": "gallery-js/datatable-checkbox-select.js",
            "modules": {
                "Selection": 1
            },
            "classes": {
                "Y.DataTable.CheckboxSelect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-contextmenu.js": {
            "name": "gallery-js/datatable-contextmenu.js",
            "modules": {
                "gallery-datatable-contextmenu": 1
            },
            "classes": {
                "Y.Plugin.DataTableContextMenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-editable.js": {
            "name": "gallery-js/datatable-editable.js",
            "modules": {
                "gallery-datatable-editable": 1
            },
            "classes": {
                "Y.DataTable.Editable": 1,
                "Y.DataTable.EditorOptions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-formatters.js": {
            "name": "gallery-js/datatable-formatters.js",
            "modules": {
                "gallery-datatable-formatters": 1
            },
            "classes": {
                "Y.DataTable.Formatters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-paginator.js": {
            "name": "gallery-js/datatable-paginator.js",
            "modules": {
                "gallery-datatable-paginator": 1
            },
            "classes": {
                "Y.DataTable.Paginator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-selection.js": {
            "name": "gallery-js/datatable-selection.js",
            "modules": {
                "gallery-datatable-selection": 1
            },
            "classes": {
                "Y.DataTable.Selection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/dt_footerview.js": {
            "name": "gallery-js/dt_footerview.js",
            "modules": {
                "FooterView": 1
            },
            "classes": {
                "Y.FooterView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/paginator-view.js": {
            "name": "gallery-js/paginator-view.js",
            "modules": {
                "gallery-paginator-view": 1
            },
            "classes": {
                "Y.PaginatorModel": 1,
                "Y.PaginatorView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/picklist.js": {
            "name": "gallery-js/picklist.js",
            "modules": {
                "gallery-picklist": 1
            },
            "classes": {
                "PickList": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "gallery-contextmenu-view": {
            "name": "gallery-contextmenu-view",
            "submodules": {},
            "classes": {
                "Y.Plugin.Calendar.JumpNav": 1,
                "Y.Calendar.JumpNavView": 1,
                "Y.ContextMenuView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/contextmenu-view.js",
            "line": 1,
            "description": "This module includes a Y.View class extension that attaches to an existing \"trigger\" Node and uses event delegation to listen\nfor \"contextmenu\" requests (i.e. right-click). When the context menu is invoked, a Y.Overlay object is rendered and displayed\nas a popup that includes user-defined menu items that are related to the context where the menu was invoked.\n\nThis view utilizes several attributes and fires several events that users can listen to in order to take specific actions based\non the \"trigger target\" node.\n\nPlease refer to the [trigger](#attr_trigger) ATTRIBUTE for more description of the target.node and target.trigger.\n\n#####Usage\nTo configure a bare-bones basic contextmenu, you need to provide the `trigger` and `menuItems` attributes as;\n\n    var cmenu = new Y.ContextMenuView({\n       trigger: {\n           node:   Y.one(\".myExistingContainer\"),\n           target:  'li'\n       },\n       menuItems: [ \"Add\", \"Edit\", \"Delete\" ]\n   });\n\nThe `menuItems` can be simple entries or Objects, if they are Objects the \"label\" property will be used to fill the visible Menu\n(See [menuItems](#attr_menuItems)).\n\n#####Attributes / Events\nAn implementer is typically interested in listening to the following ATTRIBUTE \"change\" events;\n<ul>\n  <li>`selectedMenuChange` : which fires when a contextmenu choice is clicked (see <a href=\"#attr_selectedMenu\">selectedMenu</a>)</li>\n  <li>`contextTargetChange`: which fires when the user \"right-clicks\" on the target.node (see <a href=\"#attr_contextTarget\">contextTarget</a>)</li>\n</ul>\n\nAdditionally please refer to the [Events](#events) section for more information on available events.",
            "is_constructor": 1
        },
        "gallery-datatable-celleditor-inline": {
            "name": "gallery-datatable-celleditor-inline",
            "submodules": {},
            "classes": {
                "Y.DataTable.BaseCellInlineEditor": 1,
                "Y.DataTable.EditorOptions.inline": 1,
                "Y.DataTable.EditorOptions.inlineNumber": 1,
                "Y.DataTable.EditorOptions.inlineDate": 1,
                "Y.DataTable.EditorOptions.inlineAC": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 1089,
            "description": "A View class that serves as the BASE View class for a TD Cell \"inline\" editor, i.e. an editor that\nis a single INPUT node that completely overlies the TD cell.  This editor is intended to replicate\nthe familiar \"spreadsheet\" type of input.\n\n##### Editing / Validation\n\nThis editor view creates a simple INPUT[type=text] control and repositions and resizes it to match the\nunderlying TD, set with a z-Index to visually appear over the TD cell.\n\nKey listeners are provided to detect changes, prohibit invalid keystrokes (via the [keyFiltering](#attr_keyFiltering)\n setting) and to allow validation upon a \"save\" entry (keyboard RTN stroke) where a [validator](#attr_validator) can\nbe prescribed to allow/disallow changes based upon the overall \"value\" of the INPUT control.\n\n##### Navigation\nThe editor provides the capability to navigate from TD cell via key listeners on the following key\ncombinations;\n * CTRL-arrow keys\n * TAB goes to RIGHT, SHIFT-TAB goes to left\n * ESC cancels editing\n * RTN saves cell\n\nKey navigation can be disabled via the [inputKeys](#attr_inputKeys) attribute set to `false`.\n\nWhen a \"key navigation\" request is received it is passed to the [keyDir](#attr_keyDir) as a change\nin [row,col] that implementers can listen to \"change\" events on, to reposition and open editing on the\nnew relative cell.  (NOTE: This view does not reposition, it simply fires a `keyDirChange` event.\n\n##### Events\nSeveral events are fired by this View;  which can be listened for and acted upon to achieve differing results.\nFor example, the Y.DataTable.EditorOptions.inlineAC (inline autocompletion editor) listens for the\n[editorCreated](#event_editorCreated) event and once received, it configures the autocomplete plugin onto the\nINPUT node.\n\n##### Configuration\nThs Y.DataTable.BaseCellInlineEditor editor is intended to be configured by varying the configuration\nparameters (i.e. attribute and related configuration) to permit a variety of editing features.\n\nSince the View class permits ad-hoc attributes, the implementer can pass many properties in during instantiation\nthat will become available as run-time View attributes.\n\nThis Module includes several pre-defined editor configurations which are stored within the Y.DataTable.EditorOptions\nnamespace (presently there are \"inline\", \"inlineNumber\", \"inlineDate\", \"inlineAC\").  New inline editors can be\ncreated and added to this namespace at runtime, and by defining the `BaseViewClass:Y.DataTable.BaseCellInlineEditor` property.\n\nFor example, the pre-built configuration object for the [inlineDate](Y.DataTable.EditorOptions.inlineDate.html) inline editor\nis stored as `Y.DataTable.EditorOptions.inlineDate`.\n\nTo configure an editor on-the-fly (i.e. within a DataTable column definition) just include the configuration object options\nwithin DT's column `editorConfig` object, which is Y.merge'ed with the pre-built configs;\n\n       // define an 'inlineDate' editor with additional configs ...\n       { key:'date_of_claim', editor:\"inlineDate\", editorConfig:{ dateformat:'%Y-%m-%d'} }\n\nThis `Y.DataTable.BaseCellinlineEditor` class is similar to (and compatible with ) the `Y.DataTable.BaseCellPopupEditor`\nin another gallery module.  Note that since the \"inline\" editor uses a simple INPUT[type=text] Node instead of an\nOverlay the codeline is quite a bit simpler.\n\n###### KNOWN ISSUES:\n  <ul>\n  <li>This View doesn't work well with scrolling DT's, so I've disabled it currently.</li>\n  <li>Sometimes after a DT's `editable` ATTR is toggled true/false a \"cannot read 'style'\" message occurs and editing failes\n       requiring a page refresh.</li>\n  </ul>",
            "extends": "Y.View",
            "author": "Todd Smith",
            "since": "3.8.0"
        },
        "gallery-datatable-celleditor-popup": {
            "name": "gallery-datatable-celleditor-popup",
            "submodules": {},
            "classes": {
                "Y.DataTable.BaseCellPopupEditor": 1,
                "Y.DataTable.EditorOptions.text": 1,
                "Y.DataTable.EditorOptions.textarea": 1,
                "Y.DataTable.EditorOptions.number": 1,
                "Y.DataTable.EditorOptions.date": 1,
                "Y.DataTable.EditorOptions.calendar": 1,
                "Y.DataTable.EditorOptions.autocomplete": 1,
                "Y.DataTable.EditorOptions.radio": 1,
                "Y.DataTable.EditorOptions.dropdown": 1,
                "Y.DataTable.EditorOptions.checkbox": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 2566,
            "description": "This module defines an extension of View that includes a BASE Y.DataTable.BaseCellPopupEditor View class definition\ncell \"pop-up\" editor.  This view class includes an editor with HTML inserted into an Overlay widget directly over\nthe TD cell.  Positioning, event management, creation/destruction and attribute changes are managed by this class.\n\n##### Configuration\n\nY.DataTable.BaseCellPopupEditor by itself just creates an empty Overlay container, and really isn't meant to be used\nthat way.  The view class includes a number of [attributes](#attrs) that are the key to defining a workable popup editor\nand it's behaviors.\n\nThe Y.DataTable.BaseCellPopupEditor View class communicates with the DataTable via the gallery-datatable-editable\nmodule, which sets up invocation and rendering of this View and establishes listeners for View events, thus the\nDataTable serves as a Controller.\n\nSince the generic View class permits ad-hoc attributes, the implementer can pass many properties in during instantiation\nthat will become available as run-time View attributes.\n\n##### View Construction / Rendering\n\nHTML content that will be set to the Overlay's `bodyContent` is setup via the [templateObject](#attr_templateObject) and\nit's `html` property.  The base view class uses the YUI Template module, and specifically the Template.Micro module to\nbuild out the HTML (Handlebars format is also available).  For many use cases you won't need a fancy \"template\", and\nin fact your templateObject.html may not include any \"template parameters\" at all -- which is perfectly fine.\n\n##### Editing / Validation\n\nThis editor view creates the template'ed content, and attaches the [_inputClass](#property__classInput) wherever the\nimplementer assigns the class tag.  The editor can also be configured to listen to the base view's [editorCreated](#event_editorCreated)\nin order to attach or configure a Widget or another UI component within the View container.\n\nKey listeners are provided to detect changes to the first Node within the container with [_inputClass](#property__classInput)\nset.  These keylisteners can be used prohibit invalid keystrokes (via the [keyFiltering](#attr_keyFiltering) setting) and\nto allow validation upon a \"save\" entry (keyboard RTN stroke) where a [validator](#attr_validator) can be prescribed to\nallow/disallow changes based upon the overall \"value\" of the INPUT control.\n\nIf the implementer has connected a Widget to this View, the widget should be configured by it's own \"selection\" mechanism\nto either call this View's [saveEditor](#event_saveEditor) or[cancelEditor](#event_cancelEditor) methods to ensure proper\nsaving / closing of the Overlay.\n\n##### Navigation\nThe editor provides the capability to navigate from TD cell via key listeners on the following key\ncombinations;\n* CTRL-arrow keys\n* TAB goes to RIGHT, SHIFT-TAB goes to left\n* ESC cancels editing\n* RTN saves cell\n\nKey navigation can be disabled via the [inputKeys](#attr_inputKeys) attribute set to `false`.\n\nWhen a \"key navigation\" request is received it is passed to the [keyDir](#attr_keyDir) as a change\nin [row,col] that implementers can listen to \"change\" events on, to reposition and open editing on the\nnew relative cell.  (NOTE: This view does not reposition, it simply fires a `keyDirChange` event.\n\n##### Events\nSeveral events are fired by this View;  which can be listened for and acted upon to achieve differing results.\nFor example, the Y.DataTable.EditorOptions.inlineAC (inline autocompletion editor) listens for the\n[editorCreated](#event_editorCreated) event and once received, it configures the autocomplete plugin onto the\nINPUT node.\n\n##### Pre-Built Popup Editors\n\nThis Module includes several pre-defined editor configurations which are stored within the Y.DataTable.EditorOptions\nnamespace (presently there are popup editors for \"textbox\", \"textarea\", \"checkbox\", \"radio\", \"dropdown\", \"autocomplete\",\n\"calendar\", \"date\", \"number\").  New popup editors can be created and added to this namespace at runtime,\nand by defining the `BaseViewClass:Y.DataTable.BaseCellPopupEditor` property.\n\nThis Y.DataTable.BaseCellinlineEditor class is similar to (and compatible with ) the Y.DataTable.BaseCellPopupEditor\nin another gallery module.  Note that since the \"inline\" editor uses a simple INPUT[type=text] Node instead of an\nOverlay the codeline is quite a bit simpler.\n\nThe pre-built configuration options are stored in an Object variable Y.DataTable.EditorOptions within\nthe DataTable namespace.  The gallery-datatable-editable module uses the Y.DataTable.EditorOptions to\ncreate required editor View instances.\n\nFor example, the pre-built configuration object for the [number](Y.DataTable.EditorOptions.number.html) popup editor\nis stored as `Y.DataTable.EditorOptions.number`.\n\nTo configure an editor on-the-fly (i.e within a DataTable column definition) just include the configuration object options\nwithin DT's column `editorConfig` object, which is Y.merge'ed with the pre-built configs;\n\n       // Column definition ... disabling keyfiltering and setting a CSS class\n       { key:'firstName',\n         editor:\"text\", editorConfig:{ className:'align-right', keyFiltering:null }\n       }\n\n###### KNOWN ISSUES:\n<ul>\n<li>In-cell key navigation with scrolling DT's can put the View out of the DT limits, no bounds checking is currently done!</li>\n<li>Some problems have been encountered after \"datatable.destroy()\" and then immediate re-building of the same DT without a page refresh.</li>\n</ul>",
            "extends": "Y.View",
            "author": "Todd Smith",
            "since": "3.8.0"
        },
        "DataTable": {
            "name": "DataTable",
            "submodules": {
                "Selection": 1
            },
            "classes": {
                "Y.DataTable.CheckboxSelect": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 1
        },
        "Selection": {
            "name": "Selection",
            "submodules": {},
            "classes": {
                "Y.DataTable.CheckboxSelect": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "DataTable",
            "namespace": "",
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 1,
            "description": "A DataTable class extension that adds capability to provide a \"checkbox\" (INPUT[type=checkbox]) selection\ncapability via a new column, which includes \"select all\" checkbox in the TH.  The class uses only a few\ndefined attributes to add the capability.\n\nThis extension works with sorted data and with paginated DataTable (via Y.DataTable.Paginator), by retaining\na set of \"primary keys\" for the selected records.\n\nUsers define the \"primary keys\" by either setting a property flag of \"primaryKey:true\" in the DataTable\ncolumn configuration OR by setting the [primaryKeys](#attr_primaryKeys) attribute.\n\nTo enable the \"checkbox\" selection, set the attribute [checkboxSelectMode](#attr_checkboxSelectMode) to true,\nwhich will add a new column as the first column and sets listeners for checkbox selections.\n\nTo retrieve the \"checkbox\" selected records, the attribute [checkboxSelected](#attr_checkboxSelected) can be\nqueried to return an array of objects of selected records (See method [_getCheckboxSelected](#method__getCheckboxSelected))\nfor details.\n\n####Usage\n\t\tvar dtable = new Y.DataTable({\n\t\t    columns: \t['port','pname', 'ptitle'],\n\t\t    data: \t\tports,\n\t\t    scrollable: 'y',\n\t\t    height: \t'250px',\n\t\t\n\t\t// define two primary keys and enable checkbox selection mode ...\n\t\t    primaryKeys:\t\t[ 'port', 'pname' ],\n\t\t    checkboxSelectMode:\ttrue\n\t\t\n\t\t}).render(\"#dtable\");",
            "extends": "Y.DataTable",
            "author": "Todd Smith",
            "version": "1.0.0",
            "since": "3.6.0"
        },
        "gallery-datatable-contextmenu": {
            "name": "gallery-datatable-contextmenu",
            "submodules": {},
            "classes": {
                "Y.Plugin.DataTableContextMenu": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 1,
            "description": "This module defines a plugin that creates up to three gallery-contextmenu-view instances on a single DataTable, each\ndelegated to the contextmenu event on the THEAD, TBODY and TFOOT containers.\n\nA typical use case might be as follows;\n\n       // Create a DT with local data ...\n       var myDT = new Y.DataTable({\n           data: mydata,\n           columns: mycolumns\n       }).render();\n\n       // plugin this module to give a right-click menu on the TBODY and the THEAD\n       //    tdMenuChange and thMenuSelect are functions defined to respond to\n       //    context menu choices (not shown ... see examples)\n       myDT.plug(Y.Plugin.DataTableContextMenu,{\n           // This is a contextmenu on the TD nodes ...\n           tbodyMenu:{\n               menuItems: [\n                   {label:\"Edit\",  value:\"e\" },\n                   {label:\"Update\", value:\"u\"},\n                   {label:\"Delete Record\", value:\"d\"}\n               ],\n               after:{\n                 'selectedMenuChange': tdMenuChange\n               }\n           },\n\n           // and this is a contextmenu on the header TH nodes ...\n           theadMenu:{\n               menuItems:  [ \"Sort A-Z\",  \"Sort Z-A\",  \"Hide\" ],\n               after: {\n                   'selectedMenuChange': thMenuSelect\n               }\n           }\n       });",
            "since": "3.8.0"
        },
        "gallery-datatable-editable": {
            "name": "gallery-datatable-editable",
            "submodules": {},
            "classes": {
                "Y.DataTable.Editable": 1,
                "Y.DataTable.EditorOptions": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/datatable-editable.js",
            "line": 1247,
            "description": "A DataTable class extension that configures a DT for \"editing\", current deployment supports cell editing\n(and planned near-term support for row editing).\n\nThis module is essentially a base wrapper-class to setup DT for editing with the appropriate attributes and\nlistener creation / detachment.  The real guts of \"datatable-editing\" is in the View class definitions, within\nthe gallery-datatable-celleditor-inline and gallery-datatable-celleditor-inline modules (and possibly future\neditor View class modules).\n\n#### Functionality\n\nThe module is basically intended to keep track of the editing state (via [editable](#attr_editable) attribute) and\nhousekeeping functions with regard to managing editor View instance creation, rendering and destruction.\n\nBy design this module attempts to group common editor View instances wherever possible.  So for a DT with 14 columns\nall set with \"inline\" View classes only 1 View instance is created.\n<br/>Likewise if a DT uses 4 different \"calendar\" editor View types but each one as slightly different \"editorConfig\",\nthen this module creates 4 different calendar View instances to handle the different configurations.\n\nListeners are set for the \"cellEditorSave\" event and saved to the active \"data\" setting within this module.\n\nAdditional capability is provided for cell editing situations to add CSS classes to TD's which are added to \"editable\"\ncolumns (e.g. cursor) to indicate they are \"clickable\".\n\nThis module works sortable, scrollable (y-scrolling currently) to make changes to the client-side of the DT model\n(remote updates should be provided via ModelList sync or user-defined listeners.)\n\n\n#### Attributes\n\nPresently three attributes are provided;\n[editable](#attr_editable), [editOpenType](#attr_editOpenType) and [defaultEditor](#attr_defaultEditor).\n\nThe primary ATTR is the [editable](#attr_editable), which is used to toggle on/off the editing state of the DT\ninstance.\n\nThe [defaultEditor](#attr_defaultEditor) attribute is used to setup a cell editor View instance to be used on all editable columns\nthat don't already have an editor assigned.\n\n##### Column Properties\n\nIn addition to a few new attributes the module also recognizes some new column properties in order to support\ncell-editing in particular;\n<table>\n<tr><th>editable</th><td>{Boolean}</td><td>Flag to indicate if column is editable (set `editable:false` to exclude an\nindividual column)</td></tr>\n<tr><th>editor</th><td>{String}</td><td>Name of the defined Y.DataTable.EditorOptions View configuration for this column.</td></tr>\n<tr><th>editorConfig</th><td>{Object}</td><td>Passed to the View editor class when instantiated, and Y.merge'ed in to become View class\nattributes.</td></tr>\n</table>\n\nWhen this module is loaded and the \"editable:true\" attribute is set, it attempts to economize on the \"instantiation cost\"\nof creating View instances by identifying only editor Views that are required based upon column definitions and/or the\ndefaultEditor attribute. (e.g. if all columns are \"text\" editors, only one \"text\" editor View is instantiated)\n\n##### ... More Info\n\nThe module fires the event [cellEditorSave](#event_cellEditorSave), which can be listened for to provide updating\nof remote data back to a server (assuming a ModelList \"sync\" layer is NOT used).  Haven't provided the equivalent to\nYUI 2.x's \"asyncSubmitter\" because I think this event could easily be listened to in order to provide follow-on\nupdating to remote data stores.\n\nA new class Object (Y.DataTable.EditorOptions) is added to the DataTable namespace that serves as the\ndatastore of the editor View configuration properties.  Each \"key\" (object property) within this object\nis an entrypoint to a specific editor configuration, which are defined in the separate View class extensions (presently\ngallery-datatable-celleditor-inline and gallery-datatable-celleditor-popup. Please see those for specifics.)\n\n###### KNOWN ISSUES:\n  <ul>\n  <li>Works minimally with \"y\" scrolling, \"x\" scrolling still needs work.</li>\n  <li>Initial editor invocation is limited to \"mouse\" actions on TD only (although keyboard navigation cell-to-cell is available).</li>\n  </ul>\n\n###### FUTURE:\nThis module will be amended to add support for \"row\" editing, if required.",
            "extends": "Y.DataTable",
            "author": "Todd Smith",
            "since": "3.8.0"
        },
        "gallery-datatable-formatters": {
            "name": "gallery-datatable-formatters",
            "submodules": {},
            "classes": {
                "Y.DataTable.Formatters": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/datatable-formatters.js",
            "line": 1,
            "description": "Define a \"named\" Column Formatters object and attach it to the Y.DataTable namespace.\nThe named formatters are defined as a series of format strings that are typically used by the\ndata formatting function Y.DataType.Number.format and Y.DataType.Date.format.\n\nThe function [`namedFormatter`](#method_namedFormatter) is defined that can be used to call as a column formatter which\nformats the column cell using the [`formatStrings`](#property_formatStrings) object.\n\nThis module includes an override of the [Y.DataTable.BodyView._createRowHTML](#method_Y.DataTable.BodyView._createRowHTML) method.\nTherefore implementers shouldn't call the `namedFormatter` method directly because the overridden method handles the call if the\nentered formatter string name is recognized.\n\n###Usage\nThe format string names can be used in a column configuration object as follows;\n\n\t\tvar dt1 = new Y.DataTable({\n           data: some_data,\n           columns: [\n               { key:\"start_date\", label:\"Start\", formatter:\"fullDate\" },\n               { key:\"end_date\", label:\"End\", formatter:\"default\", \n                 formatOptions:{ type:'date', formatConfig:{ format:'%F' } } },\n               { key:\"qty\", label:\"Inventory Qty\", formatter:\"comma\" },\n               { key:\"cost\", label:\"Carried Cost\", formatter:\"currency\",\n                 formatConfig:{ prefix:'£', thousandsSeparator:\",\"} }\n   \t    ]\n\t\t}).render();\n\n####Pre-Defined `formatStrings` settings; (specifically, Y.DataTable.Formatters.formatStrings)\nFor \"number\" formatting, using [Y.DataType.Number](http://yuilibrary.com/yui/docs/api/classes/DataType.Number.html#method_format).\n\n<table><tr><th>string</th><th>Formatter Object</th><th>Formatted Example</th></tr>\n<tr><td>`general`</td><td>{ decimalPlaces:0 }</td><td>123457</td></tr>\n<tr><td>`general2`</td><td>{ decimalPlaces:2 }</td><td>123456.79</td></tr>\n<tr><td>`currency`</td><td>{ prefix:'$', decimalPlaces:0, thousandsSeparator:',' }</td><td>$ 123,457</td></tr>\n<tr><td>`currency2`</td><td>{ prefix:'$', decimalPlaces:2, thousandsSeparator:',' }</td><td>$ 123,456.78</td></tr>\n<tr><td>`currency3`</td><td>{ prefix:'$', decimalPlaces:3, thousandsSeparator:',' }</td><td>$ 123,457.789</td></tr>\n<tr><td>`comma`</td><td>{ decimalPlaces:0, thousandsSeparator:','}</td><td>123,457</td></tr>\n<tr><td>`comma2`</td><td>{ decimalPlaces:2, thousandsSeparator:','}</td><td>123,456.78</td></tr>\n<tr><td>`comma3`</td><td>{ decimalPlaces:3, thousandsSeparator:','}</td><td>123,457.789</td></tr>\n</table>\n\nFor \"date\" formatting, using [Y.DataType.Date](http://yuilibrary.com/yui/docs/api/classes/DataType.Date.html#method_format).\n<br/>(Please refer to the Date.format method above for the proper use of \"strftime\" format strings)\n<table><tr><th>string</th><th>Formatter Object</th><th>Formatted Example</th></tr>\n<tr><td>`shortDate`</td><td>{ format:'%D' }</td><td>03/12/92</td></tr>\n<tr><td>`longDate`</td><td>{ format:'%m/%d/%Y' }</td><td>03/12/1992</td></tr>\n<tr><td>`fullDate`</td><td>{ format:'%B %e, %Y' }</td><td>March 12, 1992</td></tr>\n<tr><td>`isoDate`</td><td>{ format:'%F'}</td><td>1992-03-12</td></tr>\n<tr><td>`isoDateTime`</td><td>{ format:'%FT%T'}</td><td>1992-03-12T22:11:07</td></tr>\n</table>\n\n####Replaceable Hash\nThis utility can also replace the cell value with values from a data hash (i.e. JS simple object, consisting of key:value pairs).\nAccess to this capability is by providing a `formatter` as any string not-recognizable in the `formatStrings` object\n**AND** by providing a `formatConfig` object (equal to the hash) in the column definition.\n\n####User-Defined `formatStrings`\nImplementers may add their own \"named\" formatting strings for their own use-cases simply by adding more named formatters to\nthe `formatStrings` object as;\n\n\tY.DataTable.Formatters.formatStrings['myNumberFmtr'] = {\n\t\ttype:'number',\n\t\tformatConfig:{ thousandsSeparator:'x', decimalPlaces:11 }\n\t};\n\tY.DataTable.Formatters.formatStrings['myDateFmtr'] = {\n\t\ttype:'date',\n\t\tformatConfig:{ format:{ \"At the tone the TIME will be %T\" }\n\t};",
            "extends": "DataTable",
            "since": "3.6.0"
        },
        "gallery-datatable-paginator": {
            "name": "gallery-datatable-paginator",
            "submodules": {},
            "classes": {
                "Y.DataTable.Paginator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/datatable-paginator.js",
            "line": 1,
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\npaging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\nin conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\"\nattribute is passed to the remote server.\n\n<h4>Usage</h4>\n\n    var dtable = new Y.DataTable({\n        columns:    [ 'firstName','lastName','state','age', 'grade' ],\n        data:       enrollment.records,\n        scrollable: 'y',\n        height:     '450px',\n        sortBy:     [{lastName:'asc'}, {grade:-1}],\n        paginator:  new PaginatorView({\n           model:      new PaginatorModel({itemsPerPage:50, page:3}),\n           container:  '#pagContA'\n        }),\n        resizePaginator: true\n    });\n\n<h4>Client OR Server Pagination</h4>\n\nPagination can either be done solely on the \"client\", or from a remote \"server\".  The attribute [paginationSource](#attr_paginationSource)\nis set to either of these strings.  The trivial case is where the data is coming locally (i.e. in a JS array) and the user requests\n\"client\" pagination.  Likewise when pagination occurs solely on a remote device, \"server\" is very straightforward.  This module also\nprovides a middle-path where the initial payload is obtained from a remote source, and then after loading, pagination is to be done\non the \"client\" (see below).\n\nA determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\nprovided from a server (either DataSource or ModelSync.REST) is performed within the method [_afterDataReset](#method__afterDataReset).\n\nFor server-side pagination, the OUTGOING request must include (as a minimum);  `page` and `itemsPerPage` querystring\nparameters (all others, including `sortBy` are optional).  Likewise, the INCOMING (returned response) must include as \"meta-data\" at\nleast `totalItems`, plus any other PaginatorModel attributes.   The key item within the returned response is `totalItems'. If the returned\nresponse does not contain `totalItems` metadata <b>the PaginatorView will not be shown!</b>.\n\nWe have provided an attribute [serverPaginationMap](#attr_serverPaginationMap) as an object hash to translate both outgoing\nquerystring parameter names and incoming (response returned) parameter names in order to match what is expected by the\nPaginatorModel.  Please see this attribute or the examples for how to utilize this map for your use case.\n\n<h4>Loading the \"data\" For a Page</h4>\nOnce the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\nFor the case of \"client\" pagination, an internal buffer [_mlistArray](#property__mlistArray) is set to hold all of the data.\nEach page request in this circumstance involves using simply Array slicing methods from the buffer.\n(See method [paginatorLocalRequest](#method_paginatorLocalRequest) for details)\n\nThe case of \"remote data\" (from a server) is actually more straightforward.  For the case of ModelSync.REST remote data the\ncurrent \"pagination state\" is processed through the [serverPaginationMap](#attr_serverPaginationMap) hash (to convert to\nqueryString format) and the ModelList.load() method is called.  For the case of a DataSource, a similar approach is used where\nthe [requestStringTemplate](#attr_requestStringTemplate) is read, processed through the serverPaginationMap hash and a\ndatasource.load() request is fired.\n(See methods [paginatorMLRequest](#method_paginatorMLRequest) and [paginatorDSRequest](#method_paginatorDSRequest)for details)\n\nThis extension DOES NOT \"cache\" pages for remote data, it simply inserts the full returned data into the DT.  So as a consequence,\na pagination state change for remote data involves a simple request sent to the server source (either DataSource or ModelSync.REST)\nand the response results are loaded in the DT as in any other \"response\".\n\n<h4>Loading the \"initial data\" remotely - then using \"client\" Pagination</h4>\n\nA recent revision to this module now allows for the initial payload of data that constitutes the entire \"dataset\" to be loaded\nfrom a remote source (by the standard DataSource or ModelSync.REST methods).\n\nBy setting the [paginationSource](#attr_paginationSource) attribute to \"client\", this module proceeds with paginating the DataTable\nas if the data was initially set within the \"data\" property.\n\n<h4>Sorting</h4>\n\nThis module supports sorting for both client and server side Pagination.  Note that sorting for \"server-side\" is required to be\naccomplished by the remote server; the \"sortBy\" settings are passed in a remote page request.\n\nFor client-side Pagination the task is a more complex.  We utilize an internal buffer to store the client-side data, so therefore\nthe requested \"sorting\" is accomplished internally within method [paginatorSortLocalData](#method_paginatorSortLocalData).\nBasic \"client-side\" sorting is supported in this method (limited to one sort key at a time).\nImplementers may override this method for more complex sorting needs.",
            "extends": "DataTable",
            "since": "3.6.0"
        },
        "gallery-datatable-selection": {
            "name": "gallery-datatable-selection",
            "submodules": {},
            "classes": {
                "Y.DataTable.Selection": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/datatable-selection.js",
            "line": 1,
            "description": "A class extension for DataTable that adds \"highlight\" and \"select\" actions via mouse selection.\nThe extension works in either \"cell\" mode or \"row\" mode (set via attribute [selectionMode](#attr_selectionMode)).\n\nHighlighting is controlled by the [highlightMode](#attr_highlightMode) attribute (either \"cell\" or \"row\").\n(Highlighting provides a \"mouseover\" indication only), and a delegated \"mouseover\" event is defined in this module.\n\nSelection is provided via \"click\" listeners, by setting a delegated \"click\" handler on the TD or TR elements.\n\nThis extension includes the ability to select \"multiple\" items, by setting the [selectionMulti](#attr_selectionMulti)\nattribute (enabled using browser multi-select click modifier, i.e. \"Cmd\" key on Mac OSX or \"Ctrl\" key on Windows / Linux).\n\nAdditionally, a \"range\" selection capability is provided by using the browser range selector click key modifier,\nspecifically the Shift key on most systems.\n\nThe extension has been written to allow preserving the \"selected\" rows or cells during \"sort\" operations.  This is\naccomplished by storing the selected TR's basis record, specifically the \"clientId\" attribute which remains unique\nafter sorting operations.\n\nSpecific attributes are provided that can be read for current selections, including the ATTRS [selectedRows](#attr_selectedRows),\nand [selectedCells](#attr_selectedCells).\n\nTypical usage would be to set the \"selectionMode\" and \"highlightMode\" attributes (and selectionMulti if desired) and then\nto provide a positive control (like a BUTTON or A link) to process the selections.  Two events are provided,  [selection](#event_selection)\nand [selected](#event_selected) but these fire for every \"click\" action, which may not be ideal -- especially for multi selections.",
            "extends": "Y.DataTable",
            "author": "Todd Smith",
            "since": "3.6.0"
        },
        "FooterView": {
            "name": "FooterView",
            "submodules": {},
            "classes": {
                "Y.FooterView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/dt_footerview.js",
            "line": 1,
            "description": "FooterView is a YUI View class extension that provides a simple, one row summary row\nto a Datatable. This view provides\nfor a summary row appended to the bottom of the DataTable TBODY, typically consisting\nof **one** TH element (with a colspan) and several TD elements for each desired column\nwhere a \"calculated field\" is desired.\n\nView configuration provides for calculated fields based upon the all of the available\ndataset fields within the DataTable's \"ModelList\".\n\nThe view works with either non-scrolling or scrolling DataTables, and allows for either a\n\"fixed\" view, wherein the footer remains fixed at the bottom of the DataTable contentBox\nwhile the table is scrolled.\n\n#### Calculated Fields\n\nThe current implementation supports the following calculated fields, where they are\nidentified by their placeholder tag for replacement via Y.sub (case insensitive);\n\n* `{sum}` Calculate the arithmetic sum of the specified column in dataset\n* `{min}` Calculate the minimum value of the specified column in dataset\n* `{max}` Calculate the maximum value of the specified column in dataset\n* `{avg}` Calculate the arithmetic average of the of the specified column (synonyms `{mean}`, `{average}`)\n\nAlso, non-looping calcs are;\n\n*  `{row_count}` Returns the number of rows in the dataset\n*  `{col_count}` Returns the number of columns in the dataset (no visibility check)\n*  `{date}` Returns the current date\n*  `{time}` Returns the current time\n\n#### Configuration\n\nYUI 3.6.0 DataTable supports attributes including `footerView` and `footerConfig`.\n\nThis FooterView recognizes the following attributes, which must be configured via the\nDataTable {configs} (see usage example below);\n\n* [`fixed`](#attr_fixed) : Flag indicating if footer should be fixed or floating\n* [`heading`](#attr_heading) : Object, defining the single TH as;\n   * [`colspan`](#attr_heading.colspan) : Number of columns to merge from left for the TH\n   * [`content`](#attr_heading.content) : A string indicating the content of the TH for the footer\n   * [`className`](#attr_heading.className) : Additional classname for TH\n* [`columns`](#attr_columns) : Array of objects, one per desired TD column in footer as;\n   * [`key`](#attr_columns.key) : `key` name from the DataTable columns\n   * [`content`](#attr_columns.content) : String indicating the contents of this TD\n   * [`className`](#attr_columns.className) : Additional classname for TD\n   * [`formatter`](#attr_columns.formatter) : Formatter to apply to this column result\n* [`dateFormat`](#attr_dateFormat) : Format string to use for any {date} fields\n* [`timeFormat`](#attr_timeFormat) : Format string to use for any {time} fields\n\nAdditionally the user can provide a valid function as a column `content` to calculate a\ncustom entry for \n<br/>a column (see [`columns.content`](#attr_columns.content) or [`calcDatasetValue`](#method_calcDatasetValue))\n\n#### Usage\n\n    var dtable = new Y.DataTable({\n        columns:    ['EmpId','FirstName','LastName','NumClients','SalesTTM'],\n        data:       AccountMgr.Sales,\n        scrollable: 'y',\n        height:     '250px',\n        width:      '400px',\n\n        footerView:   Y.FooterView,\n        footerConfig: {\n            fixed:   true,\n            heading: {\n                colspan:\t3,\n                content:\t\"Sales Totals for {row_count} Account Mgrs : &nbsp;\",\n                className:\t\"align-right\"\n            },\n            columns: [\n                { key:'NumClients', content:\"{Avg} avg\", className:\"clientAvg\" },\n                { key:'SalesTTM',   content:\"{sum}\", className:\"salesTotal\", formatter:fmtCurrency }\n            ]\n        }\n    });\n\n    dtable.render('#salesDT');",
            "extends": "Y.View",
            "author": "Todd Smith",
            "version": "1.1.0",
            "since": "3.6.0"
        },
        "gallery-paginator-view": {
            "name": "gallery-paginator-view",
            "submodules": {},
            "classes": {
                "Y.PaginatorModel": 1,
                "Y.PaginatorView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/paginator-view.js",
            "line": 328,
            "description": "A Model class extension to be used to track \"pagination state\" of a paged set of control elements.\nFor example, can be used to track the pagination status of a DataTable where the user selects limited\nportions for display, against a larger data set.\n\nThe primary tools for maintaining \"page state\" is through the following attributes;\n\n* `totalItems` &nbsp;&nbsp;  Which represents the \"Total count of items of interest\" (See attribute [totalItems](#attr_totalItems) )\n* `itemsPerPage` &nbsp;&nbsp; Which represents the \"Count of items on each page\" (See attribute [itemsPerPage](#attr_itemsPerPage) )\n*  `page` &nbsp;&nbsp;  The currently selected page, within all pages required that encompass the above two attributes\n    (See attribute [page](#attr_page) )\n\n<h4>Usage</h4>\n\n    // setup a paginator model for 500 'foo' items, paged at 50 per page ...\n    var pagModel = new Y.PaginatorModel({\n       totalItems:     500,\n       itemsPerPage:   50\n    });\n    pagModel.get('totalPages');  // returns 10\n\n    pagModel.set('page',3);\n    pagModel.getAttrs(['lastPage','page','itemIndexStart','itemIndexEnd']);\n    // returns ... { lastPage:1, page:3, itemIndexStart:100, itemIndexEnd:149 }",
            "extends": "Y.Model",
            "version": "1.0.1",
            "since": "3.6.0"
        },
        "gallery-picklist": {
            "name": "gallery-picklist",
            "submodules": {},
            "classes": {
                "PickList": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/picklist.js",
            "line": 11,
            "description": "PickList Widget :\n  \nRequires:  3.5.0pr2 at least, \"event\", \"button\", \"cssbutton\""
        }
    },
    "classes": {
        "Y.Plugin.Calendar.JumpNav": {
            "name": "Y.Plugin.Calendar.JumpNav",
            "shortname": "Y.Plugin.Calendar.JumpNav",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-contextmenu-view",
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 1,
            "description": "A Plugin for Y.Calendar that sets up Calendar to work with Y.Calendar.JumpNavView, which\nis a View class extension to setup a \"click\" listener on Calendar's \"Month Year\" header label\nthat opens a popup Panel to provide a quick method to jump to a month / year.\n\nPlease see the Calendar.JumpNavView documentation for full details.",
            "example": [
                "\n\tvar myCal = new Y.Calendar({\n\t\tcontentBox: \"#mycal\",\n\t\twidth: '200px',\n\t\tshowPrevMonth: true,\n\t\tshowNextMonth: true\n\t});\n\n\t// Plugin the View to this Calendar ... available years are 1988 to 2021\n\tcal.plug( Y.Plugin.Calendar.JumpNav, {\n\t\tyearStart: 1988,\n\t\tyearEnd:   2021\n\t});\n\n\tcal.render();"
            ],
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "is_constructor": 1
        },
        "Y.Calendar.JumpNavView": {
            "name": "Y.Calendar.JumpNavView",
            "shortname": "Y.Calendar.JumpNavView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-contextmenu-view",
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 150,
            "description": "This class defines a View class extension for Calendar that configures to load on a \"click\" on the Calendar's \"Month Year\"\nheader label to display a popup panel that allows for selecting the month / year without requiring to page thru by month.\nThe view creates a Panel instance from a standard template (see the property [template](#property_template) for the default)\nand handles populating the SELECT dropdown controls for \"month\" and \"year\".\n\nAttributes are provided that include [yearStart](#attr_yearStart) and [yearEnd](#attr_yearEnd) for defining the range to\nbe used for the \"year\" dropdown elements, for example.\n\n#####Usage\nThe simplest application includes creating a Calendar instance and then creating the View and attaching the calendar to\nthe view with the [calendar](#attr_calendar) attribute.\n\n\tvar cal = new Y.Calendar({\n\t\tcontentBox: \"#mycal\",\n\t\twidth:'240px',\n\t\tshowPrevMonth: true,\n\t\tshowNextMonth: true\n\t}).render();\n\n\t// This creates a View instance and connects it to the \"cal\" Calendar instance.\n\tvar calJNav = new Y.Calendar.JumpNavView({\n\t\tcalendar:  cal,\n\t\tyearStart: 1988,\n\t\tyearEnd:   2021\n\t});\n\nAn additional module is provided, the Y.Plugin.Calendar.JumpNav plugin that attaches the Calendar to the view via a plugin method.",
            "extends": "Y.View",
            "version": "3.5.0"
        },
        "Y.ContextMenuView": {
            "name": "Y.ContextMenuView",
            "shortname": "Y.ContextMenuView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-contextmenu-view",
            "namespace": "",
            "file": "gallery-js/contextmenu-view.js",
            "line": 1,
            "description": "This module includes a Y.View class extension that attaches to an existing \"trigger\" Node and uses event delegation to listen\nfor \"contextmenu\" requests (i.e. right-click). When the context menu is invoked, a Y.Overlay object is rendered and displayed\nas a popup that includes user-defined menu items that are related to the context where the menu was invoked.\n\nThis view utilizes several attributes and fires several events that users can listen to in order to take specific actions based\non the \"trigger target\" node.\n\nPlease refer to the [trigger](#attr_trigger) ATTRIBUTE for more description of the target.node and target.trigger.\n\n#####Usage\nTo configure a bare-bones basic contextmenu, you need to provide the `trigger` and `menuItems` attributes as;\n\n    var cmenu = new Y.ContextMenuView({\n       trigger: {\n           node:   Y.one(\".myExistingContainer\"),\n           target:  'li'\n       },\n       menuItems: [ \"Add\", \"Edit\", \"Delete\" ]\n   });\n\nThe `menuItems` can be simple entries or Objects, if they are Objects the \"label\" property will be used to fill the visible Menu\n(See [menuItems](#attr_menuItems)).\n\n#####Attributes / Events\nAn implementer is typically interested in listening to the following ATTRIBUTE \"change\" events;\n<ul>\n  <li>`selectedMenuChange` : which fires when a contextmenu choice is clicked (see <a href=\"#attr_selectedMenu\">selectedMenu</a>)</li>\n  <li>`contextTargetChange`: which fires when the user \"right-clicks\" on the target.node (see <a href=\"#attr_contextTarget\">contextTarget</a>)</li>\n</ul>\n\nAdditionally please refer to the [Events](#events) section for more information on available events."
        },
        "Y.DataTable.BaseCellInlineEditor": {
            "name": "Y.DataTable.BaseCellInlineEditor",
            "shortname": "Y.DataTable.BaseCellInlineEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-inline",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 1,
            "description": "A View class that serves as the BASE View class for a TD Cell \"inline\" editor, i.e. an editor that\nis a single INPUT node that completely overlies the TD cell.  This editor is intended to replicate\nthe familiar \"spreadsheet\" type of input.\n\n##### Editing / Validation\n\nThis editor view creates a simple INPUT[type=text] control and repositions and resizes it to match the\nunderlying TD, set with a z-Index to visually appear over the TD cell.\n\nKey listeners are provided to detect changes, prohibit invalid keystrokes (via the [keyFiltering](#attr_keyFiltering)\n setting) and to allow validation upon a \"save\" entry (keyboard RTN stroke) where a [validator](#attr_validator) can\nbe prescribed to allow/disallow changes based upon the overall \"value\" of the INPUT control.\n\n##### Navigation\nThe editor provides the capability to navigate from TD cell via key listeners on the following key\ncombinations;\n * CTRL-arrow keys\n * TAB goes to RIGHT, SHIFT-TAB goes to left\n * ESC cancels editing\n * RTN saves cell\n\nKey navigation can be disabled via the [inputKeys](#attr_inputKeys) attribute set to `false`.\n\nWhen a \"key navigation\" request is received it is passed to the [keyDir](#attr_keyDir) as a change\nin [row,col] that implementers can listen to \"change\" events on, to reposition and open editing on the\nnew relative cell.  (NOTE: This view does not reposition, it simply fires a `keyDirChange` event.\n\n##### Events\nSeveral events are fired by this View;  which can be listened for and acted upon to achieve differing results.\nFor example, the Y.DataTable.EditorOptions.inlineAC (inline autocompletion editor) listens for the\n[editorCreated](#event_editorCreated) event and once received, it configures the autocomplete plugin onto the\nINPUT node.\n\n##### Configuration\nThs Y.DataTable.BaseCellInlineEditor editor is intended to be configured by varying the configuration\nparameters (i.e. attribute and related configuration) to permit a variety of editing features.\n\nSince the View class permits ad-hoc attributes, the implementer can pass many properties in during instantiation\nthat will become available as run-time View attributes.\n\nThis Module includes several pre-defined editor configurations which are stored within the Y.DataTable.EditorOptions\nnamespace (presently there are \"inline\", \"inlineNumber\", \"inlineDate\", \"inlineAC\").  New inline editors can be\ncreated and added to this namespace at runtime, and by defining the `BaseViewClass:Y.DataTable.BaseCellInlineEditor` property.\n\nFor example, the pre-built configuration object for the [inlineDate](Y.DataTable.EditorOptions.inlineDate.html) inline editor\nis stored as `Y.DataTable.EditorOptions.inlineDate`.\n\nTo configure an editor on-the-fly (i.e. within a DataTable column definition) just include the configuration object options\nwithin DT's column `editorConfig` object, which is Y.merge'ed with the pre-built configs;\n\n       // define an 'inlineDate' editor with additional configs ...\n       { key:'date_of_claim', editor:\"inlineDate\", editorConfig:{ dateformat:'%Y-%m-%d'} }\n\nThis `Y.DataTable.BaseCellinlineEditor` class is similar to (and compatible with ) the `Y.DataTable.BaseCellPopupEditor`\nin another gallery module.  Note that since the \"inline\" editor uses a simple INPUT[type=text] Node instead of an\nOverlay the codeline is quite a bit simpler.\n\n###### KNOWN ISSUES:\n  <ul>\n  <li>This View doesn't work well with scrolling DT's, so I've disabled it currently.</li>\n  <li>Sometimes after a DT's `editable` ATTR is toggled true/false a \"cannot read 'style'\" message occurs and editing failes\n       requiring a page refresh.</li>\n  </ul>"
        },
        "Y.DataTable.EditorOptions.inline": {
            "name": "Y.DataTable.EditorOptions.inline",
            "shortname": "Y.DataTable.EditorOptions.inline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-inline",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 885,
            "description": "### Inline Cell Editor \"inline\"\nThis View configuration is used to setup an editor referenced as \"inline\" as a simple inline-type cell editor.\n\n##### Basic Usage:\n          // Column definition\n          { key:'surName', editor:\"inline\" }\n\n##### Standard Configuration\nThis inline editor creates a simple INPUT[type=text] control and positions it to match the underlying TD node. It\nuses the default settings from the BaseViewClass's attributes.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n         Y.DataTable.EditorOptions.inline = {\n             BaseViewClass:  Y.DataTable.BaseCellInlineEditor,\n             name:           'inline'\n         };\n\n **PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n `editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.inlineNumber": {
            "name": "Y.DataTable.EditorOptions.inlineNumber",
            "shortname": "Y.DataTable.EditorOptions.inlineNumber",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-inline",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 917,
            "description": "### Inline Cell Editor \"inlineNumber\"\nThis View configuration is used to setup an editor referenced as \"inlineNumber\" as a simple inline-type\ncell editor.  It is identical to the \"inline\" textual editor but incorporates Numeric validation prior to\nsaving to the DT.\n\n##### Basic Usage:\n        // Column definition\n        { key:'unit_price', editor:\"inlineNumber\" }\n\n        // Column definition ... to allow integers only\n        { key:'QuantityInStock', editor:\"inlineNumber\", editorConfig:{ keyFiltering: /\\d/ }  }\n\n##### Standard Configuration\nThis inline editor creates a simple INPUT[type=text] control and positions it to match the underlying TD node.  A `saveFn`\nis defined that uses an ad-hoc attribute \"validationRegEx\" to test for validity prior to saving the data.  If the\nvalue passes validation it is converted to numeric form and returned.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n         Y.DataTable.EditorOptions.inlineNumber = {\n             BaseViewClass:  Y.DataTable.BaseCellInlineEditor,\n             name:           'inlineNumber',\n             hideMouseLeave: false,\n\n             // Define a key filtering regex ... only allow digits, \"-\" or \".\"\n             keyFiltering:   /\\.|\\d|\\-/,\n\n             // setup a RegExp to check for valid floating point input ....\n             validator: /^\\s*(\\+|-)?((\\d+(\\.\\d*)?)|(\\.\\d*))\\s*$/,\n\n             // Function to call after numeric editing is complete, prior to saving to DataTable ...\n             //  i.e. checks validation against ad-hoc attribute \"validationRegExp\" (if it exists)\n             //       and converts the value to numeric (or undefined if fails regexp);\n             saveFn: function(v){\n                 var vre = this.get('validationRegExp'),\n                     value;\n                 if(vre instanceof RegExp) {\n                     value = (vre.test(v)) ? +v : undefined;\n                 } else {\n                     value = +v;\n                 }\n                 return value;\n             }\n         };\n\n **PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n `editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.inlineDate": {
            "name": "Y.DataTable.EditorOptions.inlineDate",
            "shortname": "Y.DataTable.EditorOptions.inlineDate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-inline",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 1005,
            "description": "### Inline Cell Editor \"inlineDate\"\nThis View configuration is used to setup an editor referenced as \"inlineDate\" as a simple inline-type\ncell editor.  It is identical to the \"inline\" textual editor but incorporates Numeric validation prior to\nsaving to the DT.\n\n##### Basic Usage:\n        // Column definition\n        { key:'weddingDate', editor:\"inlineDate\" }\n\n        // Column definition with user-specified 'dateFormat' to display Date in text box on display\n        { key:'date_of_claim', editor:\"inlineDate\", editorConfig:{ dateformat:'%Y-%m-%d'} }\n\n##### Standard Configuration\nThis inline editor creates a simple INPUT[type=text] control and positions it to match the underlying TD node.  Since\na JS Date object isn't very pretty to display / edit in a textbox, we use a `prepFn` to preformat the Date in a\nhuman-readable form within the textbox.  Also a `saveFn` is defined to convert the entered data using `Date.parse`\nback to a valid JS Date prior to saving to the DT.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n        Y.DataTable.EditorOptions.inlineDate = {\n             BaseViewClass:  Y.DataTable.BaseCellInlineEditor,\n             name:           'inlineDate',\n\n             // Define default date format string to use\n             dateFormat: \"%D\",\n\n             // Setup input key filtering for only digits, \"-\" or \"/\" characters\n             keyFiltering:   /\\/|\\d|\\-/,\n\n             //  Function to call just prior to populating the INPUT text box,\n             //   so we pre-format the textbox in \"human readable\" format here\n             prepFn: function(v){\n                 var dfmt =  this.get('dateFormat') || \"%m/%d/%Y\";\n                 return Y.DataType.Date.format(v,{format:dfmt});\n             },\n\n             // Function to call after Date editing is complete, prior to saving to DataTable ...\n             //  i.e. converts back to \"Date\" format that DT expects ...\n             saveFn: function(v){\n                 return Y.DataType.Date.parse(v);\n             }\n        };\n\n **PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n `editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.inlineAC": {
            "name": "Y.DataTable.EditorOptions.inlineAC",
            "shortname": "Y.DataTable.EditorOptions.inlineAC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-inline",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 1089,
            "description": "### Inline Cell Editor \"inlineAC\"\nThis View configuration is used to setup an inline editor referenced as \"inlineAC\" composed of a simple inline-type\ncell editor which has the AutoComplete plugin attached to the input node.\n\n##### Basic Usage:\n       // Column definition\n       { key:'degreeProgram', editor:\"inlineAC\",\n         editorConfig:{\n\n            // The following object is passed to \"autocomplete\" plugin when this\n            //   editor is instantiated\n            autocompleteConfig: {\n               source:  [ \"Bachelor of Science\", \"Master of Science\", \"PhD\" ]\n               on: {\n                   select: function(r){\n                       var val = r.result.display;\n                       this.editor.saveEditor(val);\n                   }\n               }\n            }\n          }\n       }\n\n##### Standard Configuration\nThis inline editor creates a simple INPUT[type=text] control and positions it to match the underlying TD node.\nWhen the editor is first instantiated, the Y.Plugin.AutoComplete is connected to the INPUT using the `autocompleteConfig`\nobject passed in by the user.\n\nThis editor View instance is attached to the autocomplete plugin as static property \"editor\".  An \"on:select\" listener\nis defined in the configs to take action on saving the selected item from the autocomplete.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n        Y.DataTable.EditorOptions.inlineAC = {\n             BaseViewClass:  Y.DataTable.BaseCellInlineEditor,\n             name:           'inlineAC',\n             hideMouseLeave: false,\n\n             // Define listener to this editor View's events\n             after: {\n\n                //---------\n                //  After this View is instantiated and created,\n                //     configure the Y.Plugin.AutoComplete as a plugin to the editor INPUT node\n                //---------\n                editorCreated : function(o){\n                   var inputNode = o.inputNode,\n                       // Get the users's editorConfig \"autocompleteConfig\" settings\n                       acConfig = this.get('autocompleteConfig') || {},\n                       editor = this;\n\n                   if(inputNode && Y.Plugin.AutoComplete) {\n                       // merge user settings with these required settings ...\n                       acConfig = Y.merge(acConfig,{\n                           alwaysShowList: true,\n                           render: true\n                       });\n                       // plug in the autocomplete and we're done ...\n                       inputNode.plug(Y.Plugin.AutoComplete, acConfig);\n\n                       // add this View class as a static prop on the ac plugin\n                       inputNode.ac.editor = editor;\n                   }\n\n                }\n             }\n         };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.BaseCellPopupEditor": {
            "name": "Y.DataTable.BaseCellPopupEditor",
            "shortname": "Y.DataTable.BaseCellPopupEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1,
            "description": "This module defines an extension of View that includes a BASE Y.DataTable.BaseCellPopupEditor View class definition\ncell \"pop-up\" editor.  This view class includes an editor with HTML inserted into an Overlay widget directly over\nthe TD cell.  Positioning, event management, creation/destruction and attribute changes are managed by this class.\n\n##### Configuration\n\nY.DataTable.BaseCellPopupEditor by itself just creates an empty Overlay container, and really isn't meant to be used\nthat way.  The view class includes a number of [attributes](#attrs) that are the key to defining a workable popup editor\nand it's behaviors.\n\nThe Y.DataTable.BaseCellPopupEditor View class communicates with the DataTable via the gallery-datatable-editable\nmodule, which sets up invocation and rendering of this View and establishes listeners for View events, thus the\nDataTable serves as a Controller.\n\nSince the generic View class permits ad-hoc attributes, the implementer can pass many properties in during instantiation\nthat will become available as run-time View attributes.\n\n##### View Construction / Rendering\n\nHTML content that will be set to the Overlay's `bodyContent` is setup via the [templateObject](#attr_templateObject) and\nit's `html` property.  The base view class uses the YUI Template module, and specifically the Template.Micro module to\nbuild out the HTML (Handlebars format is also available).  For many use cases you won't need a fancy \"template\", and\nin fact your templateObject.html may not include any \"template parameters\" at all -- which is perfectly fine.\n\n##### Editing / Validation\n\nThis editor view creates the template'ed content, and attaches the [_inputClass](#property__classInput) wherever the\nimplementer assigns the class tag.  The editor can also be configured to listen to the base view's [editorCreated](#event_editorCreated)\nin order to attach or configure a Widget or another UI component within the View container.\n\nKey listeners are provided to detect changes to the first Node within the container with [_inputClass](#property__classInput)\nset.  These keylisteners can be used prohibit invalid keystrokes (via the [keyFiltering](#attr_keyFiltering) setting) and\nto allow validation upon a \"save\" entry (keyboard RTN stroke) where a [validator](#attr_validator) can be prescribed to\nallow/disallow changes based upon the overall \"value\" of the INPUT control.\n\nIf the implementer has connected a Widget to this View, the widget should be configured by it's own \"selection\" mechanism\nto either call this View's [saveEditor](#event_saveEditor) or[cancelEditor](#event_cancelEditor) methods to ensure proper\nsaving / closing of the Overlay.\n\n##### Navigation\nThe editor provides the capability to navigate from TD cell via key listeners on the following key\ncombinations;\n* CTRL-arrow keys\n* TAB goes to RIGHT, SHIFT-TAB goes to left\n* ESC cancels editing\n* RTN saves cell\n\nKey navigation can be disabled via the [inputKeys](#attr_inputKeys) attribute set to `false`.\n\nWhen a \"key navigation\" request is received it is passed to the [keyDir](#attr_keyDir) as a change\nin [row,col] that implementers can listen to \"change\" events on, to reposition and open editing on the\nnew relative cell.  (NOTE: This view does not reposition, it simply fires a `keyDirChange` event.\n\n##### Events\nSeveral events are fired by this View;  which can be listened for and acted upon to achieve differing results.\nFor example, the Y.DataTable.EditorOptions.inlineAC (inline autocompletion editor) listens for the\n[editorCreated](#event_editorCreated) event and once received, it configures the autocomplete plugin onto the\nINPUT node.\n\n##### Pre-Built Popup Editors\n\nThis Module includes several pre-defined editor configurations which are stored within the Y.DataTable.EditorOptions\nnamespace (presently there are popup editors for \"textbox\", \"textarea\", \"checkbox\", \"radio\", \"dropdown\", \"autocomplete\",\n\"calendar\", \"date\", \"number\").  New popup editors can be created and added to this namespace at runtime,\nand by defining the `BaseViewClass:Y.DataTable.BaseCellPopupEditor` property.\n\nThis Y.DataTable.BaseCellinlineEditor class is similar to (and compatible with ) the Y.DataTable.BaseCellPopupEditor\nin another gallery module.  Note that since the \"inline\" editor uses a simple INPUT[type=text] Node instead of an\nOverlay the codeline is quite a bit simpler.\n\nThe pre-built configuration options are stored in an Object variable Y.DataTable.EditorOptions within\nthe DataTable namespace.  The gallery-datatable-editable module uses the Y.DataTable.EditorOptions to\ncreate required editor View instances.\n\nFor example, the pre-built configuration object for the [number](Y.DataTable.EditorOptions.number.html) popup editor\nis stored as `Y.DataTable.EditorOptions.number`.\n\nTo configure an editor on-the-fly (i.e within a DataTable column definition) just include the configuration object options\nwithin DT's column `editorConfig` object, which is Y.merge'ed with the pre-built configs;\n\n       // Column definition ... disabling keyfiltering and setting a CSS class\n       { key:'firstName',\n         editor:\"text\", editorConfig:{ className:'align-right', keyFiltering:null }\n       }\n\n###### KNOWN ISSUES:\n<ul>\n<li>In-cell key navigation with scrolling DT's can put the View out of the DT limits, no bounds checking is currently done!</li>\n<li>Some problems have been encountered after \"datatable.destroy()\" and then immediate re-building of the same DT without a page refresh.</li>\n</ul>"
        },
        "Y.DataTable.EditorOptions.text": {
            "name": "Y.DataTable.EditorOptions.text",
            "shortname": "Y.DataTable.EditorOptions.text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1318,
            "description": "### Popup Cell Editor \"text\"\nThis View configuration is used to setup a basic textbox type popup cell editor.\n\n##### Basic Usage\n       // Column definition\n       { key:'firstName', editor:\"text\"}\n\n       // Column definition ... disabling inputKeys navigation and setting offsetXY\n       { key:'firstName',\n         editor:\"text\", editorConfig:{ inputKeys:false, offsetXY: [5,7] }\n       }\n\n##### Standard Configuration\nThis editor creates a simple INPUT[text] internally within the popup Editor View container positioned\ndirectly over the TD element.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.text = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'text',\n           templateObject: {\n               // Template.Micro setup\n               html: '<input type=\"text\" title=\"inline cell editor\" class=\"<%= this.classInput %>\"  />'\n           },\n           inputKeys:      true,\n           after:{\n               editorShow : function(o){\n                   o.inputNode.focus();\n               }\n           }\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.textarea": {
            "name": "Y.DataTable.EditorOptions.textarea",
            "shortname": "Y.DataTable.EditorOptions.textarea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1377,
            "description": "### Popup Cell Editor \"textarea\"\nThis View configuration is used to setup an editor referenced as \"textarea\" as a popup-type cell editor.\n\n##### Basic Usage:\n       // Column definition\n       { key:'experience', editor:\"textarea\"}\n\n       // Column definition ... disabling inputKeys navigation and setting offsetXY\n       { key:'firstName',\n         editor:\"JobDescription\", editorConfig:{\n            // disables the buttons below the TEXTAREA\n            overlayConfig:{ buttons: null }\n         }\n       }\n\n##### Standard Configuration\nThis editor creates a simple TEXTAREA internally within the popup Editor View container positioned\ndirectly over the TD element.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.textarea = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'textarea',\n\n           // Template.Micro setup\n           templateObject:{\n                   html: '<textarea title=\"inline cell editor\" class=\"<%= this.classInput %>\"></textarea>'\n               },\n\n           // allow inter-cell navigation\n           inputKeys: true,\n\n           // don't save editor when KEY RTN is detected (must use Save button to save)\n           saveKeyRTN: false,\n\n           // setup two buttons \"Save\" and \"Cancel\" for the containing overlay\n           overlayConfig:{\n               buttons:   [\n                   { name:'save', value: 'Save',\n                       action:function(){\n                           var val = (this._inputNode) ? this._inputNode.get('value') : null;\n                           this.saveEditor(val);\n                       }\n                   },\n                   { name:'cancel', value: 'Cancel',\n                       action:function(){\n                           this.cancelEditor();\n                       }\n                   }\n               ]\n           },\n\n           after:{\n               // focus the TEXTAREA on display\n               editorShow : function(o){\n                   o.inputNode.focus();\n               }\n           }\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.number": {
            "name": "Y.DataTable.EditorOptions.number",
            "shortname": "Y.DataTable.EditorOptions.number",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1485,
            "description": "### Popup Cell Editor \"number\"\nThis View configuration is used to setup a basic numeric editor as a popup-type cell editor.\nA `saveFn` is prescribed that handles validation and converting the input text to numeric format.\n\n##### Basic Usage\n       // Column definition\n       { key:'salary', editor:\"number\" }\n\n       // Column definition ... disabling keyfiltering and setting a CSS class\n       { key:'firstName',\n         editor:\"text\", editorConfig:{ className:'align-right', keyFiltering:null }\n       }\n\n##### Standard Configuration\nThis editor creates a simple INPUT[text] internally within the popup Editor View container positioned\ndirectly over the TD element. Configuration is almost identical to [text](/api/classes/Y.DataTable.EditorOptions.text.html#index)\neditor except for the pre-selection of contents and conversion of saved value to numeric format in saveFn.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.number = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'number',\n           templateObject:{\n               // Template.Micro template\n               html: '<input type=\"text\" title=\"inline cell editor\" class=\"<%= this.classInput %>\"  />'\n           },\n           inputKeys: true,\n\n           // only permit digit, '.' and '-' keys in the input, reject others ...\n           keyFiltering:   /\\.|\\d|\\-/,\n\n           // Set a flaoting point number validation RegEx expression\n           validator:  /^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/,\n\n           // Function to call after numeric editing is complete, prior to saving to DataTable ...\n           //  i.e. checks validation against ad-hoc attribute \"validationRegExp\" (if it exists)\n           //       and converts the value to numeric (or undefined if fails regexp);\n           saveFn: function(v){\n               var vre = this.get('validator'),\n                   value;\n               if(vre instanceof RegExp) {\n                   value = (vre.test(v)) ? +v : undefined;\n               } else {\n                   value = +v;\n               }\n               return value;\n           },\n\n           // Set an after listener to this View's instance\n           after: {\n\n               //---------\n               // After this view is displayed,\n               //   focus and \"select\" all content of the input (for quick typeover)\n               //---------\n               editorShow : function(o){\n                   // initially set focus / select entire INPUT\n                   o.inputNode.focus();\n                   o.inputNode.select();\n               }\n           }\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.date": {
            "name": "Y.DataTable.EditorOptions.date",
            "shortname": "Y.DataTable.EditorOptions.date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1608,
            "description": "### Popup Cell Editor \"date\"\nThis View configuration is used to setup a bare-bones date editor as a popup-type cell editor.\nConfiguration is setup with both `prepFn` and `saveFn` to convert the Date object.\n\n##### Basic Usage\n       // Column definition\n       { key:'firstName', editor:\"date\"}\n\n       // Column definition ... with user-defined dateFormat and disabling keyfiltering\n       { key:'firstName',\n         editor:\"text\", editorConfig:{ dateFormat: '%Y-%m-%d', keyFiltering:null }\n       }\n\n##### Standard Configuration\nThis editor creates a simple INPUT[text] internally within the popup Editor View container positioned\ndirectly over the TD element.  Additionally, if a \"dateFormat\" editorOption is provided the value of\nthe INPUT will be pre-processed with that format.  On save, the value of the input is parsed back to\na Date object for the DT.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.date = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'date',\n\n           // Template.Micro setup\n           templateObject: {\n               html: '<input type=\"text\" title=\"inline cell editor\" class=\"<%= this.classInput %>\"  />'\n           },\n\n           inputKeys:  true,\n           inputWidth: 75,   // width of the INPUT[text]\n\n           // only allow keyboard input of digits or '/' or '-' within the editor ...\n           keyFiltering:   /\\/|\\d|\\-/,\n\n           // Function to call prior to displaying editor, to put a human-readable Date into\n           //  the INPUT box initially ...\n           prepFn: function(v){\n               var dfmt = this.get('dateFormat') || \"%D\";\n               return Y.DataType.Date.format(v,{format:dfmt});\n           },\n\n           // Function to call after Date editing is complete, prior to saving to DataTable ...\n           //  i.e. converts back to \"Date\" format that DT expects ...\n           saveFn: function(v){\n               return Y.DataType.Date.parse(v) || undefined;\n           }\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.calendar": {
            "name": "Y.DataTable.EditorOptions.calendar",
            "shortname": "Y.DataTable.EditorOptions.calendar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1694,
            "description": "### Popup Cell Editor \"calendar\"\nThis View configuration is used to setup an editor View as a \"calendar\" popup cell editor that\nincludes a Y.Calendar widget incorporated within the View container.\n\n##### Basic Usage\n       // Column definition\n       { key:'startDate', editor:\"calendar\" }\n\n       // Column definition ...\n       { key:'birthdate', label:'Employee DOB', formatter:\"shortDate\",\n         editor:\"calendar\", editorConfig:{\n            inputKeys:false,\n         }\n       }\n\n##### Standard Configuration\nThis editor includes (a) an INPUT[text] and (b) Y.Calendar widget instance all within the same Overlay content.\n\n*Configuration for this View is considerably more complex compared to other Views, requiring additional functions\nand listener functions to setup the Y.Calendar widget and to account for widget actions and events.*\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.calendar = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'calendar',\n           inputKeys:      true,\n\n           templateObject: {\n               html: 'Enter Date: &nbsp; <input type=\"text\" title=\"inline cell editor\" class=\"<%= this.classInput %>\"  />'\n                   + '<br/><div class=\"yui3-dt-editor-calendar\"></div>'\n           },\n\n           // setup two buttons \"Save\" and \"Cancel\" for the containing overlay\n           overlayConfig:{\n               buttons:   [\n                   { name:'save', value: 'Save',\n                       action:function(){\n                           var val = (this._inputNode) ? this._inputNode.get('value') : null;\n                           this.saveEditor(val);\n                       }\n                   },\n                   { name:'cancel', value: 'Cancel',\n                       action:function(){ this.cancelEditor(); }\n                   }\n               ]\n           },\n\n           inputWidth: 75,   // set the INPUT[type=text] field width in the Overlay\n\n           // only allow keyboard input of digits or '/' or '-' within the editor ...\n           keyFiltering:   /\\/|\\d|\\-/,\n\n           // Function to call prior to displaying editor, to put a human-readable Date into\n           //  the INPUT box initially ...\n           prepFn: function(v){\n               var dfmt = this.get('dateFormat') || \"%D\" || \"%m/%d/%Y\";\n               return Y.DataType.Date.format(v,{format:dfmt});\n           },\n\n           // Function to call after Date editing is complete, prior to saving to DataTable ...\n           //  i.e. converts back to \"Date\" format that DT expects ...\n           saveFn: function(v){\n               return Y.DataType.Date.parse(v) || undefined;\n           },\n\n           //\n           // cell editor View instance event listeners ...\n           //\n           after: {\n\n               //-------\n               // After this View is created,\n               //    create the Calendar widget ...\n               //-------\n               editorCreated: function(){\n                   var calNode = this.overlay.get('contentBox').one('.yui3-dt-editor-calendar'),\n                       calWidget,\n\n                       // Define a basic config object for Y.Calendar ...\n                       calConfig = {\n                           // don't define a srcNode in here, because we are creating the node ...\n                           height: '215px',\n                           width:  '200px',\n                           showPrevMonth: true,\n                           showNextMonth: true,\n\n                           // Setup this Calendar widget instance's event listeners ...\n                           after: {\n\n                               //-------\n                               // After a \"selection\" is made in the widget,\n                               //   updates the Editor's INPUT box on a widget date selection ...\n                               //-------\n                               selectionChange : function(o){\n                                   var newDate = o.newSelection[0],\n                                       editor  = this.editor, //this.get('editor'),\n                                       prepFn  = editor.get('prepFn'),\n                                       inpn    = editor._inputNode;\n                                   inpn.set('value', (prepFn) ? prepFn.call(this,newDate) : newDate );\n                               },\n\n                               //-------\n                               // After a date is clicked in the widget,\n                               //   save the Date\n                               //-------\n                               dateClick: function(o){\n                                   var newDate = o.date,\n                                       editor  = this.editor;\n                                   editor.saveEditor(newDate);\n                               }\n                           }\n                       },\n\n                       // Pass in user options via calendarConfig\n                       userCalConfig = this.get('calendarConfig') || {};\n\n                   //\n                   //  If the srcNode exists, and Y.Calendar library is available ... create the Widget\n                   //\n                   if(calNode && Y.Calendar) {\n                       // combine the base configs with user configs\n                       calConfig = Y.merge(calConfig,userCalConfig);\n\n                       calConfig.srcNode = calNode;\n                       calWidget = new Y.Calendar(calConfig).render();\n\n                       // Attach a plugin to the Widget instance, if it is available\n                       if(Y.Plugin.Calendar && Y.Plugin.Calendar.JumpNav) {\n                           this.plug( Y.Plugin.Calendar.JumpNav, {\n                               yearStart: 1988, yearEnd:   2021\n                           });\n                       }\n\n                   }\n\n                   //\n                   //  Set a property on the Calendar widget instance to trackback to this editor view,\n                   //  AND also attach the Widget instance to this view\n                   //\n                   calWidget.editor = this;\n                   this.widget = calWidget;\n\n               },\n\n               //-------\n               // After this View is destroyed,\n               //    we need to destroy the Calendar widget instance ...\n               //-------\n               editorDestroyed: function(){\n                   if(this.widget) {\n                       this.widget.destroy({remove:true});\n                   }\n               },\n\n               //-------\n               // After this View is displayed,\n               //    setup the widget to display the current cell's Date value\n               //-------\n               editorShow: function(o){\n                   var val = o.value;\n\n                   // Display the widget, and select the date (if valid)\n                   if(this.widget) {\n                       this.widget.show();\n\n                       if(Y.Lang.isDate(val)) {\n                           this.widget.set('date',val);\n                           this.widget.selectDates(val);\n                       }\n                   }\n\n                   // Update the INPUT[text] value with date and set it's focus\n                   this._setInputValue(val);\n                   o.inputNode.focus();\n               },\n\n               //-------\n               // After this View is hidden,\n               //    hide the Calendar widget to avoid bleed-thru\n               //-------\n               editorHide: function(){\n                   if(this.widget) {\n                       this.widget.hide();\n                   }\n               },\n\n               //-------\n               // After this View is hidden,\n               //    hide the Calendar widget to avoid bleed-thru\n               //-------\n               editorSave: function(){\n                   if(this.widget) {\n                       this.widget.hide();\n                   }\n               }\n           }\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the `editorConfig`\nobject.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.autocomplete": {
            "name": "Y.DataTable.EditorOptions.autocomplete",
            "shortname": "Y.DataTable.EditorOptions.autocomplete",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 2078,
            "description": "### Popup Cell Editor \"autocomplete\"\nThis View configuration is used to setup a textbox-type popup cell editor that has an Autocomplete\nplugin attached to the INPUT[text] node.\n\n##### Basic Usage\n        // Column definition\n        { key:'state', editor:\"autocomplete\",\n          editorConfig:{\n              autocompleteConfig:{\n                  source:  myStateArray,\n                  alwaysShowList: true\n              }\n          }\n        }\n\n##### Standard Configuration\nThis editor creates a simple INPUT[text] control internally within the popup Editor View container positioned\ndirectly over the TD element and uses Y.Plugin.AutoComplete to setup the autocomplete capability.  The user\nconfigures the AC via the \"autocompleteConfig\" setting.\n\nTypical use case is to define an \"on:select\" listener within the autocompleteConfig object that sets the\neditor \"value\" based upon the data's criteria.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.autocomplete = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'autocomplete',\n           templateObject: {\n               html: '<input type=\"text\" title=\"inline cell editor\" class=\"<%= this.classInput %>\" />'\n           },\n           inputKeys:   true,\n\n           // Set listeners to this View's instance ....\n           after: {\n\n              //---------\n              //  After the cell editor View is instantiated,\n              //    get the INPUT node and plugin the AutoComplete to it\n              //---------\n              editorCreated : function(o){\n                  var inputNode = o.inputNode,\n                      acConfig = this.get('autocompleteConfig') || {},\n                      editor = this;\n\n                  // If input node exists and autocomplete-plugin is available, plug the sucker in!\n                  if(inputNode && Y.Plugin.AutoComplete) {\n                      acConfig = Y.merge(acConfig,{\n                          alwaysShowList: true,\n                          render: true\n                      });\n                      inputNode.plug(Y.Plugin.AutoComplete, acConfig);\n\n                      // add this View class as a static prop on the ac plugin\n                      inputNode.ac.editor = editor;\n                  }\n\n              }\n           }\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.radio": {
            "name": "Y.DataTable.EditorOptions.radio",
            "shortname": "Y.DataTable.EditorOptions.radio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 2183,
            "description": "### Popup Cell Editor \"radio\"\nThis View configuration is used to setup a group of INPUT[type=radio] controls within the view's Overlay\n\n##### Basic Usage\n       // Column definition via Array options\n       { key:\"size\", editor:\"radio\",\n         editorConfig:{\n           radioOptions:[ {value:0, text:\"S\"}, {value:1, text:\"M\"}, {value:2, text:\"L\"} ]\n         }\n       }\n       // Column definition via Object type options\n       { key:\"size\", editor:\"radio\",\n         editorConfig:{\n           radioOptions:{ S:\"Small\", M:\"Medium\", L:\"Large\" }\n         }\n       }\n\n##### Standard Configuration\nThis editor creates a series of INPUT[radio] controls sequentially based upon the 'radioOptions' data,\nall with the same \"name\" so that it forms a radio group.  A delegated \"click\" handler is setup at creation\ntime to process the \"checked\" RADIO and save it's value.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.radio = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'radio',\n\n           // Define the template for the radio group ...\n           templateObject: {\n\n               // Template Handlebars version ...\n            //  html: '<div class=\"myradios\">'\n            //       + '{{#options}}'\n            //       + '<input type=\"radio\" name=\"dt-editor-radio\" value=\"{{value}}\"'\n            //       + '{{#if title}} title=\"{{title}}\"{{/if}} /> {{text}}'\n            //       + '{{/options}}'\n            //       + '</div>'\n\n               // Template.Micro version\n              html: '<div class=\"myradios \">' ////<%= this.classInput %>\">'\n                   + '<% Y.Array.each( this.options, function(r) { %>  '\n                   + '<input type=\"radio\" name=\"dt-editor-radio\" '\n                   +     'value=\"<%= r.value %>\" <% (r.title) ? \\'title=\"r.title\"\\' :  %> /> <%= r.text %>'\n                   + '<% },this); %>'\n                   + '</div>'\n           },\n\n           // cell editor View instance listeners ...\n\n           on: {\n\n               //--------\n               //  When editorCreated fires (at initialization),\n               //    setup a listener to save changes based on INPUT[radio] 'click' events\n               //--------\n               editorCreated: function(){\n                   var cbox = this.overlay.get('contentBox');\n\n                   this._subscr.push(\n                       cbox.delegate('click',function(e){\n                           var tar = e.target,\n                               val = tar.get('value');\n\n                           if(this._isZeroOr(val)) {\n                               this.saveEditor(val);\n                           }\n                       },'input[type=\"radio\"]', this)\n                   );\n\n               },\n\n               //--------\n               //  When the editor is displayed,\n               //    update the \"checked\" INPUT[radio] within the group\n               //--------\n               editorShow : function(o){\n                   var chks  = this.overlay.get('contentBox').one('.myradios').all('input[type=\"radio\"]'),\n                       val   = o.value || this.get('value'),\n                       valStr = Y.Lang.isString(val),\n                       chk, rval;\n\n                   chks.each(function(n){\n                       rval = (n && n.get) ? n.get('value') : null;\n                       rval = (!valStr && /^\\d*$/.test(rval) ) ? +rval : rval;\n                       if(rval===val) {\n                           chk = n;\n                           return true;\n                       }\n                       n.set('checked',false);\n                   });\n\n                   if(chk) {\n                       chk.set('checked',true);\n                   }\n               }\n           }\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.dropdown": {
            "name": "Y.DataTable.EditorOptions.dropdown",
            "shortname": "Y.DataTable.EditorOptions.dropdown",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 2366,
            "description": "### Popup Cell Editor \"dropdown\"\nThis View configuration is used to create a popup cell editor containing a single SELECT control within\nthe Overlay.\n\n*Synonyms for this editor include \"select\" and \"combobox\".*\n\n##### Basic Usage\n       // Column definition ... simple Array data\n       { key:\"inTheForest\", editor:\"dropdown\",\n         editorConfig:{ dropdownOptions:[ \"lions\", \"tigers\", \"bears\", \"oh my!\" ] }\n       }\n\n       // Column definition ... options via Object type data\n       { key:\"color\", formatter:\"custom\", formatConfig:stypesObj,\n         editor:\"select\", editorConfig:{\n            selectOptions:{ 0:'Red', 1:'Green', 2:'Fuschia', 3:'Blue' }\n         }\n       }\n\n       // Column definition ... options via Array of Objects, non-trivial!\n       { key:\"firstTopping\", editor:\"dropdown\",\n         editorConfig:{\n           dropdownOptions:[\n              {controlUnit:'a7',  descr:'Pepperoni'},    {controlUnit:'f3', descr:'Anchovies'},\n              {controlUnit:'b114',descr:'Extra Cheese'}, {controlUnit:'7', descr:'Mushrooms'}\n            ],\n           templateObject:{ propValue:'controlUnit', propText:'descr' }\n         }\n       }\n\n##### Standard Configuration\nThis editor creates a SELECT element within the popup Editor View container positioned directly over the TD element\nand populated via a Template (default Template.Micro, optionally Handlebars or other).  The \"options\" are set via\nthe \"dropdownOptions\" (or selectOptions, comboboxOptions) setting and can be either Array based or an Object hash.\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.dropdown = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'dropdown',    // OR 'select' or 'combobox'\n\n           // Define the template for the SELECT and OPTIONS ...\n           templateObject: {\n\n               // Template Handlebars version ...\n               // NOTE: This editor currently uses Handlebars only, intend to use Template.Micro\n               //       but need to get this template micro http://yuilibrary.com/projects/yui3/ticket/2533040 fixed\n            //   html: '<select class=\"myselect\">'\n            //       + '{{#options}}'\n            //       + '<option value=\"{{value}}\"{{#if title}} title=\"{{title}}\"{{/if}}>{{text}}</option>'\n            //       + '{{/options}}'\n            //       + '</select>'\n\n               // Template Micro version ...\n               html: '<select class=\"myselect\">'\n                   + '<% Y.Array.each( data.options, function(r){ %>'\n                   + '<option value=\"<%= r.value %>\" <% (r.title) ? \\'title=\"r.title\"\\' :  %>><%= r.text %></option>'\n                   + '<% },this); %>'\n                   + '</select>'\n\n           },\n\n           // Listeners applied to this cell editor's View instance ...\n           after: {\n\n               //--------\n               //  After the editor view instance is created,\n               //    set a \"change\" listener on the SELECT element\n               //--------\n               editorCreated: function(){\n                   var cbox = this.overlay.get('contentBox');\n\n                   this._subscr.push(\n                       cbox.delegate('change',function(e){\n                           var val = e.currentTarget.get('value');\n\n                           if(this._isZeroOr(val)) {\n                               this.saveEditor(val);\n                           }\n\n                       },'select', this)\n                   );\n               },\n\n               //--------\n               //  After the editor is displayed,\n               //    update the currently selected OPTION based on the o.value\n               //--------\n               editorShow : function(o){\n                   var sel   = this.overlay.get('contentBox').one('.myselect'),\n                       sopts = sel.get('options'),\n                       val   = o.value || this.get('value'),\n                       sopt;\n\n                   sopts.some(function(n){\n                       if(n && n.get('value') == val) {  // not a === check, to account for mixed vars\n                           sopt = n;\n                           return true;\n                       }\n                   });\n\n                   if(sopt) {\n                       sopt.set('selected',true);\n                   }\n\n               }\n           }\n\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.\n\n\n#### DEBUGGING\nIf your SELECT box contains \"[object Object]\" you probably forgot to define `propValue` and `propText`.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.EditorOptions.checkbox": {
            "name": "Y.DataTable.EditorOptions.checkbox",
            "shortname": "Y.DataTable.EditorOptions.checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-celleditor-popup",
            "namespace": "",
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 2566,
            "description": "### Popup Cell Editor \"checkbox\"\nThis View configuration is used to setup a simple checkbox (i.e. on/off, yes/no, true/false) popup cell editor\nwithin the popup Overlay.\n\n##### Basic Usage\n       // Column definition\n       { key:'arrived', editor:\"checkbox\",\n         editorConfig:{ checkboxHash:{ 'true':'Y', 'false':'N' } }\n       }\n\n##### Standard Configuration\nThis editor creates a single INPUT[type=checkbox] element internally within the Overlay and directly positioned\nover the TD element.  The checkbox is either \"on\" or \"off\", and the setting is mapped to the data value via the\ncheckboxHash editorOption ....\n\nThe configuration {Object} for this cell editor View is predefined as;\n\n       Y.DataTable.EditorOptions.checkbox = {\n           BaseViewClass:  Y.DataTable.BaseCellPopupEditor,\n           name:           'checkbox',\n\n           templateObject: {\n              html: '<input type=\"checkbox\" title=\"inline cell editor\" />'\n           },\n\n           // Define listeners to this View instance ...\n           after : {\n\n               //---------\n               // After this cell editor instance is created,\n               //   setup a click listener on the INPUT[checkbox]\n               //---------\n               editorCreated: function(){\n                   var cbox = this.overlay.get('contentBox');\n\n                   this._subscr.push(\n                       cbox.delegate('click',function(e){\n                           var chk    = e.currentTarget,\n                               cvalue = chk.get('checked') || false,\n                               chkopt = this.get('checkboxHash') || { 'true':true, 'false':false },\n                               val    = chkopt[cvalue];\n\n                           if(this._isZeroOr(val)) {\n                               this.saveEditor(val);\n                           }\n\n\n                       },'input[type=\"checkbox\"]', this)\n                   );\n               },\n\n               //---------\n               // After this editor is displayed,\n               //   update the \"checked\" status based on the underlying o.value\n               //---------\n               editorShow : function(o){\n                   var chk    = this.overlay.get('contentBox').one('input[type=\"checkbox\"]'),\n                       val    = o.value || this.get('value'),\n                       chkopt = (this.get('checkboxHash')) ? this.get('checkboxHash') : { 'true':true, 'false':false },\n                       chkst  = false;\n\n                   if(chk && val !== undefined ) {\n                       chkst = (val === chkopt.true ) ? true : false;\n                       chkst = (val === chkopt.false ) ? false : chkst;\n                       chk.set('checked',chkst);\n                   }\n               }\n           }\n       };\n\n**PLEASE NOTE:** All other attributes from the `BaseViewClass` apply and can be included within the\n`editorConfig` object.",
            "since": "3.8.0",
            "access": "public",
            "tagname": ""
        },
        "Y.DataTable.CheckboxSelect": {
            "name": "Y.DataTable.CheckboxSelect",
            "shortname": "Y.DataTable.CheckboxSelect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataTable",
            "submodule": "Selection",
            "namespace": "",
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 1,
            "description": "A DataTable class extension that adds capability to provide a \"checkbox\" (INPUT[type=checkbox]) selection\ncapability via a new column, which includes \"select all\" checkbox in the TH.  The class uses only a few\ndefined attributes to add the capability.\n\nThis extension works with sorted data and with paginated DataTable (via Y.DataTable.Paginator), by retaining\na set of \"primary keys\" for the selected records.\n\nUsers define the \"primary keys\" by either setting a property flag of \"primaryKey:true\" in the DataTable\ncolumn configuration OR by setting the [primaryKeys](#attr_primaryKeys) attribute.\n\nTo enable the \"checkbox\" selection, set the attribute [checkboxSelectMode](#attr_checkboxSelectMode) to true,\nwhich will add a new column as the first column and sets listeners for checkbox selections.\n\nTo retrieve the \"checkbox\" selected records, the attribute [checkboxSelected](#attr_checkboxSelected) can be\nqueried to return an array of objects of selected records (See method [_getCheckboxSelected](#method__getCheckboxSelected))\nfor details.\n\n####Usage\n\t\tvar dtable = new Y.DataTable({\n\t\t    columns: \t['port','pname', 'ptitle'],\n\t\t    data: \t\tports,\n\t\t    scrollable: 'y',\n\t\t    height: \t'250px',\n\t\t\n\t\t// define two primary keys and enable checkbox selection mode ...\n\t\t    primaryKeys:\t\t[ 'port', 'pname' ],\n\t\t    checkboxSelectMode:\ttrue\n\t\t\n\t\t}).render(\"#dtable\");"
        },
        "Y.Plugin.DataTableContextMenu": {
            "name": "Y.Plugin.DataTableContextMenu",
            "shortname": "Y.Plugin.DataTableContextMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-contextmenu",
            "namespace": "",
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 1,
            "description": "This module defines a plugin that creates up to three gallery-contextmenu-view instances on a single DataTable, each\ndelegated to the contextmenu event on the THEAD, TBODY and TFOOT containers.\n\nA typical use case might be as follows;\n\n       // Create a DT with local data ...\n       var myDT = new Y.DataTable({\n           data: mydata,\n           columns: mycolumns\n       }).render();\n\n       // plugin this module to give a right-click menu on the TBODY and the THEAD\n       //    tdMenuChange and thMenuSelect are functions defined to respond to\n       //    context menu choices (not shown ... see examples)\n       myDT.plug(Y.Plugin.DataTableContextMenu,{\n           // This is a contextmenu on the TD nodes ...\n           tbodyMenu:{\n               menuItems: [\n                   {label:\"Edit\",  value:\"e\" },\n                   {label:\"Update\", value:\"u\"},\n                   {label:\"Delete Record\", value:\"d\"}\n               ],\n               after:{\n                 'selectedMenuChange': tdMenuChange\n               }\n           },\n\n           // and this is a contextmenu on the header TH nodes ...\n           theadMenu:{\n               menuItems:  [ \"Sort A-Z\",  \"Sort Z-A\",  \"Hide\" ],\n               after: {\n                   'selectedMenuChange': thMenuSelect\n               }\n           }\n       });"
        },
        "Y.DataTable.Editable": {
            "name": "Y.DataTable.Editable",
            "shortname": "Y.DataTable.Editable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-editable",
            "namespace": "",
            "file": "gallery-js/datatable-editable.js",
            "line": 1,
            "description": "A DataTable class extension that configures a DT for \"editing\", current deployment supports cell editing\n(and planned near-term support for row editing).\n\nThis module is essentially a base wrapper-class to setup DT for editing with the appropriate attributes and\nlistener creation / detachment.  The real guts of \"datatable-editing\" is in the View class definitions, within\nthe gallery-datatable-celleditor-inline and gallery-datatable-celleditor-inline modules (and possibly future\neditor View class modules).\n\n#### Functionality\n\nThe module is basically intended to keep track of the editing state (via [editable](#attr_editable) attribute) and\nhousekeeping functions with regard to managing editor View instance creation, rendering and destruction.\n\nBy design this module attempts to group common editor View instances wherever possible.  So for a DT with 14 columns\nall set with \"inline\" View classes only 1 View instance is created.\n<br/>Likewise if a DT uses 4 different \"calendar\" editor View types but each one as slightly different \"editorConfig\",\nthen this module creates 4 different calendar View instances to handle the different configurations.\n\nListeners are set for the \"cellEditorSave\" event and saved to the active \"data\" setting within this module.\n\nAdditional capability is provided for cell editing situations to add CSS classes to TD's which are added to \"editable\"\ncolumns (e.g. cursor) to indicate they are \"clickable\".\n\nThis module works sortable, scrollable (y-scrolling currently) to make changes to the client-side of the DT model\n(remote updates should be provided via ModelList sync or user-defined listeners.)\n\n\n#### Attributes\n\nPresently three attributes are provided;\n[editable](#attr_editable), [editOpenType](#attr_editOpenType) and [defaultEditor](#attr_defaultEditor).\n\nThe primary ATTR is the [editable](#attr_editable), which is used to toggle on/off the editing state of the DT\ninstance.\n\nThe [defaultEditor](#attr_defaultEditor) attribute is used to setup a cell editor View instance to be used on all editable columns\nthat don't already have an editor assigned.\n\n##### Column Properties\n\nIn addition to a few new attributes the module also recognizes some new column properties in order to support\ncell-editing in particular;\n<table>\n<tr><th>editable</th><td>{Boolean}</td><td>Flag to indicate if column is editable (set `editable:false` to exclude an\nindividual column)</td></tr>\n<tr><th>editor</th><td>{String}</td><td>Name of the defined Y.DataTable.EditorOptions View configuration for this column.</td></tr>\n<tr><th>editorConfig</th><td>{Object}</td><td>Passed to the View editor class when instantiated, and Y.merge'ed in to become View class\nattributes.</td></tr>\n</table>\n\nWhen this module is loaded and the \"editable:true\" attribute is set, it attempts to economize on the \"instantiation cost\"\nof creating View instances by identifying only editor Views that are required based upon column definitions and/or the\ndefaultEditor attribute. (e.g. if all columns are \"text\" editors, only one \"text\" editor View is instantiated)\n\n##### ... More Info\n\nThe module fires the event [cellEditorSave](#event_cellEditorSave), which can be listened for to provide updating\nof remote data back to a server (assuming a ModelList \"sync\" layer is NOT used).  Haven't provided the equivalent to\nYUI 2.x's \"asyncSubmitter\" because I think this event could easily be listened to in order to provide follow-on\nupdating to remote data stores.\n\nA new class Object (Y.DataTable.EditorOptions) is added to the DataTable namespace that serves as the\ndatastore of the editor View configuration properties.  Each \"key\" (object property) within this object\nis an entrypoint to a specific editor configuration, which are defined in the separate View class extensions (presently\ngallery-datatable-celleditor-inline and gallery-datatable-celleditor-popup. Please see those for specifics.)\n\n###### KNOWN ISSUES:\n  <ul>\n  <li>Works minimally with \"y\" scrolling, \"x\" scrolling still needs work.</li>\n  <li>Initial editor invocation is limited to \"mouse\" actions on TD only (although keyboard navigation cell-to-cell is available).</li>\n  </ul>\n\n###### FUTURE:\nThis module will be amended to add support for \"row\" editing, if required."
        },
        "Y.DataTable.EditorOptions": {
            "name": "Y.DataTable.EditorOptions",
            "shortname": "Y.DataTable.EditorOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-editable",
            "namespace": "",
            "file": "gallery-js/datatable-editable.js",
            "line": 1247,
            "description": "This object is attached to the DataTable namespace to allow addition of \"editors\" in conjunction\nwith the Y.DataTable.Editable module.\n\n(See modules gallery-datatable-celleditor-popup and gallery-datatable-celleditor-inline for\n examples of the content of this object)",
            "extends": "Y.DataTable",
            "type": "{Object}",
            "since": "3.8.0"
        },
        "Y.DataTable.Formatters": {
            "name": "Y.DataTable.Formatters",
            "shortname": "Y.DataTable.Formatters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-formatters",
            "namespace": "",
            "file": "gallery-js/datatable-formatters.js",
            "line": 1,
            "description": "Define a \"named\" Column Formatters object and attach it to the Y.DataTable namespace.\nThe named formatters are defined as a series of format strings that are typically used by the\ndata formatting function Y.DataType.Number.format and Y.DataType.Date.format.\n\nThe function [`namedFormatter`](#method_namedFormatter) is defined that can be used to call as a column formatter which\nformats the column cell using the [`formatStrings`](#property_formatStrings) object.\n\nThis module includes an override of the [Y.DataTable.BodyView._createRowHTML](#method_Y.DataTable.BodyView._createRowHTML) method.\nTherefore implementers shouldn't call the `namedFormatter` method directly because the overridden method handles the call if the\nentered formatter string name is recognized.\n\n###Usage\nThe format string names can be used in a column configuration object as follows;\n\n\t\tvar dt1 = new Y.DataTable({\n           data: some_data,\n           columns: [\n               { key:\"start_date\", label:\"Start\", formatter:\"fullDate\" },\n               { key:\"end_date\", label:\"End\", formatter:\"default\", \n                 formatOptions:{ type:'date', formatConfig:{ format:'%F' } } },\n               { key:\"qty\", label:\"Inventory Qty\", formatter:\"comma\" },\n               { key:\"cost\", label:\"Carried Cost\", formatter:\"currency\",\n                 formatConfig:{ prefix:'£', thousandsSeparator:\",\"} }\n   \t    ]\n\t\t}).render();\n\n####Pre-Defined `formatStrings` settings; (specifically, Y.DataTable.Formatters.formatStrings)\nFor \"number\" formatting, using [Y.DataType.Number](http://yuilibrary.com/yui/docs/api/classes/DataType.Number.html#method_format).\n\n<table><tr><th>string</th><th>Formatter Object</th><th>Formatted Example</th></tr>\n<tr><td>`general`</td><td>{ decimalPlaces:0 }</td><td>123457</td></tr>\n<tr><td>`general2`</td><td>{ decimalPlaces:2 }</td><td>123456.79</td></tr>\n<tr><td>`currency`</td><td>{ prefix:'$', decimalPlaces:0, thousandsSeparator:',' }</td><td>$ 123,457</td></tr>\n<tr><td>`currency2`</td><td>{ prefix:'$', decimalPlaces:2, thousandsSeparator:',' }</td><td>$ 123,456.78</td></tr>\n<tr><td>`currency3`</td><td>{ prefix:'$', decimalPlaces:3, thousandsSeparator:',' }</td><td>$ 123,457.789</td></tr>\n<tr><td>`comma`</td><td>{ decimalPlaces:0, thousandsSeparator:','}</td><td>123,457</td></tr>\n<tr><td>`comma2`</td><td>{ decimalPlaces:2, thousandsSeparator:','}</td><td>123,456.78</td></tr>\n<tr><td>`comma3`</td><td>{ decimalPlaces:3, thousandsSeparator:','}</td><td>123,457.789</td></tr>\n</table>\n\nFor \"date\" formatting, using [Y.DataType.Date](http://yuilibrary.com/yui/docs/api/classes/DataType.Date.html#method_format).\n<br/>(Please refer to the Date.format method above for the proper use of \"strftime\" format strings)\n<table><tr><th>string</th><th>Formatter Object</th><th>Formatted Example</th></tr>\n<tr><td>`shortDate`</td><td>{ format:'%D' }</td><td>03/12/92</td></tr>\n<tr><td>`longDate`</td><td>{ format:'%m/%d/%Y' }</td><td>03/12/1992</td></tr>\n<tr><td>`fullDate`</td><td>{ format:'%B %e, %Y' }</td><td>March 12, 1992</td></tr>\n<tr><td>`isoDate`</td><td>{ format:'%F'}</td><td>1992-03-12</td></tr>\n<tr><td>`isoDateTime`</td><td>{ format:'%FT%T'}</td><td>1992-03-12T22:11:07</td></tr>\n</table>\n\n####Replaceable Hash\nThis utility can also replace the cell value with values from a data hash (i.e. JS simple object, consisting of key:value pairs).\nAccess to this capability is by providing a `formatter` as any string not-recognizable in the `formatStrings` object\n**AND** by providing a `formatConfig` object (equal to the hash) in the column definition.\n\n####User-Defined `formatStrings`\nImplementers may add their own \"named\" formatting strings for their own use-cases simply by adding more named formatters to\nthe `formatStrings` object as;\n\n\tY.DataTable.Formatters.formatStrings['myNumberFmtr'] = {\n\t\ttype:'number',\n\t\tformatConfig:{ thousandsSeparator:'x', decimalPlaces:11 }\n\t};\n\tY.DataTable.Formatters.formatStrings['myDateFmtr'] = {\n\t\ttype:'date',\n\t\tformatConfig:{ format:{ \"At the tone the TIME will be %T\" }\n\t};"
        },
        "Y.DataTable.Paginator": {
            "name": "Y.DataTable.Paginator",
            "shortname": "Y.DataTable.Paginator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-paginator",
            "namespace": "",
            "file": "gallery-js/datatable-paginator.js",
            "line": 1,
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\npaging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\nin conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\"\nattribute is passed to the remote server.\n\n<h4>Usage</h4>\n\n    var dtable = new Y.DataTable({\n        columns:    [ 'firstName','lastName','state','age', 'grade' ],\n        data:       enrollment.records,\n        scrollable: 'y',\n        height:     '450px',\n        sortBy:     [{lastName:'asc'}, {grade:-1}],\n        paginator:  new PaginatorView({\n           model:      new PaginatorModel({itemsPerPage:50, page:3}),\n           container:  '#pagContA'\n        }),\n        resizePaginator: true\n    });\n\n<h4>Client OR Server Pagination</h4>\n\nPagination can either be done solely on the \"client\", or from a remote \"server\".  The attribute [paginationSource](#attr_paginationSource)\nis set to either of these strings.  The trivial case is where the data is coming locally (i.e. in a JS array) and the user requests\n\"client\" pagination.  Likewise when pagination occurs solely on a remote device, \"server\" is very straightforward.  This module also\nprovides a middle-path where the initial payload is obtained from a remote source, and then after loading, pagination is to be done\non the \"client\" (see below).\n\nA determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\nprovided from a server (either DataSource or ModelSync.REST) is performed within the method [_afterDataReset](#method__afterDataReset).\n\nFor server-side pagination, the OUTGOING request must include (as a minimum);  `page` and `itemsPerPage` querystring\nparameters (all others, including `sortBy` are optional).  Likewise, the INCOMING (returned response) must include as \"meta-data\" at\nleast `totalItems`, plus any other PaginatorModel attributes.   The key item within the returned response is `totalItems'. If the returned\nresponse does not contain `totalItems` metadata <b>the PaginatorView will not be shown!</b>.\n\nWe have provided an attribute [serverPaginationMap](#attr_serverPaginationMap) as an object hash to translate both outgoing\nquerystring parameter names and incoming (response returned) parameter names in order to match what is expected by the\nPaginatorModel.  Please see this attribute or the examples for how to utilize this map for your use case.\n\n<h4>Loading the \"data\" For a Page</h4>\nOnce the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\nFor the case of \"client\" pagination, an internal buffer [_mlistArray](#property__mlistArray) is set to hold all of the data.\nEach page request in this circumstance involves using simply Array slicing methods from the buffer.\n(See method [paginatorLocalRequest](#method_paginatorLocalRequest) for details)\n\nThe case of \"remote data\" (from a server) is actually more straightforward.  For the case of ModelSync.REST remote data the\ncurrent \"pagination state\" is processed through the [serverPaginationMap](#attr_serverPaginationMap) hash (to convert to\nqueryString format) and the ModelList.load() method is called.  For the case of a DataSource, a similar approach is used where\nthe [requestStringTemplate](#attr_requestStringTemplate) is read, processed through the serverPaginationMap hash and a\ndatasource.load() request is fired.\n(See methods [paginatorMLRequest](#method_paginatorMLRequest) and [paginatorDSRequest](#method_paginatorDSRequest)for details)\n\nThis extension DOES NOT \"cache\" pages for remote data, it simply inserts the full returned data into the DT.  So as a consequence,\na pagination state change for remote data involves a simple request sent to the server source (either DataSource or ModelSync.REST)\nand the response results are loaded in the DT as in any other \"response\".\n\n<h4>Loading the \"initial data\" remotely - then using \"client\" Pagination</h4>\n\nA recent revision to this module now allows for the initial payload of data that constitutes the entire \"dataset\" to be loaded\nfrom a remote source (by the standard DataSource or ModelSync.REST methods).\n\nBy setting the [paginationSource](#attr_paginationSource) attribute to \"client\", this module proceeds with paginating the DataTable\nas if the data was initially set within the \"data\" property.\n\n<h4>Sorting</h4>\n\nThis module supports sorting for both client and server side Pagination.  Note that sorting for \"server-side\" is required to be\naccomplished by the remote server; the \"sortBy\" settings are passed in a remote page request.\n\nFor client-side Pagination the task is a more complex.  We utilize an internal buffer to store the client-side data, so therefore\nthe requested \"sorting\" is accomplished internally within method [paginatorSortLocalData](#method_paginatorSortLocalData).\nBasic \"client-side\" sorting is supported in this method (limited to one sort key at a time).\nImplementers may override this method for more complex sorting needs."
        },
        "Y.DataTable.Selection": {
            "name": "Y.DataTable.Selection",
            "shortname": "Y.DataTable.Selection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-datatable-selection",
            "namespace": "",
            "file": "gallery-js/datatable-selection.js",
            "line": 1,
            "description": "A class extension for DataTable that adds \"highlight\" and \"select\" actions via mouse selection.\nThe extension works in either \"cell\" mode or \"row\" mode (set via attribute [selectionMode](#attr_selectionMode)).\n\nHighlighting is controlled by the [highlightMode](#attr_highlightMode) attribute (either \"cell\" or \"row\").\n(Highlighting provides a \"mouseover\" indication only), and a delegated \"mouseover\" event is defined in this module.\n\nSelection is provided via \"click\" listeners, by setting a delegated \"click\" handler on the TD or TR elements.\n\nThis extension includes the ability to select \"multiple\" items, by setting the [selectionMulti](#attr_selectionMulti)\nattribute (enabled using browser multi-select click modifier, i.e. \"Cmd\" key on Mac OSX or \"Ctrl\" key on Windows / Linux).\n\nAdditionally, a \"range\" selection capability is provided by using the browser range selector click key modifier,\nspecifically the Shift key on most systems.\n\nThe extension has been written to allow preserving the \"selected\" rows or cells during \"sort\" operations.  This is\naccomplished by storing the selected TR's basis record, specifically the \"clientId\" attribute which remains unique\nafter sorting operations.\n\nSpecific attributes are provided that can be read for current selections, including the ATTRS [selectedRows](#attr_selectedRows),\nand [selectedCells](#attr_selectedCells).\n\nTypical usage would be to set the \"selectionMode\" and \"highlightMode\" attributes (and selectionMulti if desired) and then\nto provide a positive control (like a BUTTON or A link) to process the selections.  Two events are provided,  [selection](#event_selection)\nand [selected](#event_selected) but these fire for every \"click\" action, which may not be ideal -- especially for multi selections."
        },
        "Y.FooterView": {
            "name": "Y.FooterView",
            "shortname": "Y.FooterView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "FooterView",
            "namespace": "",
            "file": "gallery-js/dt_footerview.js",
            "line": 1,
            "description": "FooterView is a YUI View class extension that provides a simple, one row summary row\nto a Datatable. This view provides\nfor a summary row appended to the bottom of the DataTable TBODY, typically consisting\nof **one** TH element (with a colspan) and several TD elements for each desired column\nwhere a \"calculated field\" is desired.\n\nView configuration provides for calculated fields based upon the all of the available\ndataset fields within the DataTable's \"ModelList\".\n\nThe view works with either non-scrolling or scrolling DataTables, and allows for either a\n\"fixed\" view, wherein the footer remains fixed at the bottom of the DataTable contentBox\nwhile the table is scrolled.\n\n#### Calculated Fields\n\nThe current implementation supports the following calculated fields, where they are\nidentified by their placeholder tag for replacement via Y.sub (case insensitive);\n\n* `{sum}` Calculate the arithmetic sum of the specified column in dataset\n* `{min}` Calculate the minimum value of the specified column in dataset\n* `{max}` Calculate the maximum value of the specified column in dataset\n* `{avg}` Calculate the arithmetic average of the of the specified column (synonyms `{mean}`, `{average}`)\n\nAlso, non-looping calcs are;\n\n*  `{row_count}` Returns the number of rows in the dataset\n*  `{col_count}` Returns the number of columns in the dataset (no visibility check)\n*  `{date}` Returns the current date\n*  `{time}` Returns the current time\n\n#### Configuration\n\nYUI 3.6.0 DataTable supports attributes including `footerView` and `footerConfig`.\n\nThis FooterView recognizes the following attributes, which must be configured via the\nDataTable {configs} (see usage example below);\n\n* [`fixed`](#attr_fixed) : Flag indicating if footer should be fixed or floating\n* [`heading`](#attr_heading) : Object, defining the single TH as;\n   * [`colspan`](#attr_heading.colspan) : Number of columns to merge from left for the TH\n   * [`content`](#attr_heading.content) : A string indicating the content of the TH for the footer\n   * [`className`](#attr_heading.className) : Additional classname for TH\n* [`columns`](#attr_columns) : Array of objects, one per desired TD column in footer as;\n   * [`key`](#attr_columns.key) : `key` name from the DataTable columns\n   * [`content`](#attr_columns.content) : String indicating the contents of this TD\n   * [`className`](#attr_columns.className) : Additional classname for TD\n   * [`formatter`](#attr_columns.formatter) : Formatter to apply to this column result\n* [`dateFormat`](#attr_dateFormat) : Format string to use for any {date} fields\n* [`timeFormat`](#attr_timeFormat) : Format string to use for any {time} fields\n\nAdditionally the user can provide a valid function as a column `content` to calculate a\ncustom entry for \n<br/>a column (see [`columns.content`](#attr_columns.content) or [`calcDatasetValue`](#method_calcDatasetValue))\n\n#### Usage\n\n    var dtable = new Y.DataTable({\n        columns:    ['EmpId','FirstName','LastName','NumClients','SalesTTM'],\n        data:       AccountMgr.Sales,\n        scrollable: 'y',\n        height:     '250px',\n        width:      '400px',\n\n        footerView:   Y.FooterView,\n        footerConfig: {\n            fixed:   true,\n            heading: {\n                colspan:\t3,\n                content:\t\"Sales Totals for {row_count} Account Mgrs : &nbsp;\",\n                className:\t\"align-right\"\n            },\n            columns: [\n                { key:'NumClients', content:\"{Avg} avg\", className:\"clientAvg\" },\n                { key:'SalesTTM',   content:\"{sum}\", className:\"salesTotal\", formatter:fmtCurrency }\n            ]\n        }\n    });\n\n    dtable.render('#salesDT');"
        },
        "Y.PaginatorModel": {
            "name": "Y.PaginatorModel",
            "shortname": "Y.PaginatorModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-paginator-view",
            "namespace": "",
            "file": "gallery-js/paginator-view.js",
            "line": 1,
            "description": "A Model class extension to be used to track \"pagination state\" of a paged set of control elements.\nFor example, can be used to track the pagination status of a DataTable where the user selects limited\nportions for display, against a larger data set.\n\nThe primary tools for maintaining \"page state\" is through the following attributes;\n\n* `totalItems` &nbsp;&nbsp;  Which represents the \"Total count of items of interest\" (See attribute [totalItems](#attr_totalItems) )\n* `itemsPerPage` &nbsp;&nbsp; Which represents the \"Count of items on each page\" (See attribute [itemsPerPage](#attr_itemsPerPage) )\n*  `page` &nbsp;&nbsp;  The currently selected page, within all pages required that encompass the above two attributes\n    (See attribute [page](#attr_page) )\n\n<h4>Usage</h4>\n\n    // setup a paginator model for 500 'foo' items, paged at 50 per page ...\n    var pagModel = new Y.PaginatorModel({\n       totalItems:     500,\n       itemsPerPage:   50\n    });\n    pagModel.get('totalPages');  // returns 10\n\n    pagModel.set('page',3);\n    pagModel.getAttrs(['lastPage','page','itemIndexStart','itemIndexEnd']);\n    // returns ... { lastPage:1, page:3, itemIndexStart:100, itemIndexEnd:149 }"
        },
        "Y.PaginatorView": {
            "name": "Y.PaginatorView",
            "shortname": "Y.PaginatorView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-paginator-view",
            "namespace": "",
            "file": "gallery-js/paginator-view.js",
            "line": 328,
            "description": "A View class extension to serve as a User Interface for the tracking of \"pagination state\" of\na set of data.  This PaginatorView was specifically designed to work with PaginatorModel\nserving as the \"model\" (in MVC parlance), although would work with any user-supplied model under conditions\nwhere similar attributes and attribute changes are mapped.\n\nThe PaginatorView was originally designed to function with DataTable (See Y.DataTable.Paginator) for managing the UI\nand page state of paginated tables, although it isn't necessarily limited to that application.  This View responds to\nthe model's attribute `xxxxChange` events and updates the UI accordingly.\n\nThe PaginatorView utilizes an HTML template concept, where certain replaceable tokens uniquely related to this view,\nin addition to all of the model's attributes, can be defined for positioning within the Paginator container.\n\n<h4>Usage</h4>\n\n    // Setup a paginator view based on a data model for 500 items, paged at 50 per page ...\n    var pagView = new Y.PaginatorView(\n       container:  '#myPagDIV',\n       paginatorTemplate:  '#script-tmpl-mypag',\n       model:  new Y.PaginatorModel({\n           totalItems:     500,\n           itemsPerPage:   50\n           })\n    }).render();\n\n<h4>View 'container'</h4>\nThe [container](#attr_container) attribute is the only **REQUIRED** attribute for this View, primarily because we\nneed to know *where* to construct it positionally on the page.\n\nThis view has been designed such that the `container` setting can be either (a) an actual Y.Node instance OR\n(b) a DOM css selector ID ... assumed if the container setting is a {String} with the first character is '#'.\n\n<h4>Paginator HTML Template</h4>\nThe \"HTML template\" for this PaginatorView is the guts of displaying the user interface.  We refer to this as\nthe \"template\" because it typically contains standard HTML but also includes \"replacement tokens\" identified\nby ```{your token here}``` curly braces.\n\nA definition of HTML Template for the paginator can be achieved through several methods;\n<ul>\n<li>Including the HTML template as content within the original `container` DOM element ... template retrived via .getHTML()</li>\n<li>Setting the <a href=\"#attr_paginatorTemplate\">paginatorTemplate</a> attribute to either the template 'string', or\ngiving a SCRIPT template DOM[id] or Y.Node</li>\n<li>Doing neither of the above ... where the default template is used (from <a href=\"#property_TMPL_PAGINATOR\">TMPL_PAGINATOR</a>\nstatic property)</li>\n</ul>\n(Note: If for some reason it is desired to not have a \"template\" (because you are rendering one outside of this view), setting\n```paginatorTemplate:''``` will override the default.)\n\nA noteworthy component of the \"HTML template\" includes the token **```{pageLinks}```**, which signifies where links generated by this\nview for each page selector are to be placed.  In some instances (e.g. a Paginator Bar, with an INPUT[text] for page #) you may not\ndesire to have every link generated ... (think of a paginator with hundreds of pages, thus hundreds of links).\n\nA sub-template is used to generate the \"{pageLinks}\" content, please see attribute [pageLinkTemplate](#attr_pageLinkTemplate) for\ninformation.\n\nFor a listing of all recognized *\"replaceable tokens\"* that can be included in the template is shown on\nthe [render](#method_render) method API page.\n\n<h6>Data Attribute</h6>\nA key takeaway for using this View is that page links (i.e. actionable selectable elements, such as A,\nBUTTON, DIV, etc...) for a specific page use an HTML \"data\" attribute which defines the page associated with the link.\n\nThe data attribute used within the view is `data-pglink`, and can have a value setting of \"first\", \"last\", \"prev\",\n\"next\" or any numeric page number.\n\nFor example, the following are all valid page link identifiers;\n\n    <a href=\"#\" data-pglink=\"last\" title=\"Last Page\">Last</a>\n    <button data-pglink=\"6\" class=\"myBtn\">Page 6</button>\n    <select><option data-pglink=\"19\" value=\"19\">Page 19 : Rows 9501 - 10000</option></select>\n\n\n<h4>Connecting to \"other\" UI Elements / Widgets</h4>\nThis View can be restricted to situations where the use desires to construct their own unique `pageLinkTemplate` and\ncreate their own `events` attribute to set listeners.\n\nFor example, the PaginatorView's [render](#event_render) event can be listened for to ensure that the paginator has\nbeen initialized and setup.\n\nAdditionally the [pageChange](#event_pageChange) event (of the view) can be listened for to do any updating to user-specified\npage links and or a supporting YUI Widget.\n\nPlease see the examples for a guide on how to achieve this."
        },
        "PickList": {
            "name": "PickList",
            "shortname": "PickList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-picklist",
            "namespace": "",
            "file": "gallery-js/picklist.js",
            "line": 11,
            "extends": "Widget"
        }
    },
    "classitems": [
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 32,
            "description": "This plugin can be accessed from a Calendar instance as \"Calendar.jumpnav\"",
            "itemtype": "property",
            "name": "NS",
            "type": "{String}",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 40,
            "description": "name for this plugin",
            "itemtype": "property",
            "name": "NAME",
            "type": "{String}",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 50,
            "itemtype": "attribute",
            "name": "yearStart",
            "type": "Number",
            "default": "1985",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 60,
            "itemtype": "attribute",
            "name": "yearEnd",
            "type": "Number",
            "default": "Current year",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 70,
            "description": "The x,y offset (horiz, vert) that should be used to offset the popup Panel from the original Calendar \"header label\"\n that was clicked.",
            "itemtype": "attribute",
            "name": "offsetXY",
            "type": "Array",
            "default": "[ 30, 10 ]",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 82,
            "description": "Sets the Event \"type\" that is used in the Calendar \"header label\" listener to open the popup Panel.\nSensible values are \"click\" or \"dblclick\".",
            "itemtype": "attribute",
            "name": "openEventType",
            "type": "String",
            "default": "'click'",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 95,
            "description": "This flag sets whether the Panel instance should be hidden after the \"Go\" button is pressed",
            "itemtype": "attribute",
            "name": "closeAfterGo",
            "type": "Boolean",
            "default": "true",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 113,
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 123,
            "description": "Destroys the View that was created and detaches its event listeners",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 135,
            "description": "Connector method that initializes the View and connects it to the Calendar instance",
            "itemtype": "method",
            "name": "_afterHostRenderEvent",
            "access": "private",
            "tagname": "",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 185,
            "description": "Defines event objects as part of View's event handling, specifically defines actions to\nbe taken on \"change\" events of the month and year SELECT controls.",
            "itemtype": "property",
            "name": "events",
            "type": "Object",
            "static": 1,
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 197,
            "description": "Default setting for the `template` attribute that defines the Panel HTML contents, including\nthe SELECT options for month and year.",
            "example": [
                "\n\t// Where classPanel is replaced by 'yui3-calendar-jumpnav-panel',\n\t// and classMonth by 'yui3-calendar-jumpnav-month'\n\t// and classYear by 'yui3-calendar-jumpnav-year'\n\t<div class=\"{classPanel}\">\n\t\t<div class=\"yui3-widget-bd\">\n\t\t<table>\n\t\t\t<tr><td align=\"right\">Jump to Month:</td><td><select class=\"{classMonth}\"></select></td></tr>\n\t\t\t<tr><td align=\"right\">and Year:</td><td><select class=\"{classYear}\"></select></td></tr>\n\t\t</table>\n\t\t</div>\n\t</div>"
            ],
            "itemtype": "property",
            "name": "template",
            "type": "String HTML Setting for Panel's contents",
            "default": "See example below",
            "static": 1,
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 227,
            "description": "Placeholder for the Y.Panel instance used in this view",
            "itemtype": "property",
            "name": "_panel",
            "type": "Y.Panel",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 236,
            "description": "Holder for an array of the Listeners created by this view so we can detach them when finished",
            "itemtype": "property",
            "name": "_subscr",
            "type": "Array",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 245,
            "description": "Stores the classname to search the Calendar instance for to hook onto the \"header-label\" element",
            "itemtype": "property",
            "name": "_classCalHead",
            "type": "String",
            "default": "'yui3-calendar-header-label'",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 254,
            "description": "Stores the classname used internally for the Panel srcNode used in this view",
            "itemtype": "property",
            "name": "_classPanel",
            "type": "String",
            "default": "'yui3-calendar-jumpnav-panel'",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 264,
            "description": "Placeholder for the Node instance for this view, set to Panel contentBox",
            "itemtype": "property",
            "name": "_viewNode",
            "type": "Node",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 273,
            "description": "Stores the classname used internally for the Panel's \"month\" SELECT control",
            "itemtype": "property",
            "name": "_classMonth",
            "type": "String",
            "default": "'yui3-calendar-jumpnav-month'",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 282,
            "description": "Stores the classname used internally for the Panel's \"month\" SELECT control",
            "itemtype": "property",
            "name": "_classYear",
            "type": "String",
            "default": "'yui3-calendar-jumpnav-year'",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 294,
            "description": "Initializer that creates the `container`, the Panel instance and listeners for this view",
            "itemtype": "method",
            "name": "initializer",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 338,
            "description": "Renders the Panel and resets the SELECT controls \"selected\" default to the current Calendar data setting",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "return": {
                "description": "this"
            },
            "access": "protected",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 379,
            "description": "Clears up the created listeners and destroys the Panel",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 401,
            "itemtype": "method",
            "name": "_createPanelView",
            "params": [
                {
                    "name": "vnode",
                    "description": "The Node that was created from `template` that will be used as the container for the Y.Panel creation.",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 446,
            "description": "Sets the currently \"selected\" OPTION for the month control to the current month",
            "itemtype": "method",
            "name": "_setSelectedMonth",
            "params": [
                {
                    "name": "curDate",
                    "description": "",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 457,
            "description": "Sets the currently \"selected\" OPTION for the year control to the current year.\n<br/>This method searches the OPTION nodes for \"value\" set to the year, to get around\nCSS selector issues in some browers.",
            "itemtype": "method",
            "name": "_setSelectedYear",
            "params": [
                {
                    "name": "curDate",
                    "description": "",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 475,
            "description": "Method that regenerates the \"month\" SELECT control, adding the months and defining the \"selected\" as the curDate parameter",
            "itemtype": "method",
            "name": "_regenMonths",
            "params": [
                {
                    "name": "curDate",
                    "description": "Current date to set as \"selected\"",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 502,
            "description": "Method that regenerates the \"year\" SELECT control, adding the months defined by attributes `yearStart` to `yearEnd`\nand defining the \"selected\" as the curDate parameter",
            "itemtype": "method",
            "name": "_regenYears",
            "params": [
                {
                    "name": "curDate",
                    "description": "Current date to set as \"selected\"",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 530,
            "description": "Helper method to check if the specified year is an option in the current SELECT control OPTIONS.",
            "itemtype": "method",
            "name": "_yearInSelect",
            "params": [
                {
                    "name": "year",
                    "description": "Year to be checked if it is in the current SELECT control",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if year is in SELECt, false if not",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 553,
            "description": "Listener on the Calendar's \"dateChange\" event to update the JumpNavigator if it's visible",
            "itemtype": "method",
            "name": "_onCalendarDateChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 569,
            "description": "Listener on the Panel's \"Go\" button, resets the Calendar to the Month/Year and first day,\nand optionally closes the Panel if `closeAfterGo` is true.",
            "itemtype": "method",
            "name": "_onGoButton",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 587,
            "description": "\"change\" Listener on the SELECT control for the JumpNavigator's month control",
            "itemtype": "method",
            "name": "_selectMonth",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 604,
            "itemtype": "event",
            "name": "monthSelected",
            "params": [
                {
                    "name": "return",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "evt",
                            "description": "Eventtarget for the SELECT \"change\" event",
                            "type": "EventTarget"
                        },
                        {
                            "name": "value",
                            "description": "Value part of the selected OPTION, which is the selected month",
                            "type": "Number"
                        },
                        {
                            "name": "text",
                            "description": "Text from selected OPTION, which is the month name",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 612,
            "description": "\"change\" Listener on the SELECT control for the JumpNavigator's year control",
            "itemtype": "method",
            "name": "_selectYear",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 629,
            "itemtype": "event",
            "name": "yearSelected",
            "params": [
                {
                    "name": "return",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "evt",
                            "description": "Eventtarget for the SELECT \"change\" event",
                            "type": "EventTarget"
                        },
                        {
                            "name": "value",
                            "description": "Value part of the selected OPTION, which is the Selected year",
                            "type": "Number"
                        },
                        {
                            "name": "text",
                            "description": "Text from selected OPTION, which is the selected year",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 640,
            "description": "Specifies the Calendar instance that this view will be attached to for header label clicks and\nfor updates to the `date` attribute.",
            "itemtype": "attribute",
            "name": "calendar",
            "type": "Y.Calendar",
            "default": "null",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 653,
            "description": "Defines the HTML content that is used to setup the Y.Panel instance that is created by this View.\nSee the property [template](#property_template) for the default setting.",
            "itemtype": "attribute",
            "name": "template",
            "type": "String",
            "default": "this.template",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 666,
            "description": "Sets the beginning year that will be used to setup the \"year\" SELECT dropdown control, defaults to\na favorite year of the author's.",
            "itemtype": "attribute",
            "name": "yearStart",
            "type": "Number",
            "default": "1985",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 678,
            "description": "Sets the last year that should be setup within the \"year\" SELECT dropdown control, defaults the\nthe current year.",
            "itemtype": "attribute",
            "name": "yearEnd",
            "type": "Number",
            "default": "Current year",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 690,
            "description": "The x,y offset (horiz, vert) that should be used to offset the popup Panel from the original Calendar \"header label\"\n that was clicked.",
            "itemtype": "attribute",
            "name": "offsetXY",
            "type": "Array",
            "default": "[ 30, 10 ]",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 703,
            "description": "Sets the Event \"type\" that is used in the Calendar \"header label\" listener to open the popup Panel.\n         Sensible values are \"click\" or \"dblclick\".",
            "itemtype": "attribute",
            "name": "openEventType",
            "type": "String",
            "default": "'click'",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 715,
            "description": "This flag sets whether the Panel instance should be hidden after the \"Go\" button is pressed",
            "itemtype": "attribute",
            "name": "closeAfterGo",
            "type": "Boolean",
            "default": "true",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 40,
            "description": "Y.View's events static property, where we define a \"click\" listener on Nodes in the\ncontainer that are the MenuItem nodes.                    *",
            "itemtype": "property",
            "name": "events",
            "type": "{Object}",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 53,
            "description": "Default HTML template for the container's content (the outer DIV) for the Y.Overlay",
            "itemtype": "property",
            "name": "template",
            "type": "{String}",
            "default": "'<div class=\"yui3-contextmenu-overlay\"></div>'",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 62,
            "description": "Defines the Overlay's `bodyContent` template, i.e. the popup menu HTML, as a series of DIV's\nwrapped in an outer DIV",
            "itemtype": "property",
            "name": "templateMicro",
            "type": "{String}",
            "default": "See Code",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 78,
            "description": "A placeholder to hold subscriber EventHandles so they can be destroyed properly",
            "itemtype": "property",
            "name": "_subscr",
            "type": "{Array}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 89,
            "description": "Sets an increment that the Overlay box will be positioned relative to the e.target \"x-coordinate\"",
            "itemtype": "property",
            "name": "_overlayDX",
            "type": "{Integer}",
            "default": "5",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 98,
            "description": "Sets an increment that the Overlay box will be positioned relative to the e.target \"y-coordinate\"",
            "itemtype": "property",
            "name": "_overlayDY",
            "type": "{Integer}",
            "default": "11",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 107,
            "description": "Initializer where we define initial handlers to invoke this view and to hide the Overlay",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 125,
            "description": "Clean up listeners and destroys the Overlay",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 149,
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 160,
            "description": "Displays the View container (i.e. overlay) with the event target from the on \"contextmenu\"\n event",
            "itemtype": "method",
            "name": "showOverlay",
            "params": [
                {
                    "name": "e",
                    "description": "Passed in event facade for the \"contextmenu\" event",
                    "type": "EventFacade"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 178,
            "description": "Method that hides the Overlay for this contextmenu and fires the `contextMenuHide` event",
            "itemtype": "method",
            "name": "hideOverlay",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 191,
            "description": "Default value setter for attribute `overlay`, creates a Y.Overlay widget to display the menu within",
            "itemtype": "method",
            "name": "_valOverlay",
            "return": {
                "description": "",
                "type": "Y.Overlay"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 231,
            "description": "Method that is used to create the `bodyContent` for the Overlay instance of this popup menu.\nCan be used via the *old* method of defining ATTR `menuItemTemplate` or the **new** method\nthat uses Y.Template to render the content (See ATTR [menuTemplate](#attr_menuTemplate) for details).",
            "itemtype": "method",
            "name": "_buildOverlayContent",
            "return": {
                "description": "",
                "type": "HTML"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 295,
            "description": "Handler for right-click event (actually \"contextmenu\" event) on `trigger.node`.",
            "itemtype": "method",
            "name": "_onContextMenu",
            "params": [
                {
                    "name": "e",
                    "description": "Y.Event target object created when \"context\" menu fires",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 319,
            "description": "Fired after the \"contextmenu\" event is initiated and the Menu has been positioned and displayed",
            "itemtype": "event",
            "name": "contextMenuShow",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 326,
            "description": "Process a \"click\" event on the Content Menu's Overlay menuItems",
            "itemtype": "method",
            "name": "_selectMenuItem",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 351,
            "description": "Fires when a selection is \"clicked\" from within the pop-up menu\n(a better approach is to listen on attribute [selectedMenu](#attr_selectedMenu) for \"change\")",
            "itemtype": "event",
            "name": "select",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 359,
            "description": "Fired after a Menu choice has been selected from the ContexMenu and the menu has been hidden",
            "itemtype": "event",
            "name": "contextMenuHide",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 365,
            "description": "Helper method to clear DOM \"selected\" text or ranges",
            "itemtype": "method",
            "name": "_clearDOMSelection",
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 383,
            "description": "Container Node where the menu's Overlay will be rendered into.  If not provided, the\ndefault will create a container from the [template](#property_template) setting.\n\nThis is usually only set when the user has a specific Overlay container design they\nwish to utilize.",
            "itemtype": "attribute",
            "name": "container",
            "type": "{Node}",
            "default": "Y.Node.create(this.template)",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 398,
            "description": "Defines the container element for the \"contextmenu\" event listener to attach this menu to.\n<br/><br/>This {Object} must contain the following;<br/>\n<ul>\n  <li>`node` {Node} the Node instance that will have a delegated \"contextmenu\" listener\n       attached to it</li>\n           <li>`target` {String} A CSS selector for the \"target\" sub-element (child of trigger.node) that\n            will be used for the delegation and will be returned from attribute \"contextTarget\"</li>\n</ul>",
            "example": [
                "\n      // This will define the trigger node (to accept right-clicks) as a DataTable's THEAD\n      //  element and the target as the TH nodes.\n      trigger : {\n          node:   myDataTable.get('srcNode').one('thead .yui3-datatable-columns'),\n          target: \"th\"\n      }"
            ],
            "itemtype": "attribute",
            "name": "trigger",
            "type": "{String} trigger.target Container filter selector to assign target from container event",
            "default": "{node:null, target:''}",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 429,
            "description": "Set to the returned target within the `trigger.node` container that the \"contextmenu\" event was initiated on\n(e.g. for a DataTable this may be a specific TR row within the table body).",
            "itemtype": "attribute",
            "name": "contextTarget",
            "type": "{Node}",
            "default": "null",
            "readonly": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 443,
            "description": "Overrideable HTML template to use for creating each `menuItem` entry in Overlay.\nMust include \"data-cmenu\"",
            "itemtype": "attribute",
            "name": "menuItemTemplate",
            "type": "{String}",
            "default": "'<div class=\"{menuClass}\" data-cmenu=\"{menuIndex}\">{menuContent}</div>'",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 455,
            "description": "Array of \"menu\" items as either {Strings} or {Objects} to add to the Menu.\n\nWhen {Objects} are included, as a minimum they must include a `label` property that contains the text to display in the menu.",
            "example": [
                "\n  menuItems: [ \"one\", \"two\", \"three\", \"four\" ]\n  menuItems: [ \"Insert\", \"Update\", {label:\"Delete\", confirm:true}, \"... More\" ]\n  menuItems: [ {label:\"Foo\", value:100}, {label:\"Bar\", value:105}, {label:\"Baz\", value:200} ]"
            ],
            "itemtype": "attribute",
            "name": "menuItems",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 473,
            "description": "Defines a Y.Template structure to process and prepare the Overlay's `bodyContent` HTML.\nThe **REQUIRED** properties within this Object are `template` and `options`.  Implementers\ncan define whatever other properties they like that work with the `template` they define.\nOptional properties that are recognized include `menuClass`, `menuItemClass` and `menuItemText`.\n\nCustom implementers are advised to review the [templateMicro](#property_templateMicro) default\nproperty and [_buildOverlayContent](#method__buildOverlayContent) methods carefully.  As a minimum,\nthis View expects the `data-cmenu` HTML attribute to be set on each item and listens for click events\non the `yui3-contextmenu-menuitem` CSS class.",
            "example": [
                "\n      // Define contents as UL items ... rendered using Template.Micro\n      menuTemplate:{\n          template: '<ul class=\"myCMenu\">'\n                  + '<% Y.Array.each( this.options, function(r,i){ %>'\n                  + '<li class=\"<%= this.menuItemClass %>\" data-cmenu=\"<%= i %>\" ><%= r.label %></li>'\n                  + '<% },this); %></ul>',\n          options: [\n           { label:'Menu 1', value:'m1' }, { label:'Menu 2', value:'m2' },{ label:'Menu 3', value:'m3' }\n          ],\n          menuItemClass:'yui3-contextmenu-menuitem'\n      }"
            ],
            "itemtype": "attribute",
            "name": "menuTemplate",
            "type": "Object",
            "default": "null",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 505,
            "description": "Y.Overlay instance used to render the pop-up context menu within\n\n**Default:** See [_valOverlay](#method__valOverlay)",
            "itemtype": "attribute",
            "name": "overlay",
            "type": "Y.Overlay",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 518,
            "description": "Sets the XY position offset that the Overlay will be positioned to relative to the contextmenu\nclick XY coordinate.",
            "itemtype": "attribute",
            "name": "offsetXY",
            "type": "Array",
            "default": "[5,11]",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 531,
            "description": "Set to the \"selected\" item from the pop-up Overlay menu when clicked by user, where this\nattribute is set to an object containing the EventTarget of the selection and the resulting\nmenuitem and menuindex that corresponds to the selection.\n\nThis is set by the method [_selectMenuItem](#method__selectMenuItem).\n\nSet to an {Object} with the following properties;\n  <ul>\n  <li>`evt` Event target from \"click\" selection within displayed Overlay</li>\n  <li>`menuItem` Menuitem object entry selected from `menuItems` array</li>\n  <li>`menuIndex` Index of current Menuitem object within the [menuItems](#attr_menuItems) attribute array</li>\n  </ul>",
            "example": [
                "\n     // If the 'selectedMenu' was set to the 2nd item from the following menuItems setting ...\n     myCmenu.set('menuItems',[ {label:\"Foo\", value:100}, {label:\"Bar\", value:105}, {label:\"Baz\", value:200} ]);\n\n     // ... user clicks 2nd item,\n      myCmenu.get('selectedMenu')\n      // returns {evt:'event stuff object', menuItem:{label:\"Bar\", value:105}, menuIndex:1 }"
            ],
            "itemtype": "attribute",
            "name": "selectedMenu",
            "type": "{Object} obj",
            "readonly": "",
            "class": "Y.ContextMenuView",
            "module": "gallery-contextmenu-view"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 82,
            "description": "Defines the INPUT HTML content \"template\" for this editor's View container",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "'<input type=\"text\" class=\"{cssInput}\" />'",
            "static": 1,
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 91,
            "description": "Defines the View container events and listeners used within this View",
            "itemtype": "property",
            "name": "events",
            "type": "Object",
            "default": "See Code",
            "static": 1,
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 107,
            "description": "Array of detach handles to any listeners set on this View class",
            "itemtype": "property",
            "name": "_subscr",
            "type": "Array of EventHandles",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 117,
            "description": "CSS classname to identify the editor's INPUT Node",
            "itemtype": "property",
            "name": "_classInput",
            "type": "String",
            "default": "'yui3-datatable-inline-input'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 127,
            "description": "Placeholder for the created INPUT Node created within the View container",
            "itemtype": "property",
            "name": "_inputNode",
            "type": "Node",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 139,
            "description": "Initialize and create the View contents",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 151,
            "description": "Cleans up the View after it is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 161,
            "description": "Event fired when the cell editor View is destroyed.\n\nImplementers can listen for this event to check if any sub-components / widgets, etc.. they\nhad created as part of this View need to be destroyed or listener unbound.",
            "itemtype": "event",
            "name": "editorDestroyed",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 170,
            "description": "Adds a listener to this editor instance to reposition based on \"xy\" attribute changes",
            "itemtype": "method",
            "name": "_bindUI",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 195,
            "description": "Detaches any listener handles created by this view",
            "itemtype": "method",
            "name": "_unbindUI",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 209,
            "description": "The defaultFn for the `editorSave` event",
            "itemtype": "method",
            "name": "_defEditorSaveFn",
            "params": [
                {
                    "name": "e",
                    "description": "For editorSave event",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 220,
            "description": "The defaultFn for the `editorCancel` event",
            "itemtype": "method",
            "name": "_defEditorCancelFn",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 231,
            "description": "Displays the inline cell editor and positions / resizes the INPUT to\noverlay the edited TD element.\n\nSet the initial value for the INPUT element, after preprocessing (if reqd)",
            "itemtype": "method",
            "name": "showEditor",
            "params": [
                {
                    "name": "td",
                    "description": "The Node instance of the TD to begin editing on",
                    "type": "Node"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 281,
            "description": "Event fired when the cell editor is displayed and becomes visible.\n\nImplementers may listen for this event if they have configured complex View's, that include\nother widgets or components, to update their UI upon displaying of the view.",
            "itemtype": "event",
            "name": "editorShow",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "td",
                            "description": "TD Node instance of the calling editor",
                            "type": "Node"
                        },
                        {
                            "name": "inputNode",
                            "description": "The editor's INPUT / TEXTAREA Node",
                            "type": "Node"
                        },
                        {
                            "name": "value",
                            "description": "The current \"value\" setting",
                            "type": "String|Number|Date"
                        },
                        {
                            "name": "cell",
                            "description": "object",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 295,
            "description": "Saves the View's `value` setting (usually after keyboard RTN or other means) and fires the\n[editorSave](#event_editorSave) event so consumers (i.e. DataTable) can make final changes to the\nModel or dataset.\n\nThank you to **Satyam** for his guidance on configuring the event publishing, defaultFn related to this\ntechnique!",
            "itemtype": "method",
            "name": "saveEditor",
            "params": [
                {
                    "name": "val",
                    "description": "Raw value setting to be saved after editing",
                    "type": "String|Number|Date"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 332,
            "description": "Event that is fired when the user has finished editing the View's cell contents (signified by either\na keyboard RTN entry or \"Save\" button, etc...).\n\nThis event is intended to be the PRIMARY means for implementers to know that the editing has been\ncompleted and validated.  Consumers (i.e. DataTable) should listen to this event and process it's results\nto save to the Model and or dataset for the DT.",
            "itemtype": "event",
            "name": "editorSave",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "td",
                            "description": "TD Node for the edited cell",
                            "type": "Node"
                        },
                        {
                            "name": "cell",
                            "description": "Current cell object",
                            "type": "Object"
                        },
                        {
                            "name": "oldValue",
                            "description": "Data value of this cell prior to editing",
                            "type": "String|Number|Date"
                        },
                        {
                            "name": "newValue",
                            "description": "Data value of this cell after editing",
                            "type": "String|Number|Date"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 348,
            "description": "Hides the current editor View instance.  If the optional `hideMe` param is true this View will\nbe temporarily \"hidden\" (used for scrolling DT's when the TD is scrolled off/on to the page)",
            "itemtype": "method",
            "name": "hideEditor",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 369,
            "description": "Fired when the active cell editor is hidden",
            "itemtype": "event",
            "name": "editorHide",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 374,
            "description": "Called when the user has requested to cancel, and abort any changes to the DT cell,\nusually signified by a keyboard ESC or \"Cancel\" button, etc..",
            "itemtype": "method",
            "name": "cancelEditor",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 390,
            "description": "Fired when editing is cancelled (without saving) on this cell editor",
            "itemtype": "event",
            "name": "editorCancel",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "td",
                            "description": "TD Node for the edited cell",
                            "type": "Node"
                        },
                        {
                            "name": "cell",
                            "description": "Current cell object",
                            "type": "Object"
                        },
                        {
                            "name": "oldValue",
                            "description": "Data value of this cell prior to editing",
                            "type": "String|Number|Date"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 399,
            "description": "Provides a method to process keypress entries and validate or prevent invalid inputs.\nThis method is meant to be overrideable by implementers to customize behaviors.",
            "itemtype": "method",
            "name": "processKeyPress",
            "params": [
                {
                    "name": "e",
                    "description": "Key press event object",
                    "type": "EventFacade"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 442,
            "description": "Key listener for the INPUT inline editor, \"keydown\" is checked for non-printing key\n strokes, navigation or ESC.\n\n This method is intended to overridden by implementers in order to customize behaviors.",
            "itemtype": "method",
            "name": "processKeyDown",
            "params": [
                {
                    "name": "e",
                    "description": "Keydown event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 499,
            "description": "Processes the initial container for this View, sets up the HTML content\n and creates a listener for positioning changes",
            "itemtype": "method",
            "name": "_createUI",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 534,
            "description": "View event fired when the inline editor has been initialized and ready for usage.\nThis event can be listened to in order to add additional content or widgets, etc onto\nthe View's container.",
            "itemtype": "event",
            "name": "editorCreated",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "inputNode",
                            "description": "The created INPUT[text] node",
                            "type": "Node"
                        },
                        {
                            "name": "container",
                            "description": "The View container",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 545,
            "description": "Resizes the view \"container\" to match the dimensions of the TD cell that is\n being edited.",
            "itemtype": "method",
            "name": "_resizeCont",
            "params": [
                {
                    "name": "cont",
                    "description": "The Node instance of the \"container\" of this view",
                    "type": "Node"
                },
                {
                    "name": "td",
                    "description": "The Node instance for the TD to match dimensions of",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 570,
            "description": "Helper method that returns the computed CSS style for the reference node as a parsed number",
            "itemtype": "method",
            "name": "_parseStyle",
            "params": [
                {
                    "name": "el",
                    "description": "Node instance to check style on",
                    "type": "Node"
                },
                {
                    "name": "v",
                    "description": "Style name to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Computed style with 'px' removed",
                "type": "Number|String"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 582,
            "description": "Listener to INPUT \"click\" events that will stop bubbling to the DT TD listener,\nto prevent closing editing while clicking within an INPUT.",
            "itemtype": "method",
            "name": "_onClick",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 593,
            "description": "Listener to mouseleave event that will hide the editor if attribute \"hideMouseLeave\" is true",
            "itemtype": "method",
            "name": "_onMouseLeave",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 604,
            "description": "This method can be used to quickly reset the current View editor's position,\n used for scrollable DataTables.\n\nNOTE: Scrollable inline editing is a little \"rough\" right now",
            "itemtype": "method",
            "name": "_setEditorXY",
            "params": [
                {
                    "name": "e",
                    "description": "The xy attribute change event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 628,
            "description": "Name for this View instance",
            "itemtype": "attribute",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 639,
            "description": "A cell reference object populated by the calling DataTable, contains\nthe following key properties: {td,value,recClientId,colKey}",
            "itemtype": "attribute",
            "name": "cell",
            "type": "Object",
            "default": "{}",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 650,
            "description": "Value that was saved in the Editor View and returned to the record",
            "itemtype": "attribute",
            "name": "value",
            "type": "{String|Number|Date}",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 661,
            "description": "Value that was contained in the cell when the Editor View was displayed",
            "itemtype": "attribute",
            "name": "lastValue",
            "type": "{String|Number|Date}",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 672,
            "description": "Maintains a reference back to the calling DataTable instance",
            "itemtype": "attribute",
            "name": "hostDT",
            "type": "Y.DataTable",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 683,
            "description": "Function to execute on the \"data\" contents just prior to displaying in the Editor's main view\n(i.e. typically used for pre-formatting Date information from JS to mm/dd/YYYY format)\n\nThis function will receive one argument \"value\" which is the data value from the record, and\n the function runs in Editor scope.",
            "itemtype": "attribute",
            "name": "prepFn",
            "type": "Function",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 699,
            "description": "Function to execute when Editing is complete, prior to \"saving\" the data to the Record (Model)\nThis function will receive one argument \"value\" which is the data value from the INPUT and within\nthe scope of the current View instances.\n\nThis method is intended to be used for input validation prior to saving.  **If the returned value\nis \"undefined\" the cancelEditor method is executed.**",
            "itemtype": "attribute",
            "name": "saveFn",
            "type": "Function",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 716,
            "description": "This flag dictates whether the View container is hidden when the mouse leaves\nthe focus of the inline container.\nTypically we want this behavior, one example where we don't would be an\ninline autocomplete editor.",
            "itemtype": "attribute",
            "name": "hideMouseLeave",
            "type": "Boolean",
            "default": "true",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 730,
            "description": "Prescribes a CSS class name to be added to the editor's INPUT node after creation.",
            "itemtype": "attribute",
            "name": "className",
            "type": "String",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 741,
            "description": "A flag to indicate if cell-to-cell navigation should be implemented (currently setup for CTRL-arrow\nkey, TAB and Shift-TAB) capability",
            "itemtype": "attribute",
            "name": "inputKeys",
            "type": "Boolean",
            "default": "true",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 753,
            "description": "Tracks navigation changes during keyboard input as relative [row,col] changes from the currently\nactive cell TD.",
            "itemtype": "attribute",
            "name": "keyDir",
            "type": "Array as [row,col] from current TD",
            "readonly": "",
            "default": "[]",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 768,
            "description": "Setting for checking the visibility status of this Editor",
            "itemtype": "attribute",
            "name": "visible",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 781,
            "description": "Setting to check if the editor is \"still open\" but just hidden, created in order to support\nscrolling datatables when an editor scrolls out of open window.",
            "itemtype": "attribute",
            "name": "hidden",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 796,
            "description": "XY coordinate position of the editor View container (INPUT)",
            "itemtype": "attribute",
            "name": "xy",
            "type": "Array",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 807,
            "description": "Provides a keystroke filtering capability to restrict input into the editing area checked during the\n\"keypress\" event.  This attribute is set to either a RegEx or a function that confirms if the keystroke\nwas valid for this editor.  (TRUE meaning valid, FALSE meaning invalid)\n\nIf a function is provided, the single argument is the keystroke event facade `e` and if\nthe keystroke is valid it should return true, otherwise if invalid false;",
            "example": [
                "\n     /\\d/            // for numeric digit-only input\n     /\\d|\\-|\\./      // for floating point numeric input\n     /\\d|\\//         // for Date field entry in MM/DD/YYYY format"
            ],
            "itemtype": "attribute",
            "name": "keyFiltering",
            "type": "{RegExp|Function}",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 828,
            "description": "Provides the capability to validate the final saved value after editing is finished.\nThis attribute can be set to either a RegEx or a function, that operates on the entire\n\"value\" setting of the editor input (whereas [keyFiltering](#attr_keyFilter) performs\nvalidation checks on each key input).\n\nIf a function is provided, the single argument is the value setting of the editor.\nthe keystroke is valid it should return true, otherwise if invalid false;",
            "example": [
                "\n     /\\d/            // for numeric digit-only input\n     /\\d|\\-|\\.|\\+/   // for floating point numeric input\n     /\\d|\\//         // for Date field entry in MM/DD/YYYY format"
            ],
            "itemtype": "attribute",
            "name": "validator",
            "type": "{RegExp|Function}",
            "default": "null",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 850,
            "description": "Concept for user-prescribed key mappings ... still incomplete\n\n  keyNav: { modifier:'ctrl+meta', circular:true  }\n\nOR, define ALL recognized key actions for navigation ...\n\n  keyNav:{\n\n     keydown:  {\n          left:  [ {ctrlKey:37}, {shiftKey:9}\n          right: [ {ctrlKey:39\n          up:    [ 38\n          down:  [ 40\n          save:  [ 13\n          cancel: [27\n     },\n\n     mouse: {\n         open : [click, focus]\n         close : [ blur ]\n     }\n  }",
            "class": "Y.DataTable.BaseCellInlineEditor",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 979,
            "description": "A validation regular expression object used to check validity of the input floating point number.\nThis can be defined by the user to accept other numeric input, or set to \"null\" to disable regex checks.",
            "itemtype": "attribute",
            "name": "validator",
            "type": "{RegExp|Function}",
            "default": "/^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/",
            "class": "Y.DataTable.EditorOptions.inlineNumber",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 1061,
            "description": "A user-supplied Date format string to be used to display the date in the View's container.\n(Must conform with date format strings from http://yuilibrary.com/yui/docs/api/classes/Date.html#method_format,\ni.e. strftime format)",
            "itemtype": "attribute",
            "name": "dateFormat",
            "type": "String",
            "default": "\"%D\"",
            "class": "Y.DataTable.EditorOptions.inlineDate",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-inline.js",
            "line": 1170,
            "description": "A user-supplied set of configuration parameters to be passed into this View's Y.Plugin.AutoComplete\nconfiguration object.\n\nAt a bare minimum, the user MUST provide the \"source\" of data for the AutoComplete !!\n\nFor this control to save anything, the user needs to define an \"on:select\" listener in the AC's\n\"autocompleteConfig\" in order to saveEditor when the select action occurs.",
            "itemtype": "attribute",
            "name": "autocompleteConfig",
            "type": "Object",
            "default": "{}",
            "class": "Y.DataTable.EditorOptions.inlineAC",
            "module": "gallery-datatable-celleditor-inline"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 109,
            "description": "Defines the HTML content \"template\" for the containing Overlay of this editor,\nthis property is also set by default to the attribute",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "See Code",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 119,
            "description": "Defines the HTML content \"template\" for BUTTON elements that are added to the Overlay\nvia the overlayButtons attribute.",
            "itemtype": "property",
            "name": "btnTemplate",
            "type": "String",
            "default": "See Code",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 129,
            "description": "Placeholder property for the Overlay that is created by this View",
            "itemtype": "property",
            "name": "overlay",
            "type": "Widget",
            "default": "null",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 141,
            "description": "CSS classname to identify the input HTML node within the View container",
            "itemtype": "property",
            "name": "_classInput",
            "type": "String",
            "default": "'yui3-datatable-editor-input'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 151,
            "description": "CSS classname to identify the individual input collection HTML nodes within\nthe View container",
            "itemtype": "property",
            "name": "_classItem",
            "type": "String",
            "default": "'yui3-datatable-editor-input-item'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 162,
            "description": "CSS classname for the Overlay content within the View container",
            "itemtype": "property",
            "name": "_classOverlay",
            "type": "String",
            "default": "'yui3-datatable-editor-overlay'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 172,
            "description": "CSS classname used for Overlay BUTTON elements within the View container",
            "itemtype": "property",
            "name": "_classOverlayBtn",
            "type": "String",
            "default": "'yui3-datatable-editor-overlay-button'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 182,
            "description": "CSS classname to identify the individual input collection HTML nodes within\nthe View container",
            "itemtype": "property",
            "name": "_classEditing",
            "type": "String",
            "default": "'editing'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 193,
            "description": "Placeholder for the created Input element contained within the Overlay and\nView container",
            "itemtype": "property",
            "name": "_inputNode",
            "type": "Node",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 204,
            "description": "Placeholder for listener handles created from this View",
            "itemtype": "property",
            "name": "_subscr",
            "type": "Array of {EventHandles}",
            "default": "[]",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 216,
            "description": "Creates the View instance and sets the container and bindings",
            "itemtype": "method",
            "name": "initializer",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 229,
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 239,
            "description": "Event fired when the cell editor View is destroyed.\n\nImplementers can listen for this event to check if any sub-components / widgets, etc.. they\nhad created as part of this View need to be destroyed or listener unbound.",
            "itemtype": "event",
            "name": "editorDestroyed",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 248,
            "description": "Method that publishes the custom events and sets bindings for key handling and\npositioning changes",
            "itemtype": "method",
            "name": "_bindUI",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 286,
            "description": "Creates this View's container, including instantiating the Overlay widget within\nthe container, incorporating user-supplied overlay configs, creating buttons and\ncreating the internal HTML content within the Overlay (using a Template-based\nmethod)",
            "itemtype": "method",
            "name": "_createUI",
            "return": {
                "description": "Overlay instance for this View",
                "type": "Y.Overlay"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 336,
            "description": "View event fired when the inline editor has been initialized and ready for usage.\nThis event can be listened to in order to add additional content or widgets, etc onto\nthe View's container.",
            "itemtype": "event",
            "name": "editorCreated",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "inputNode",
                            "description": "The created INPUT[text] node, if any",
                            "type": "Node"
                        },
                        {
                            "name": "container",
                            "description": "The View container / Overlay instance",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 347,
            "description": "Detaches the listeners that were set on this view, any widgets that were created\nand on the View's Overlay instance.",
            "itemtype": "method",
            "name": "_unbindUI",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 375,
            "description": "Method that displays the editor configured for the input TD node, this is done\nin lieu of a `render` method for this View.  If no `td` is provided then the\nlast configured [cell](#attr_cell) attribute's `td` property is used.",
            "itemtype": "method",
            "name": "showEditor",
            "params": [
                {
                    "name": "tar",
                    "description": "Target TD cell that editing takes place on",
                    "type": "Node"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 432,
            "description": "Event fired when the cell editor is displayed and becomes visible.\n\nImplementers may listen for this event if they have configured complex View's, that include\nother widgets or components, to update their UI upon displaying of the view.",
            "itemtype": "event",
            "name": "editorShow",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "inputNode",
                            "description": "The editor's INPUT / TEXTAREA Node",
                            "type": "Node"
                        },
                        {
                            "name": "value",
                            "description": "The current \"value\" setting",
                            "type": "String|Number|Date"
                        },
                        {
                            "name": "cell",
                            "description": "object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "td",
                                    "description": "TD Node undergoing editing",
                                    "type": "Node"
                                },
                                {
                                    "name": "recClientId",
                                    "description": "The active record's \"clientId\" attribute setting",
                                    "type": "String"
                                },
                                {
                                    "name": "colKey",
                                    "description": "The active column's key or name setting",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 449,
            "description": "Called when the user has requested to cancel, and abort any changes to the DT cell,\nusually signified by a keyboard ESC or \"Cancel\" button, etc..",
            "itemtype": "method",
            "name": "cancelEditor",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 464,
            "description": "Fired when editing is cancelled (without saving) on this cell editor",
            "itemtype": "event",
            "name": "editorCancel",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "td",
                            "description": "TD Node for the edited cell",
                            "type": "Node"
                        },
                        {
                            "name": "cell",
                            "description": "Current cell object",
                            "type": "Object"
                        },
                        {
                            "name": "oldValue",
                            "description": "Data value of this cell prior to editing",
                            "type": "String|Number|Date"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 473,
            "description": "Saves the View's `value` setting (usually after keyboard RTN or other means) and fires the\n[editorSave](#event_editorSave) event so consumers (i.e. DataTable) can make final changes to the\nModel or dataset.\n\nThank you to **Satyam** for his guidance on configuring the event publishing, defaultFn related to this\ntechnique!",
            "itemtype": "method",
            "name": "saveEditor",
            "params": [
                {
                    "name": "val",
                    "description": "Value to save to the current editor's [value](#attr_value) attribute",
                    "type": "String|Number|Date"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 525,
            "description": "Event that is fired when the user has finished editing the View's cell contents (signified by either\na keyboard RTN entry or \"Save\" button, etc...).\n\nThis event is intended to be the PRIMARY means for implementers to know that the editing has been\ncompleted and validated.  Consumers (i.e. DataTable) should listen to this event and process it's results\nto save to the Model and or dataset for the DT.",
            "itemtype": "event",
            "name": "editorSave",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "td",
                            "description": "TD Node for the edited cell",
                            "type": "Node"
                        },
                        {
                            "name": "cell",
                            "description": "Current cell object",
                            "type": "Object"
                        },
                        {
                            "name": "oldValue",
                            "description": "Data value of this cell prior to editing",
                            "type": "String|Number|Date"
                        },
                        {
                            "name": "newValue",
                            "description": "Data value of this cell after editing",
                            "type": "String|Number|Date"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 541,
            "description": "Hides the current editor View instance.  If the optional `hideMe` param is true this View will\nbe temporarily \"hidden\" (used for scrolling DT's when the TD is scrolled off/on to the page)",
            "itemtype": "method",
            "name": "hideEditor",
            "params": [
                {
                    "name": "keep",
                    "description": "Keep visible set to true/false",
                    "type": "Boolean"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 568,
            "description": "Fired when the active cell editor is hidden",
            "itemtype": "event",
            "name": "editorHide",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 573,
            "description": "Provides a method to process keypress entries and validate or prevent invalid inputs.\nThis method is meant to be overrideable by implementers to customize behaviors.",
            "itemtype": "method",
            "name": "processKeyPress",
            "params": [
                {
                    "name": "e",
                    "description": "Key press event object",
                    "type": "EventFacade"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 616,
            "description": "Key listener for the INPUT inline editor, \"keydown\" is checked for non-printing key\n strokes, navigation or ESC.\n\n This method is intended to overridden by implementers in order to customize behaviors.",
            "itemtype": "method",
            "name": "processKeyDown",
            "params": [
                {
                    "name": "e",
                    "description": "Keydown event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 674,
            "description": "The defaultFn for the `editorSave` event",
            "itemtype": "method",
            "name": "_defEditorSaveFn",
            "params": [
                {
                    "name": "e",
                    "description": "For editorSave event",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 685,
            "description": "The defaultFn for the `editorCancel` event",
            "itemtype": "method",
            "name": "_defEditorCancelFn",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 694,
            "description": "Method that creates the Editor's Overlay instance and populates the base content.",
            "itemtype": "method",
            "name": "_createOverlay",
            "return": {
                "description": "",
                "type": "Y.Overlay"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 737,
            "description": "Method creates a footer section within the Overlay and adds the buttons entered\nas the \"buttons\" config property of \"overlayConfig\".",
            "itemtype": "method",
            "name": "_createOverlayButtons",
            "params": [
                {
                    "name": "overlay",
                    "description": "",
                    "type": "Widget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 775,
            "description": "Method used to process the [templateObject](#attr_templateObject) attribute and generate the\nOverlay's `bodyContent`.  This method uses the `Y.Template` module to prepare the HTML, which\nis passed in via [templateObject](#attr_templateObject)'s `html` property.\n\nThis method uses the `Y.Template.Micro` module by default to process the template.  Implementers\ncan pass in any different Y.Template supported-template engine via the [templateEngine](#attr_templateEngine)\nattribute (i.e. `templateEngine: Y.Handlebars`) but will have to modify the `html` property of templateObject\nappropriately for that engine.\n\nImplementers can pass in \"options\" and other properties to the [templateObject](#attr_templateObject) ATTR and\nthis function will normalize the `this.options` to an Object with keys {value,text,title,raw} which can be\nused more directly within HTML construction.\n\nThe templateObject ATTR `options` property can be either an Array or an Object, this function converts and\nnormalizes the content to an output Array as `this.options` within the template definitions.",
            "itemtype": "method",
            "name": "_createTemplateContent",
            "params": [
                {
                    "name": "overlay",
                    "description": "Overlay instance for this View",
                    "type": "Widget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 879,
            "description": "This method can be used to quickly reset the current View editor's position,\n used for scrollable DataTables.",
            "itemtype": "method",
            "name": "_setEditorXY",
            "params": [
                {
                    "name": "e",
                    "description": "The xy attribute change event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 892,
            "description": "Utility method that checks if a value (include ZERO!!) is defined and\nnot null  (there's probably a much better way to do this)",
            "itemtype": "method",
            "name": "_isZeroOr",
            "params": [
                {
                    "name": "v",
                    "description": "Value to check",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "True if value is defined, not null, and possibly zero",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 905,
            "description": "Listener to mouseleave event that closes the active editor",
            "itemtype": "method",
            "name": "_mouseLeave",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 914,
            "itemtype": "method",
            "name": "_setInputValue",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Number|String|Date"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 938,
            "description": "Helper method to clear DOM \"selected\" text or ranges\nNOTE: could probably do this with CSS `user-select: none;`, but anyway ...",
            "itemtype": "method",
            "name": "_clearDOMSelection",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 960,
            "description": "Name for this View, this is useful because the `name` attribute is prefixed to the\n 'Options' string for some Views (i.e. a cell editor named 'myRadio' will have a defined\n set of options available of 'myRadioOptions'",
            "itemtype": "attribute",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 974,
            "description": "Defines the Overlay's HTML template for the overall View (not recommended to change this!!)\nNOTE: This the Overlay structure template **and not** the bodyContent template for the Overlay,\nit is not recommended you change this attr.\n\nPlease see the [templateObject](#attr_templateObject) attribute to define the HTML for your View!",
            "itemtype": "attribute",
            "name": "template",
            "type": "String",
            "access": "private",
            "tagname": "",
            "default": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 991,
            "description": "Additional config parameters for the Overlay to be used in constructing the Editor.\nThese configs are merged with the defaults required by the Editor.",
            "itemtype": "attribute",
            "name": "overlayConfig",
            "type": "Object",
            "default": "{}",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1005,
            "description": "Specifies a width attribute style to set the `_classInput` Node element to upon rendering.",
            "itemtype": "attribute",
            "name": "inputWidth",
            "type": "String|Number",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1015,
            "description": "Defines the `width` parameter to set the Overlay widget to upon rendering, can also be overridden\nby setting `overlayConfig.width`.",
            "itemtype": "attribute",
            "name": "overlayWidth",
            "type": "String|Number",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1026,
            "description": "A flag to indicate if cell-to-cell navigation should be implemented (currently setup for CTRL-arrow\nkey, TAB and Shift-TAB) capability",
            "itemtype": "attribute",
            "name": "inputKeys",
            "type": "Boolean",
            "default": "true",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1038,
            "description": "Defines the type of template engine that will be used to parse Templates, (via Y.Template).\nTypically this would be set to `Y.Template.Micro` or `Y.Handlebars`\n\nNOTE: If you use Y.Handlebars (or any other YUI template engine) you MUST include it in your YUI.use\nloader statement (\"template\" is included in this module's `requires` by default)",
            "itemtype": "attribute",
            "name": "templateEngine",
            "type": "Object",
            "default": "Y.Template.Micro",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1053,
            "description": "This attribute is used to define the HTML content that will be created / generated and inserted within\nthis View's Y.Overlay.   The attribute definitions include an object with the following recognizable\nproperties: `html, xxxOptions, propValue, propText, propTitle`\n\nNote that xxxOptions matches the `name` attribute (i.e. the editor \"name\" you include on your column\ndefinitions), where xxx is replaced with the name.  For \"radio\" it is `radioOptions`, for \"select\" it is\n`selectOptions`, \"checkbox\" it is `checkboxOptions`, etc...\n\nThe method [_createTemplateContent](#method__createTemplateContent) uses this attribute and processes the\ntemplate using the `html` and other properties to generate the HTML.  It then inserts the compiled HTML into\nthe Overlay's `bodyContent`.",
            "example": [
                "\n\n     templateObject: {\n         // set the template definition\n         html: '<select class=\"myselect\">'\n            +  '<% Y.Array.each( data.options, function(r){ %>'\n            +  '<option value=\"<%= r.value %>\" <% (r.title) ? \\'title=\"r.title\"\\' :  %>>'\n            +  '<%= r.text %></option>'\n            +  '<% },this); %>'\n            +  '</select>'\n         options: states   // [ {value:'AZ', text:'Arizona}, {value:'DE', text:'Delaware' } ]\n     }"
            ],
            "itemtype": "attribute",
            "name": "templateObject",
            "type": "Object",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1087,
            "description": "A cell reference object populated by the calling DataTable, contains the following key properties:\n  `{td,value,recClientId,colKey}`",
            "itemtype": "attribute",
            "name": "cell",
            "type": "Object",
            "default": "{}",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1098,
            "description": "Maintains a reference back to the calling DataTable instance (not really used yet)",
            "itemtype": "attribute",
            "name": "hostDT",
            "type": "Y.DataTable",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1109,
            "description": "Value that was saved in the Editor View and returned to the record",
            "itemtype": "attribute",
            "name": "value",
            "type": "{String|Number|Date}",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1120,
            "description": "Value that was contained in the cell when the Editor View was initiated",
            "itemtype": "attribute",
            "name": "lastValue",
            "type": "{String|Number|Date}",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1131,
            "description": "Function to execute on the \"data\" contents just prior to displaying in the Editor's main view\n(i.e. typically used for pre-formatting Date information from JS to mm/dd/YYYY format)\n\nThis function will receive one argument \"value\" which is the data value from the record, and\n the function runs in Editor scope.",
            "itemtype": "attribute",
            "name": "prepFn",
            "type": "Function",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1147,
            "description": "Function to execute when Editing is complete, prior to \"saving\" the data to the Record (Model)\n\nThis function will receive one argument \"value\" which is the data value from the INPUT or Widget, and\n the function runs in Editor scope.",
            "itemtype": "attribute",
            "name": "saveFn",
            "type": "Function",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1162,
            "description": "Tracks navigation changes during keyboard input as relative [row,col] changes from the currently\nactive cell TD.",
            "itemtype": "attribute",
            "name": "keyDir",
            "type": "Array as [row,col] from current TD",
            "readonly": "",
            "default": "[]",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1177,
            "description": "Setting for checking the visibility status of this Editor",
            "itemtype": "attribute",
            "name": "visible",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1190,
            "description": "Setting to check if the editor is \"still open\" but just hidden, created in order to support\nscrolling datatables when an editor scrolls out of open window.",
            "itemtype": "attribute",
            "name": "hidden",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1205,
            "description": "Sets an offset of the XY coordinates that will be used for positioning the Overlay upon\ndisplaying the editor View",
            "itemtype": "attribute",
            "name": "offsetXY",
            "type": "Array",
            "default": "[0,0]",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1217,
            "description": "XY coordinate position of the View container Overlay for this editor",
            "itemtype": "attribute",
            "name": "xy",
            "type": "Array",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1228,
            "description": "A flag to signify whether the editor View should be \"saved\" upon detecting the RTN keystroke\nwithin the INPUT area.\n\nFor example, textarea typically will not, to allow a newline to be added.",
            "itemtype": "attribute",
            "name": "saveKeyRTN",
            "type": "boolean",
            "default": "true",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1243,
            "description": "Provides a keystroke filtering capability to restrict input into the editing area checked during the\n\"keypress\" event.  This attribute is set to either a RegEx or a function that confirms if the keystroke\nwas valid for this editor.  (TRUE meaning valid, FALSE meaning invalid)\n\nIf a function is provided, the single argument is the keystroke event facade `e` and if\nthe keystroke is valid it should return true, otherwise if invalid false;",
            "example": [
                "\n     /\\d/            // for numeric digit-only input\n     /\\d|\\-|\\./      // for floating point numeric input\n     /\\d|\\//         // for Date field entry in MM/DD/YYYY format"
            ],
            "itemtype": "attribute",
            "name": "keyFiltering",
            "type": "{RegExp|Function}",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1264,
            "description": "Provides the capability to validate the final saved value after editing is finished.\nThis attribute can be set to either a RegEx or a function, that operates on the entire\n\"value\" setting of the editor input (whereas [keyFiltering](#attr_keyFilter) performs\nvalidation checks on each key input).\n\nIf a function is provided, the single argument is the value setting of the editor.\nthe keystroke is valid it should return true, otherwise if invalid false;",
            "example": [
                "\n     /\\d/            // for numeric digit-only input\n     /\\d|\\-|\\.|\\+/   // for floating point numeric input\n     /\\d|\\//         // for Date field entry in MM/DD/YYYY format"
            ],
            "itemtype": "attribute",
            "name": "validator",
            "type": "{RegExp|Function}",
            "default": "null",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1286,
            "description": "Concept for user-prescribed key mappings ... still incomplete\n\n  keyNav:{\n\n     keydown:  {\n          left:  [ {ctrlKey:37}, {shiftKey:9}\n          right: [ {ctrlKey:39\n          up:    [ 38\n          down:  [ 40\n          save:  [ 13\n          cancel: [27\n     },\n\n     mouse: {\n         open : [click, focus]\n         close : [ blur ]\n     }\n  }",
            "class": "Y.DataTable.BaseCellPopupEditor",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-celleditor-popup.js",
            "line": 1567,
            "description": "A validation regular expression object used to check validity of the input floating point number.\nThis can be defined by the user to accept other numeric input, or set to \"null\" to disable regex checks.",
            "itemtype": "attribute",
            "name": "validator",
            "type": "RegExp",
            "default": "/^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/",
            "class": "Y.DataTable.EditorOptions.number",
            "module": "gallery-datatable-celleditor-popup"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 44,
            "description": "Holder for the EventHandle for the \"select all\" INPUT[checkbox] click handler in the TH\n(set via delegate in _bindCheckboxSelect)",
            "itemtype": "property",
            "name": "_subscrChkAll",
            "type": "Array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 55,
            "description": "Holder for the EventHandle for the individual INPUT[checkbox]'s click handler within each TR\n(set via delegate in _bindCheckboxSelect)",
            "itemtype": "property",
            "name": "_subscrChk",
            "type": "Array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 66,
            "description": "Placeholder for the \"checkbox\" currently selected records, stored in 'primary key value' format.",
            "itemtype": "property",
            "name": "_chkRecords",
            "type": "Array",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 76,
            "description": "HTML template for creation of the TH column of the \"checkbox\" select column.",
            "itemtype": "property",
            "name": "tmplTH",
            "type": "String",
            "default": "'<input type=\"checkbox\" class=\"{className}\" title=\"{columnTitleTH}\"/>'",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 86,
            "description": "Key name of the \"checkbox\" select column that is added to DataTable's column configurations",
            "itemtype": "property",
            "name": "colSelect",
            "type": "String",
            "default": "'chkSelect'",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 97,
            "description": "Initializer, doesn't really do anything at this point ...",
            "itemtype": "method",
            "name": "initializer",
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 112,
            "description": "Unbinds the checkbox listeners and detaches any others created",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 125,
            "description": "Method that selects all \"checkboxes\" to checked, adds all records to the selected records and\nchecks the \"Select All\" checkbox.",
            "itemtype": "method",
            "name": "checkboxSelectAll",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 149,
            "description": "Fires after the \"select all\" checkbox is clicked and all records are selected",
            "itemtype": "event",
            "name": "checkboxSetAll",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 154,
            "description": "Method that resets all \"checkboxes\" to unchecked, zeros the selected records and\nunchecks the \"Select All\" checkbox.",
            "itemtype": "method",
            "name": "checkboxClearAll",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 172,
            "description": "Fires after the \"select all\" checkbox is clicked and all records are cleared",
            "itemtype": "event",
            "name": "checkboxclearAll",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 179,
            "description": "Method that sets \"click\" events (via DataTable .delegate) on the INPUT[checkbox]'s for each \nrow TR and for the \"select all\" checkbox.",
            "itemtype": "method",
            "name": "_bindCheckboxSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 190,
            "description": "Method to detach all of the listeners created by this class",
            "itemtype": "method",
            "name": "_unbindCheckboxSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 202,
            "description": "Enables this class, by clearing the selected records, creating the UI elements and adding checkbox listeners.",
            "itemtype": "method",
            "name": "_enableCheckboxSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 213,
            "description": "Disables this class, by clearing all selectors and remove the UI element and detaching listeners",
            "itemtype": "method",
            "name": "_enableCheckboxSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 224,
            "description": "Setter method for attribute (checkboxSelectMode)[#attr_checkboxSelectMode] that toggles this extension on/off",
            "itemtype": "method",
            "name": "_setCheckboxSelectMode",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 238,
            "description": "Getter method for [checkboxSelected](#attr_checkboxSelected) attribute, that returns the currently \"checkbox\" selected\nrows, returned as an array of {Object}s containing members {tr,record,pkvalues}.\n\t <br/><br/><b>Returns:</b> {Array} of {Objects} selected for each row as;\n\t <ul>\n\t <li>`selected.tr` : TR Node for the checkbox selected row</li>\n\t <li>`selected.record` : Model instance for the selected data record</li>\n\t <li>`selected.pkvalues` Primary key value settings for the selected record (single value or {Object} if more than one primary key is set)</li>\n\t </ul>",
            "itemtype": "method",
            "name": "_getCheckboxSelected",
            "return": {
                "description": "See above"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 266,
            "description": "Setter method for [checkboxSelected](#attr_checkboxSelected) attribute, currently only supports on input an\nArray of record indices that should be initially \"checkbox\" selected.\n\nTODO:  Need to add initial selections as \"primary key\" values",
            "itemtype": "method",
            "name": "_setCheckboxSelected",
            "params": [
                {
                    "name": "rows",
                    "description": "Array of row indices to initially set as \"checked\"",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 300,
            "description": "Method that returns a boolean flag indicating whether the entered record represents\na record that is currently selected (i.e. in this._chkRecords).\n\nThis is principally used by the formatter function for the checkbox column.",
            "itemtype": "method",
            "name": "_getCheckboxSelectedFlag",
            "params": [
                {
                    "name": "rec",
                    "description": ""
                }
            ],
            "return": {
                "description": "selected Either \"true\" or \"false\" depending on whether the entered row is currently \"checked\"",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 324,
            "description": "Click handler for the added in the checkbox select INPUT[checkbox]",
            "itemtype": "method",
            "name": "_onCheckboxSelect",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 351,
            "description": "Click handler for the TH \"check ALL\" INPUT[checkbox]",
            "itemtype": "method",
            "name": "_onCheckboxSelectAll",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 368,
            "description": "Adds a new Column with the TH element",
            "itemtype": "method",
            "name": "_uiAddCheckboxTH",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 403,
            "description": "Removes the \"checkbox\" select column from the DataTable columns attribute",
            "itemtype": "method",
            "name": "_uiRemoveCheckboxTH",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 413,
            "description": "Method that updates the UI on each record's INPUT[checkbox] and sets them to the entered setting (true,false).",
            "itemtype": "method",
            "name": "_uiCheckboxSetEach",
            "params": [
                {
                    "name": "bool",
                    "description": "Flag indicating whether checks should be set or not",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 427,
            "description": "Method that updates the UI on the \"select all\" INPUT[checkbox] and sets it to the entered setting (true,false).",
            "itemtype": "method",
            "name": "_uiCheckboxSetEach",
            "params": [
                {
                    "name": "bool",
                    "description": "Flag indicating whether the check should be set or not",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 441,
            "description": "Default value method for the (primaryKeys)[#attr_primaryKeys] attribute.  This method will search\nthe defined DataTable \"columns\" attribute array and loop over each column, if a column has a\nproperty \"primaryKey\" that column will be added as a primary key.",
            "example": [
                "\n       var cols = [ {key:'cust_id', label:'Cust ID', primaryKey:true},\n               {key:'ord_date', label:'Order Date'},\n               {key:'ord_id', label:'Order ID', primaryKey:true}\n               ....\n           ];\n       // will result in ATTR \"primaryKeys\" as [ 'cust_id', 'ord_id' ]"
            ],
            "itemtype": "method",
            "name": "_valPrimaryKeys",
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 472,
            "description": "Setter method for the the (primaryKeys)[#attr_primaryKeys] attribute, where the input values can be\neither (a) a single {String} column key name or (b) an {Array} of column key names in {String} format.\n\nNOTE: If this attribute is set, it will over-ride any \"primaryKey\" entries from the \"columns\".",
            "itemtype": "method",
            "name": "_setPrimaryKeys",
            "params": [
                {
                    "name": "pkn",
                    "description": "Column key (or column name) entries, either a single {String} name or an array of {Strings}",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 494,
            "description": "Returns the corresponding record (Model) for the entered primary key setting (pkv),\nwhere pkv can be either a single value or an object (for multiple primary keys).",
            "itemtype": "method",
            "name": "_getRecordforPKvalue",
            "params": [
                {
                    "name": "pkv",
                    "description": "Primary key setting to search ModelList for",
                    "type": "Number|String|Date|Object"
                }
            ],
            "return": {
                "description": "record Returns the record (Model) that corresponds to the key setting in pkv",
                "type": "Model"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 521,
            "description": "Method that returns the primary key values for the provided record \"rec\", either as an\nindividual value (for a single primary key) or as an {Object} in key:value pairs where the\nkey is the primary key name and the value is the value from this record.",
            "example": [
                "\n       // For a record with rec = {cust_id:157, cust_name:'foo', odate:'9/12/2009', ord_no:987}\n       this._getPKValues(rec);  // for one primary key \"cust_id\"  RETURNS 157\n       this._getPKValues(rec);  // for primary keys \"cust_id\", \"ord_no\"  RETURNS {cust_id:157,ord_no:987}"
            ],
            "itemtype": "method",
            "name": "_getPKValues",
            "params": [
                {
                    "name": "rec",
                    "description": "The record Model that the primary key values are requested for",
                    "type": "Model"
                }
            ],
            "return": {
                "description": "pkv Returns the primary key values as a single value or an object key:value hash",
                "type": "Mixed|Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 553,
            "description": "Function that searches an Array of Objects, looking for a matching partial object as defined by key_vals {Object},\nand returning the index of the first match.",
            "itemtype": "method",
            "name": "_indexOfObjMatch",
            "params": [
                {
                    "name": "arr",
                    "description": ""
                },
                {
                    "name": "key_vals",
                    "description": ""
                }
            ],
            "return": {
                "description": "imatch Returned index number of first match, or -1 if none found",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 583,
            "description": "Attribute that is used to trigger \"checkbox\" selection mode, and inserting of a checkbox select\ncolumn to the current DataTable.",
            "itemtype": "attribute",
            "name": "checkboxSelectMode",
            "type": "{Boolean}",
            "default": "false",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 598,
            "description": "Attribute that is used to retrieve the \"checkbox\" selected records from the DataTable at any time. \n\nAlso can be used to set initially \"checked\" records by entering an {Array} of record indices. (See method [_setCheckboxSelected](#method__setCheckboxSelected)).\n\n\nWhen a `get('checkboxSelected')` is requested, an {Array} of {Objects} containing members as \n{tr,record,pkvalues} is returned for each checked row. (See method [_getCheckboxSelected](#method__getCheckboxSelected)).",
            "itemtype": "attribute",
            "name": "checkboxSelected",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 618,
            "description": "Attribute to set the \"primary keys\" for the DataTable that uniquely define the record (Model) attributes \nto use to search for specific records.  \n\nPrimary keys can be defined either with this attribute `primaryKeys` OR by placing an extra object property\nin the DataTable column configuration as \"primaryKey:true\".\n\nThis attribute is more useful in use cases where the primary key is not displayed in a column.",
            "example": [
                "\n\t // sets a single primary key to data field with key:'emp_id'\n\t myDT.set('primaryKeys','emp_id');       \t\t\n\t\t\n\t // sets dual primary keys to two data fields with key:'inventory_id' and key:'lot_id'\n\t myDT.set('primaryKeys',['inventory_id','lot_id']);  \n\t // OR\n\t var myDT = new Y.DataTable({\n\t \tcolumns: [ \n\t \t\t{key:'inventory_id', label:'Inventory Code', primaryKey:true},\n\t \t\t{key:'item_code', label:'Sales Item'},\n\t \t\t{key:'lot_id', label:'Lot Code', primaryKey:true},\n\t \t\t...\n\t });"
            ],
            "itemtype": "attribute",
            "name": "primaryKeys",
            "type": "{String|Array}",
            "default": "See above",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 46,
            "description": "Plugin name and event name prefix for this dt-contextmenu",
            "itemtype": "property",
            "name": "NAME",
            "static": 1,
            "type": "{String}",
            "default": "'DtContextMenu'",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 56,
            "description": "Namespace property for this dt-contexmenu plugin, you can access this from a DT instance as\n`mydatatable.contextmenu`",
            "itemtype": "property",
            "name": "NS",
            "type": "{String}",
            "default": "'contextmenu'",
            "static": 1,
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 68,
            "description": "Configuration object properties for the TBODY contextmenu-view View instance",
            "itemtype": "attribute",
            "name": "tbodyMenu",
            "type": "Object",
            "default": "null",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 79,
            "description": "Configuration object properties for the THEAD contextmenu-view View instance",
            "itemtype": "attribute",
            "name": "theadMenu",
            "type": "Object",
            "default": "null",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 89,
            "description": "Configuration object properties for the TFOOT contextmenu-view View instance",
            "itemtype": "attribute",
            "name": "tfootMenu",
            "type": "Object",
            "default": "null",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 102,
            "description": "Placeholder for the View instance for the theadMenu ...",
            "itemtype": "property",
            "name": "theadCMenu",
            "type": "View",
            "default": "null",
            "static": 1,
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 111,
            "description": "Placeholder for the View instance for the tbodyMenu ...",
            "itemtype": "property",
            "name": "tbodyCMenu",
            "type": "View",
            "default": "null",
            "static": 1,
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 120,
            "description": "Placeholder for the View instance for the tfootMenu ...",
            "itemtype": "property",
            "name": "tfootCMenu",
            "type": "View",
            "default": "null",
            "static": 1,
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 129,
            "itemtype": "property",
            "name": "_menuItemTemplate",
            "type": "String",
            "default": "See Code",
            "static": 1,
            "deprecated": true,
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 138,
            "description": "Called when this plugin is created.  If the DT has been rendered the Views will\nbe created, otherwise a listener is set to create them after DT \"renderView\" fires.",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 156,
            "description": "Destroys each of the View instances of the menu and nulls them out",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 182,
            "description": "This method constructs the three context-menu View instances for this DT if the\nappropriate ATTRS are defined",
            "itemtype": "method",
            "name": "_buildUI",
            "access": "private",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 204,
            "description": "Creates the context menu on the DT's header components, based upon the\nATTR \"tbodyMenu\" settings.",
            "itemtype": "method",
            "name": "_makeTbodyCMenu",
            "access": "private",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 225,
            "description": "Creates the context menu on the DT's header components, based upon the\nATTR \"theadMenu\" settings.",
            "itemtype": "method",
            "name": "_makeTheadCMenu",
            "access": "private",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 246,
            "description": "Creates the context menu on the DT's footer components, based upon the\nATTR \"tfootMenu\" settings.",
            "itemtype": "method",
            "name": "_makeTfootCMenu",
            "access": "private",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 268,
            "description": "Helper method that takes as input the gallery-contextmenu-view configuration object,\nthe passed-in ATTR (which includes replaceable parts of the config obj) and creates\nthe View instance returning it.",
            "params": [
                {
                    "name": "menuObject",
                    "description": "Configuration object for the View",
                    "type": "Object"
                },
                {
                    "name": "menuAttr",
                    "description": "Name of the ATTR to load into the config object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Y.ContextMenuView"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 299,
            "description": "Helper method to hide the display of a DT contextmenu attached",
            "itemtype": "method",
            "name": "hideCM",
            "params": [
                {
                    "name": "mname",
                    "description": "Name of context menu property on this Plugin",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-contextmenu.js",
            "line": 313,
            "description": "This listener fires after DT's \"renderView\" event, which means that the DT has had\nit's UI constructed and displayed.  We use it in case the implementer plugged in this\nmodule to the DT before the render call.",
            "itemtype": "method",
            "name": "_onHostRenderViewEvent",
            "access": "private",
            "tagname": "",
            "class": "Y.Plugin.DataTableContextMenu",
            "module": "gallery-datatable-contextmenu"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 88,
            "description": "A boolean flag that sets the DataTable state to allow editing (either inline or popup cell editing).\n(May support row editing in future also)",
            "itemtype": "attribute",
            "name": "editable",
            "type": "boolean",
            "default": "false",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 101,
            "description": "Defines the cell editing event type on the TD that initiates the editor, used to\nspecify the listener that invokes an editor.\n\nNote: IMHO The only sensible options are 'click' or 'dblclick'",
            "itemtype": "attribute",
            "name": "editOpenType",
            "type": "{String|Null}",
            "default": "'dblclick'",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 116,
            "description": "Specifies a default editor name to respond to an editing event defined in [_editOpenType](#attr_editOpenType)\nattribute.  The default editor is used if the DataTable is in editing mode (i.e. \"editable:true\") and if\nthe column DOES NOT include a property editable:false in its definitions.\n\nCell editors are typically assigned by setting a column property (i.e. editor:'text' or 'date') on each\nindividual column.\n\nThis attribute can be used to set a single editor to work on every column without having to define it on each\ncolumn.",
            "itemtype": "attribute",
            "name": "defaultEditor",
            "type": "{String|Null}",
            "default": "null",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 142,
            "description": "Holds the View instance of the active cell editor currently displayed",
            "itemtype": "property",
            "name": "_openEditor",
            "type": "Y.View",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 152,
            "description": "Holds the current record (i.e. a Model class) of the TD being edited\n(Note: this may not always work, better to use \"clientId\" of the record, i.e. sorting, etc..)",
            "itemtype": "property",
            "name": "_openRecord",
            "type": "Model",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 163,
            "description": "Holds the column key (or name) of the TD cell being edited",
            "itemtype": "property",
            "name": "_openColKey",
            "type": "String",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 173,
            "description": "Holds the TD Node currently being edited",
            "itemtype": "property",
            "name": "_openTd",
            "type": "Node",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 183,
            "description": "Holds the cell data for the actively edited TD, a complex object including the\nfollowing;  {td, value, recClientId, colKey}",
            "itemtype": "property",
            "name": "_openCell",
            "type": "Object",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 196,
            "description": "Placeholder for the DT level event listener for \"editableChange\" attribute.",
            "itemtype": "property",
            "name": "_subscrEditable",
            "type": "EventHandle",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 206,
            "description": "Placeholder for the DT event listener to begin editing a cell (based on editOpenType ATTR)",
            "itemtype": "property",
            "name": "_subscrEditOpen",
            "type": "EventHandle",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 216,
            "description": "Placeholder Array for TD editor invocation event handles (i.e. click or dblclick) that\nare set on the TBODY to initiate cellEditing.",
            "itemtype": "property",
            "name": "_subscrCellEditors",
            "type": "Array of EventHandles",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 227,
            "description": "Placeholder for event handles for scrollable DT that listens to \"scroll\" events and repositions editor\n(we need two listeners, one for each of X or Y scroller)",
            "itemtype": "property",
            "name": "_subscrCellEditorScrolls",
            "type": "Array of EventHandles",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 238,
            "description": "Shortcut to the CSS class that is added to indicate a column is editable",
            "itemtype": "property",
            "name": "_classColEditable",
            "type": "String",
            "default": "'yui3-datatable-col-editable'",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 248,
            "description": "Placeholder hash that stores the \"common\" editors, i.e. standard editor names that occur\nwithin Y.DataTable.EditorOptions and are used in this DT.\n\nThis object holds the View instances, keyed by the editor \"name\" for quick hash reference.\nThe object is populated in method [_buildColumnEditors](#method__buildColumnEditors).",
            "itemtype": "property",
            "name": "_commonEditors",
            "type": "Object",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 263,
            "description": "Placeholder hash that stores cell editors keyed by column key (or column name) where the value\nfor the associated key is either a (a) {String} which references an editor name in the [_commonEditors](#property__commonEditors)\nhash or (b) {View} instance for a customized editor View instance (typically one with specified \"editorConfig\" in the\ncolumn definition).\n\nThe object is populated in method [_buildColumnEditors](#method__buildColumnEditors).",
            "itemtype": "property",
            "name": "_columnEditors",
            "type": "Object",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 284,
            "description": "Initializer that sets up listeners for \"editable\" state and sets some CSS names",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 305,
            "description": "Cleans up ALL of the DT listeners and the editor View instances and generated private props",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 318,
            "description": "Opens the given TD eventfacade or Node with it's assigned cell editor.",
            "itemtype": "method",
            "name": "openCellEditor",
            "params": [
                {
                    "name": "e",
                    "description": "Passed in object from an event OR a TD Node istance",
                    "type": "EventFacade|Node"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 398,
            "description": "Cleans up a currently open cell editor View and unbinds any listeners that this DT had\nset on the View.",
            "itemtype": "method",
            "name": "hideCellEditor",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 411,
            "description": "Utility method that scans through all editor instances and hides them",
            "itemtype": "method",
            "name": "hideAllCellEditors",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 426,
            "description": "Over-rideable method that can be used to do other user bindings ?\n  (like hideEditor on mouseout, etc...)",
            "itemtype": "method",
            "name": "bindEditorListeners",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 436,
            "description": "Returns all cell editor View instances for the editable columns of the current DT instance",
            "itemtype": "method",
            "name": "getCellEditors",
            "return": {
                "description": "editors  Array containing an Object as {columnKey, cellEditor, cellEditorName}",
                "type": "Array"
            },
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 454,
            "description": "Utility method to return the cell editor View instance associated with a particular column of the\nDatatable.\n\nReturns null if the given column is not editable.",
            "itemtype": "method",
            "name": "getCellEditor",
            "params": [
                {
                    "name": "col",
                    "description": "Column identifier, either the Column object, column key or column index",
                    "type": "Object|String|Integer"
                }
            ],
            "return": {
                "description": "Cell editor instance, or null if no editor for given column",
                "type": "View"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 484,
            "description": "Returns the Column object (from the original \"columns\") associated with the input TD Node.",
            "itemtype": "method",
            "name": "getColumnByTd",
            "params": [
                {
                    "name": "cell",
                    "description": "Node of TD for which column object is desired",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "column  The column object entry associated with the desired cell",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 497,
            "description": "Returns the column \"key\" or \"name\" string for the requested TD Node",
            "itemtype": "method",
            "name": "getColumnNameByTd",
            "params": [
                {
                    "name": "cell",
                    "description": "Node of TD for which column name is desired",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "colName  Column key or name",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 524,
            "description": "Sets up listeners for the DT editable module,",
            "itemtype": "method",
            "name": "_bindEditable",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 560,
            "description": "Unbinds ALL of the popup editor listeners and removes column editors.\nThis should only be used when the DT is destroyed",
            "itemtype": "method",
            "name": "_unbindEditable",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 608,
            "description": "Binds listeners to cell TD \"open editing\" events (i.e. either click or dblclick)\nas a result of DataTable setting \"editable:true\".\n\nAlso sets a body listener for ESC key, to close the current open editor.",
            "itemtype": "method",
            "name": "_bindCellEditingListeners",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 636,
            "description": "Unbinds the TD click delegated click listeners for initiating editing in TDs",
            "itemtype": "method",
            "name": "_unbindCellEditingListeners",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 652,
            "description": "Sets up listeners for DT scrollable \"scroll\" events",
            "itemtype": "method",
            "name": "_bindEditorScroll",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 669,
            "description": "Listener that toggles the DT editable state, setting/unsetting the listeners associated with\ncell editing.",
            "itemtype": "method",
            "name": "_onEditableChange",
            "params": [
                {
                    "name": "o",
                    "description": "Change event facade for \"editable\" attribute",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 697,
            "description": "Listener for changes on [defaultEditor](#attr_defaultEditor) attribute for this DT.\nIf the default editor is changed to a valid setting, we disable and re-enable\nediting on the DT to reset the column editors.",
            "itemtype": "method",
            "name": "_onDefaultEditorChange",
            "params": [
                {
                    "name": "o",
                    "description": "Change eventfacade for \"defaultEditor\" attribute",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 716,
            "description": "Setter method for the [editOpenType](#attr_editOpenType) attribute, specifies what\nTD event to listen to for initiating editing.",
            "itemtype": "method",
            "name": "_setEditOpenType",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 731,
            "description": "Pre-scans the DT columns looking for column named editors and collects unique editors,\ninstantiates them, and adds them to the  _columnEditors array.  This method only creates\nView instances that are required, through combination of _commonEditors and _columnEditors\nproperties.",
            "itemtype": "method",
            "name": "_buildColumnEditors",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 813,
            "description": "This method takes the given editorName (i.e. 'textarea') and if the default editor\nconfiguration, adds in any column 'editorConfig' and creates the corresponding\ncell editor View instance.\n\nMakes shallow copies of editorConfig: { overlayConfig, widgetConfig, templateObject }",
            "itemtype": "method",
            "name": "_createCellEditorInstance",
            "params": [
                {
                    "name": "editorName",
                    "description": "Editor name",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "Column object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "editorInstance  A newly created editor instance for the supplied editorname and column definitions",
                "type": "View"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 864,
            "description": "Loops through the column editor instances, destroying them and resetting the collection to null object",
            "itemtype": "method",
            "name": "_destroyColumnEditors",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 894,
            "description": "Utility method to combine \"common\" and \"column-specific\" cell editor instances and return them",
            "itemtype": "method",
            "name": "_getAllCellEditors",
            "return": {
                "description": "Of cell editor instances used for the current DT column configurations",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 921,
            "description": "Closes the active cell editor when a document ESC key is detected",
            "itemtype": "method",
            "name": "_onKeyEsc",
            "params": [
                {
                    "name": "e",
                    "description": "key listener event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 934,
            "description": "Listener to the \"sort\" event, so we can hide any open editors and update the editable column CSS\n after the UI refreshes",
            "itemtype": "method",
            "name": "_afterEditableSort",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 947,
            "description": "Re-initializes the static props to null",
            "itemtype": "method",
            "name": "_unsetEditor",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 961,
            "description": "Method to update all of the current TD's within the current DT to add/remove the editable CSS",
            "itemtype": "method",
            "name": "_updateAllEditableColumnsCSS",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 979,
            "description": "Method that adds/removes the CSS editable-column class from a DataTable column,\nbased upon the setting of the boolean \"opt\"",
            "itemtype": "method",
            "name": "_updateEditableColumnCSS",
            "params": [
                {
                    "name": "cname",
                    "description": "Column key or name to alter",
                    "type": "String"
                },
                {
                    "name": "opt",
                    "description": "True of False to indicate if the CSS class should be added or removed",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 1013,
            "description": "Listener to TD \"click\" events that hides a popup editor is not in the current cell",
            "itemtype": "method",
            "name": "_handleCellClick",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 1027,
            "description": "Listener that fires on a scrollable DT scrollbar \"scroll\" event, and updates the current XY position\n of the currently open Editor.",
            "itemtype": "method",
            "name": "_onScrollUpdateCellEditor",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 1094,
            "description": "Listens to changes to an Editor's \"keyDir\" event, which result from the user\npressing \"ctrl-\" arrow key while in an editor to navigate to an cell.\n\nThe value of \"keyDir\" is an Array of two elements, in [row,col] format which indicates\nthe number of rows or columns to be changed to from the current TD location\n(See the base method .getCell)",
            "itemtype": "method",
            "name": "_onKeyDirChange",
            "params": [
                {
                    "name": "e",
                    "description": "The attribute change event facade for the View's 'keyDir' attribute",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 1143,
            "description": "Listener to the cell editor View's \"editorCancel\" event.  The editorCancel event\nincludes a return object with keys {td,cell,oldValue}",
            "itemtype": "method",
            "name": "_onCellEditorCancel",
            "params": [
                {
                    "name": "o",
                    "description": "Returned object from cell editor \"editorCancel\" event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 1174,
            "description": "Fired when the open Cell Editor has sent an 'editorCancel' event, typically from\na user cancelling editing via ESC key or \"Cancel Button\"",
            "itemtype": "event",
            "name": "cellEditorCancel",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned Object",
                    "type": "Object"
                },
                {
                    "name": "td",
                    "description": "The TD Node that was edited",
                    "type": "Node"
                },
                {
                    "name": "cell",
                    "description": "The cell object container for the edited cell",
                    "type": "Object"
                },
                {
                    "name": "record",
                    "description": "Model instance of the record data for the edited cell",
                    "type": "Model"
                },
                {
                    "name": "colKey",
                    "description": "Column key (or name) of the edited cell",
                    "type": "String"
                },
                {
                    "name": "prevVal",
                    "description": "The old (last) value of the underlying data for the cell",
                    "type": "String|Number|Date"
                },
                {
                    "name": "editorName",
                    "description": "The name attribute of the editor that updated this cell",
                    "type": "String"
                }
            ],
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 1187,
            "description": "Listener to the cell editor View's \"editorSave\" event, that when fired will\nupdate the Model's data value for the approrpriate column.\n\nThe editorSave event includes a return object with keys {td,cell,newValue,oldValue}\n\nNote:  If a \"sync\" layer DOES NOT exist (i.e. DataSource), implementers can listen for\nthe \"saveCellEditing\" event to send changes to a remote data store.",
            "itemtype": "method",
            "name": "_onCellEditorSave",
            "params": [
                {
                    "name": "o",
                    "description": "Returned object from cell editor \"editorSave\" event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-editable.js",
            "line": 1227,
            "description": "Event fired after a Cell Editor has sent the 'editorSave' event closing an editing session.\nThe event signature includes pertinent data on the cell, TD, record and column that was\nedited along with the prior and new values for the cell.",
            "itemtype": "event",
            "name": "cellEditorSave",
            "params": [
                {
                    "name": "rtn",
                    "description": "Returned Object",
                    "type": "Object"
                },
                {
                    "name": "td",
                    "description": "The TD Node that was edited",
                    "type": "Node"
                },
                {
                    "name": "cell",
                    "description": "The cell object container for the edited cell",
                    "type": "Object"
                },
                {
                    "name": "record",
                    "description": "Model instance of the record data for the edited cell",
                    "type": "Model"
                },
                {
                    "name": "colKey",
                    "description": "Column key (or name) of the edited cell",
                    "type": "String"
                },
                {
                    "name": "newVal",
                    "description": "The new (updated) value of the underlying data for the cell",
                    "type": "String|Number|Date"
                },
                {
                    "name": "prevVal",
                    "description": "The old (last) value of the underlying data for the cell",
                    "type": "String|Number|Date"
                },
                {
                    "name": "editorName",
                    "description": "The name attribute of the editor that updated this cell",
                    "type": "String"
                }
            ],
            "class": "Y.DataTable.Editable",
            "module": "gallery-datatable-editable"
        },
        {
            "file": "gallery-js/datatable-formatters.js",
            "line": 78,
            "description": "Object containing referenceable format strings",
            "itemtype": "property",
            "name": "formatStrings",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Formatters",
            "module": "gallery-datatable-formatters"
        },
        {
            "file": "gallery-js/datatable-formatters.js",
            "line": 110,
            "description": "Formatter function called that executes a standard \"named\" formatter defined by `fmtrName`.\nThe parameter `fmtrName` maps to a member of the \"formatStrings\" object, that includes a type\ndeclaration and a formatConfig string to be substituted in the DataType.Number.format or Date.format\nfunction.",
            "itemtype": "method",
            "name": "namedFormatter",
            "params": [
                {
                    "name": "fmtrName",
                    "description": "Name of formatter object from \"formatStrings\", i.e. \"currency2\", \"fullDate\"",
                    "type": "String"
                },
                {
                    "name": "o",
                    "description": "The passed-in column formatter object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "value",
                "type": "Mixed"
            },
            "class": "Y.DataTable.Formatters",
            "module": "gallery-datatable-formatters"
        },
        {
            "file": "gallery-js/datatable-formatters.js",
            "line": 180,
            "description": "Override of method _createRowHTML from DataTable.BodyView extended to permit use of named\nformatter functions from Y.DataTable.Formatters.\n\nAdditional functionality was added to facilitate using a template approach for {o.value} within\nthe column, by using Y.Lang.sub (as fromTemplate) with the replacement object hash provided\nas column configuration \"formatConfig\" (o.column.formatConfig).",
            "itemtype": "method",
            "name": "Y.DataTable.BodyView._createRowHTML",
            "params": [
                {
                    "name": "model",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "columns",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Formatters",
            "module": "gallery-datatable-formatters"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 92,
            "description": "Adds a paginator view (specifically Y.PaginatorView) instance to the DataTable.",
            "itemtype": "attribute",
            "name": "paginator",
            "type": "Y.View",
            "default": "null",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 104,
            "description": "Defines a hash to convert expected PaginatorModel attributes to outgoing request queryString\nor returned (incoming response) meta data back to PaginatorModel attributes.",
            "example": [
                "\n         serverPaginationMap : {\n             totalItems :    'totalRows',\n             page :          {toServer:'requestedPage', fromServer:'returnedPageNo'},\n             itemIndexStart: 'startRecord',\n             itemsPerPage:   'numPageRows'\n         }\n\n         // would map to an outgoing request of (for url:/data/orders) ;\n         /data/orders/{cust_no}?requestedPage={requestedPage}&numPageRows={numPageRows}\n\n         // for a JSON response of ...\n         { \"reply\":\"ok\", \"totalRows\":478, \"returnedPageNo\":17, \"startRecord\":340, \"numPageRows\":20,\n           \"results\":[ {...} 20 total rows returned {...}] }\n\nFor default value, see [_defPagMap](#method__defPagMap)"
            ],
            "itemtype": "attribute",
            "name": "serverPaginationMap",
            "type": "{Object}",
            "default": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 135,
            "description": "Attribute to track the full pagination state (i.e. the PaginatorModel) attributes all in one object.\nAlso includes the `sortBy` property internally.",
            "itemtype": "attribute",
            "name": "paginationState",
            "type": "Object",
            "default": "unset",
            "beta": 1,
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 150,
            "description": "(SERVER DataSource only!)\nIncludes the request queryString for a DataSource request (only!), which contains the pagination\nreplacement strings to be appended to the DataSource's \"source\" string.",
            "example": [
                "\n         requestStringTemplate:  \"?currentPage={page}&pageRows={itemsPerPage}&sorting={sortBy}\"\n\nNote, the replacement parameters within this template should match the settings from the PaginatorModel\nattributes.\n\nIn cases where your server expects differing query parameters, you can utilize ATTR [serverPaginationMap](#attr_serverPaginationMap)."
            ],
            "itemtype": "attribute",
            "name": "requestStringTemplate",
            "type": "String",
            "default": "\"\"",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 172,
            "description": "Flag to indicate if the Paginator container should be re-sized to the DataTable size\nafter rendering is complete.\n\nThis attribute works best with a \"bar\" type of Paginator that is intended to look integral with a DataTable.",
            "itemtype": "attribute",
            "name": "paginatorResize",
            "type": "Boolean",
            "default": "false",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 187,
            "description": "A flag to indicate if client-side pagination or server-side pagination is desired.\nSpecifically, this attribute determines whether Page Requests are sent remotely or are\nhandled internally.\n\nRecognized settings are \"client\" (the default) or \"server\".\n\nNote: In cases where the initial payload of data is obtained from a DS or ModelSyncREST\nserver, but after data is received the user desires \"client-side\" pagination, this would\nbe set to \"client\".",
            "itemtype": "attribute",
            "name": "paginationSource",
            "type": "String",
            "default": "'client'",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 211,
            "description": "Holder for the \"original\" un-paged data that the DataTable was based upon.\n\nThis property is stored as an Array, from the original \"data\" ModelList, only used\nfor case of \"local\" data, is sliced as needed to re-set each data Page.\n\nPopulated in method [_afterDataReset](#method__afterDataReset)",
            "itemtype": "property",
            "name": "_mlistArray",
            "type": "Array",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 229,
            "description": "Placeholder for a text flag indicating the original provider of \"data\" for this DataTable,\n this is set initially in method _afterDataReset.\n\nSet to either 'local', 'ds' or 'mlist' in method [_afterDataReset](#method__afterDataReset)\n\nPopulated in _afterDataReset.  Utilized in processPageRequest",
            "itemtype": "property",
            "name": "_pagDataSrc",
            "type": "String",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 246,
            "description": "Array to hold Event handles to allow for cleanup in the destructor",
            "itemtype": "property",
            "name": "_evtHandlesPag",
            "type": "Array",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 256,
            "description": "A convenience property holder for the DataTable's \"paginator\" attribute (the Paginator-View instance).",
            "itemtype": "property",
            "name": "paginator",
            "type": "{Y.PaginatorView|View}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "since": "3.6.0",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 267,
            "description": "A convenience property holder for the Paginator-View's Model attribute.",
            "itemtype": "property",
            "name": "pagModel",
            "type": "{Y.PaginatorModel|Model}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "since": "3.6.0",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 281,
            "description": "This initializer sets up the listeners related to the original DataTable instance, to the\n PaginatorModel changes and related to the underlying \"data\" attribute the DT is based upon.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 330,
            "description": "Destructor to clean up listener event handlers and the internal storage buffer.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 369,
            "description": "Primary workhorse method that is fired when the Paginator \"page\" changes,\nand returns a new subset of data for the DT (local data)\nor sends a new request to a remote source to populate the DT (remote data)",
            "itemtype": "method",
            "name": "processPageRequest",
            "params": [
                {
                    "name": "page_no",
                    "description": "Current page number to change to",
                    "type": "Integer"
                },
                {
                    "name": "pag_state",
                    "description": "Pagination state object (this is NOT populated in local .. non-server type pagination) including;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "indexStart",
                            "description": "Starting index returned from server response",
                            "type": "Integer"
                        },
                        {
                            "name": "numRecs",
                            "description": "Count of records returned from the response",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "nothing"
            },
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 462,
            "description": "Fires after the DataTable-Paginator updates the page data and/or sends the remote request for more data",
            "itemtype": "event",
            "name": "pageUpdate",
            "params": [
                {
                    "name": "pagStatus",
                    "description": "containing following;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pag_state",
                            "description": "Of Paginator Model `getAttrs()` as an Object",
                            "type": "Object"
                        },
                        {
                            "name": "view",
                            "description": "Instance of the Paginator View",
                            "type": "View"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 470,
            "description": "Utility method that fires a request for the currently active page, effectively\n\"refreshing\" the Paginator UI",
            "itemtype": "method",
            "name": "refreshPaginator",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 481,
            "description": "Overrideable method to send the Pagination request to the ModelList for the \"load\" request.\nThe default method simply passes the url_object (created/populated within method [processPageRequest](#method_processPageRequest))\nto the ModelList's \"load\" method (assuming ModelSync.REST or other handling is provided).\n\nImplementers are free to override this method to incorporate their own remote request.",
            "itemtype": "method",
            "name": "paginatorMLRequest",
            "params": [
                {
                    "name": "url_object",
                    "description": "The pagination URL request object passed to the ModelList's sync layer",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 496,
            "description": "Overrideable method to send the Pagination request to the DataSource.\nBy default the constructed `requestString` is sent, but implementers can override this method to\ninclude additional information in their remote request.",
            "itemtype": "method",
            "name": "paginatorDSRequest",
            "params": [
                {
                    "name": "requestString",
                    "description": "DataSource remote request string sent via DataTable.datasource load method",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 511,
            "description": "Overrideable method to handle a Pagination request when using \"local\" data.  This method\ntakes care of slicing and resetting the \"local data\" array and re-syncing the DataTable.",
            "itemtype": "method",
            "name": "paginatorLocalRequest",
            "params": [
                {
                    "name": "url_obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "itemIndexStart",
                    "description": "Calculated ending index for this page number",
                    "type": "Number"
                },
                {
                    "name": "itemIndexEnd",
                    "description": "Calculated ending index for this page number",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 533,
            "description": "Method to sync the container for the paginator View with the underlying DataTable\n 'table' element.\n\n Unfortunately, there isn't a distinct, definitive 'render' complete event due to\n  DT's complex rendering, so I use a timer function to attempt a resize.",
            "itemtype": "method",
            "name": "resizePaginator",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 552,
            "description": "Method to re-initialize the original entire dataset when used with \"client\" pagination.",
            "itemtype": "method",
            "name": "resetLocalData",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be reset to ... either as a JS Array or a Y.ModelList",
                    "type": "Array|ModelList"
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 575,
            "description": "Method that sorts the buffered local data (in _mlistArray) after a DataTable\nsort event is fired.\n\nTODO: ONLY WORKS FOR single column sort presently and for \"known\" sorting\nmethods (i.e. string, number, date)\n\nImplementers can override this method to incorporate more advanced sorting",
            "itemtype": "method",
            "name": "paginatorSortLocalData",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 635,
            "description": "Method to return the entire internal buffer array used for client-side pagination.\nNote: This only applies to client-side pagination",
            "itemtype": "method",
            "name": "getLocalData",
            "return": {
                "description": "data Array of internal buffer used for client-side pagination",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 647,
            "description": "Helper method that responds to DT's \"data:add\" event (via .addRow/addRows), by adding\nthe new record (in o.newVal) to the internal buffer and refreshing the Paginator UI.\n\nNOTE: This only applies to FOR LOCAL DATA ONLY, for client-side pagination\n\nImplementers are welcome to override this method with their own !!",
            "itemtype": "method",
            "name": "addLocalData",
            "params": [
                {
                    "name": "o",
                    "description": "Event object from the ModelList.add event",
                    "type": "Object"
                },
                {
                    "name": "pgIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 685,
            "description": "Helper method that responds to DT's \"data:remove\" event (invoked by .removeRow), by adding\nthe new record (in o.newVal) to the internal buffer and refreshing the Paginator UI.\n\nNOTE: This only applies to FOR LOCAL DATA ONLY, for client-side pagination\n\nImplementers are welcome to override this method with their own !!",
            "itemtype": "method",
            "name": "removeLocalData",
            "params": [
                {
                    "name": "o",
                    "description": "Event object from the ModelList.remove event",
                    "type": "Object"
                },
                {
                    "name": "pgIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 710,
            "description": "Overridable method that fires for server-side pagination when a data item is added\nvia either \"data:add\" or .addRow.\n\nIt is up to implementers to either override this method or provide a mechanism\n(why not than ModelSync.REST!) to respond to the provided event.",
            "itemtype": "method",
            "name": "addRemoteData",
            "params": [
                {
                    "name": "o",
                    "description": "Change event payload object from ModelList's .add method",
                    "type": "Object"
                },
                {
                    "name": "pgIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 728,
            "description": "Overridable method that fires for server-side pagination when a data item is deleted\nvia either \"data:remove\" or .removeRow.\n\nIt is up to implementers to either override this method or provide a mechanism\n(why not than ModelSync.REST!) to respond to the provided event.",
            "itemtype": "method",
            "name": "removeRemoteData",
            "params": [
                {
                    "name": "o",
                    "description": "Change event payload object from ModelList's .remove method",
                    "type": "Object"
                },
                {
                    "name": "pgIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 751,
            "description": "Method called to ensure that the _afterDataReset method is called, specifically for the case\nwhere a DataSource is used (which is hard to track when it is plugged in ...)",
            "itemtype": "method",
            "name": "_afterSyncUI",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 765,
            "description": "A primary method for initially determining the origin of the \"data\" for paginating.\nDataTable calls \"this.data.reset()\" many times, most importantly at the very beginning\nbefore and before any remote responses have been received.\n\nWe use this fact to set an initial \"type\" of data origin (either 'mlist', 'ds' or 'local')\nto represent a ModelSync.REST origin, DataSource or just locally assigned data (default).\n\nThen after the initial typing, listeners are set for the appropriate remote source of\ndata, or for local data the assigned \"data\" attribute is used as the initial data.\n\nAfter this method is first completed,",
            "itemtype": "method",
            "name": "_afterDataReset",
            "params": [
                {
                    "name": "o",
                    "description": "Event object from the Model.reset event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 854,
            "description": "Method that stores the \"local\" data in an internal buffer within the _mlistArray static\nproperty.  The _mlistArray is stored as a simple JS Array type (for speed), and is used to\nselect current \"pages\" by Array slicing methods.\n\nIf the argument \"o\" is provided, it will be used as the new dataset for local data, if it\nis not set, then the current DT \"data\" attribute is used.\n\nOn a \"sort\" event, the buffer needs to be sorted first, then sliced for paging.",
            "itemtype": "method",
            "name": "_setLocalData",
            "params": [
                {
                    "name": "o",
                    "description": "Optional data to set as full local dataset",
                    "type": "Array|ModelList"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 888,
            "description": "Listener method that is called after the DataTable's data \"add\" event fires",
            "itemtype": "method",
            "name": "_afterDataAdd",
            "params": [
                {
                    "name": "o",
                    "description": "Event payload from ModelList's \"add\" event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 911,
            "description": "Event fired when the DataTable's \"data:add\" event is fired, that includes\nModelList.add's event payload.\n\nThis event could be used by implementers to handle refreshing of the local data.\n(not presently implemented)",
            "itemtype": "event",
            "name": "afterDataAdd",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "oPayload",
                    "description": "Event payload from ModelList.add",
                    "type": "Object"
                },
                {
                    "name": "pagIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 924,
            "description": "Over-ridable method to call after the DataTable's data \"remove\" event fires",
            "itemtype": "method",
            "name": "_afterDataRemove",
            "params": [
                {
                    "name": "o",
                    "description": "Event payload from ModelList.remove",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 947,
            "description": "Event fired when the DataTable's \"data:remove\" event is fired, that includes\nthe ModelList.remove's event payload.\n\nThis event could be used by implementers to handle refreshing of the local data.\n(not presently implemented)",
            "itemtype": "event",
            "name": "afterDataRemove",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "oPayload",
                    "description": "Event payload from ModelList.remove",
                    "type": "Object"
                },
                {
                    "name": "pagIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 960,
            "description": "This is an OVERRIDE of the dt-scroll afterSortByChange event, which in the case of pagination\nneeds to be amended to remove the ModelList comparator and sort method.\n\nAdded by T.Smith on 1/13/2013 to resolve sorting error on remote sortBy pagination\n(Thanks to blicksky on GitHub for raising this issue)",
            "itemtype": "method",
            "name": "_afterSortByChange",
            "since": "3.8.0",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1001,
            "description": "PATCH : This is an override of the DT _initSortFn from DT to help with a sorting problem\nAdded by T.Smith on 1/13/2013 to resolve sorting error on remote sortBy pagination\n(Thanks to blicksky on GitHub for raising this issue)",
            "itemtype": "method",
            "name": "_initSortFn",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1064,
            "description": "Listener that fires after the DT \"sort\" event processes.  The Paginator must be\nreset to the currently selected new \"page\", based on the sorting criteria.\n\nFor remote sources this is easy, just send another remote page request.\n\nFor local data source it is more complex, as we have to deal with sorting the full\nlocal data array ...",
            "itemtype": "method",
            "name": "_afterSortPaginator",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1095,
            "description": "Method fires after the \"response\" event from DataSource OR after the custom ModelList fires\na REQUIRED user-defined \"response\" event.  (typically a custom ModelList's .parse() method\nis over-ridden to provide the custom \"response\" event including {results:, meta:} properties.\n\nUsage Note: The user is REQUIRED to provide a custom \"response\" event in the ModelList\n parse function in order for this to work properly.",
            "itemtype": "method",
            "name": "_afterRemoteResponse",
            "params": [
                {
                    "name": "o",
                    "description": "Includes results and meta properties passed in via \"response\" custom event;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "results",
                            "description": "Array of result Objects",
                            "type": "Array"
                        },
                        {
                            "name": "meta",
                            "description": "Object including properties mapped to include pagination properties",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "rsource",
                    "description": "Source of response, either 'ds' or 'mlist'",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1143,
            "description": "Method fires after DataTable/DataSource plugin fires it's \"response\" event, which includes\nthe response object, including {results:, meta:} properties.",
            "itemtype": "method",
            "name": "_afterDSResponse",
            "params": [
                {
                    "name": "e",
                    "description": "Event object from DataSource's \"response\" event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1155,
            "description": "Method fires after custom ModelSync.REST \"load\" action fires a user-defined \"response\" event.\nThis can be implemented by extending ModelSync.REST by adding .parse() method which fires\na custom \"response\" event including {results:, meta:} properties.\n\nUsage Note: The user is REQUIRED to provide a custom \"response\" event in the ModelList\n parse overridden function in order for this to work properly.",
            "itemtype": "method",
            "name": "_afterMLResponse",
            "params": [
                {
                    "name": "resp",
                    "description": "Includes results and meta properties",
                    "type": "Object",
                    "props": [
                        {
                            "name": "resp",
                            "description": "Original raw response argument received into ModelList \"parse\" method",
                            "type": "String"
                        },
                        {
                            "name": "parsed",
                            "description": "Parsed raw response object after conversion (typically via JSON)",
                            "type": "Object"
                        },
                        {
                            "name": "results",
                            "description": "Array of result Objects",
                            "type": "Array"
                        },
                        {
                            "name": "meta",
                            "description": "Object including properties mapped to include pagination properties",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1175,
            "description": "Listener that fires when the Model's 'pageChange' fires, this extracts the current page from the state\nobject and then makes the appropriate processPageRequest call.",
            "itemtype": "method",
            "name": "_pageChangeListener",
            "params": [
                {
                    "name": "o",
                    "description": "Change event facade for the PaginatorModel 'pageChange' event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1189,
            "description": "A listener that monitors the \"totalItems\" attribute of the Paginator Model and\nif a zero list of items is returns it fires the \"paginatorZeroItems\" custom event.",
            "itemtype": "method",
            "name": "_totalItemsListener",
            "params": [
                {
                    "name": "Change",
                    "description": "event facade from the PaginatorModel 'totalItemsChange' event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1202,
            "description": "Event fired when the \"totalItems\" setting of the Paginator Model is set to zero,\ndue to a null response froma remote request or a null Array or ModelList being set.",
            "itemtype": "event",
            "name": "paginatorZeroItems",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1208,
            "description": "Method to adjust the CSS width of the paginator container and set it to the\n width of the underlying DT.\n\nReworked this to reset width to \"yui3-datatable-columns\", i.e. the THEAD element for\n both scrollable and non-scrollable to get around a 2px mismatch.",
            "itemtype": "method",
            "name": "_syncPaginatorSize",
            "return": {
                "description": "Boolean if success"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1230,
            "description": "Event fired after the _syncPaginatorSize method is called  (requires ATTR paginatorResize)\nto be set true",
            "itemtype": "event",
            "name": "paginatorResize",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1237,
            "description": "Helper method that searches the 'serverPaginationMap' ATTR and returns the requested\nproperty, including if it is nested as \"toServer\" or \"fromServer\" subattribute.\n( Used in processPageRequest )",
            "example": [
                "\n   _srvPagMapObj(\"itemsPerPage\")\n        { itemsPerPage : 'numPageRecords' }\n        { itemsPerPage : {toServer:'pageRows', fromServer:'pageRecordCount' }"
            ],
            "itemtype": "method",
            "name": "_srvPagMapObj",
            "params": [
                {
                    "name": "prop",
                    "description": "Property name to search for (expected matches in PaginatorModel ATTRS)",
                    "type": "String"
                },
                {
                    "name": "dir",
                    "description": "Directional (optional), either \"to\" (matches toServer) or \"from\" (matches fromServer)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "rprop Attribute name from RHS of map",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1270,
            "description": "Default 'valueFn' function setting for the ATTR `serverPaginationMap`, where\nthe defaults are simply the member names.",
            "itemtype": "method",
            "name": "_defPagMap",
            "return": {
                "description": "obj",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1287,
            "description": "Setter method for the `serverPaginationMap` attribute, which can be used to\n merge the \"default\" object with the user-supplied object.",
            "itemtype": "method",
            "name": "_setPagMap",
            "params": [
                {
                    "name": "val",
                    "description": "Object hash to serve as the attribute setting",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1301,
            "description": "Sets default for the \"paginationState\" DataTable attribute complex object as an\nobject with all of PaginatorModel ATTRS and the `sortBy` setting.",
            "itemtype": "method",
            "name": "_defPagState",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1318,
            "description": "Getter for the \"paginationState\" DataTable attribute complex object.",
            "itemtype": "method",
            "name": "_gefPagState",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1334,
            "description": "Sets default for the \"paginationState\" DataTable attribute complex object.",
            "itemtype": "method",
            "name": "_sefPagState",
            "params": [
                {
                    "name": "val",
                    "description": "Pagination state complex object settings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1361,
            "description": "This is a setter for the 'paginator' attribute, primarily to set the public property `paginator` to the\nattribute value.",
            "itemtype": "method",
            "name": "_setPaginator",
            "params": [
                {
                    "name": "val",
                    "description": "The PaginatorView instance to set",
                    "type": "PaginatorView|View"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1381,
            "description": "A method that fires after the DataTable `renderView` method completes, that is *approximately* when\nthe DataTable has finished rendering.",
            "itemtype": "method",
            "name": "_notifyRender",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-paginator.js",
            "line": 1395,
            "description": "Fires after the DataTable 'renderView' event fires",
            "itemtype": "event",
            "name": "render",
            "class": "Y.DataTable.Paginator",
            "module": "gallery-datatable-paginator"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 36,
            "description": "Node for the most recent \"highlighted\" item, either TD or TR",
            "itemtype": "attribute",
            "name": "highlighted",
            "type": "{Node}",
            "default": "null",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 47,
            "description": "Node for the most recent \"selected\" item, either TD or TR",
            "itemtype": "attribute",
            "name": "selected",
            "type": "{Node}",
            "default": "null",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 58,
            "description": "Set the current mode for highlighting, either for a single TD (as \"cell\") or for a\nfull TR (as \"row\") or \"none\" for no highlighting",
            "itemtype": "attribute",
            "name": "highlightMode",
            "type": "{String}",
            "default": "'none'",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 76,
            "description": "Set the current mode for indicating selections, either for a single TD (as \"cell\") or for a\nfull TR (as \"row\") or 'none' for no selection",
            "itemtype": "attribute",
            "name": "selectionMode",
            "type": "{String}",
            "default": "'none'",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 95,
            "description": "Attribute that holds the selected TR's associated with either the selected \"rows\" or the\n TR's that are related to the selected \"cells\", duplicates are excluded.\n\nOn input, accepts an Array of record indices for rows that should be set as \"selected\".\n(Please refer to method [_setSelectedRows](#method__setSelectedRows))\n\n         dt.set('selectedRows',[ 1, 5, 9, 11]);\n         // selects the 2nd, 6th, 10th and 12th records\n\nFor reading this setting, it returns an Array of objects containing {tr,record,recordIndex} for each\n selected \"row\"; where \"tr\" is a Y.Node instance and \"record\" is the Model for the TR and \"recordIndex\" is the\n record index within the current dataset.\n(Please refer to method [_getSelectedRows](#method__getSelectedRows))",
            "itemtype": "attribute",
            "name": "selectedRows",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 121,
            "description": "Attribute that holds the selected TD's associated with the selected \"cells\", or related to the\n selected \"rows\" if that is the `selectionMode`.\n\n On input, an Array can be provided to pre-set as \"selected\" cells, defined as each element being\n in {record,column} format; where \"record\" is the record index (or clientId) and \"column\" is either\n the column index or the key/name for the column.\n (Please see method [_setSelectedCells](#method__setSelectedCells) for reference).\n\n         dt.set('selectedCells',[{record:0,column:'fname'}, {record:187,column:7} ]);\n\n For reading the selected cells (via \"get\"), an array is returned with contains {Object} elements\n that describe the row / column combinations of each currently selected cell.\n (Please see method [_getSelectedCells](#method__getSelectedCells) for full information on the returned objects).",
            "itemtype": "attribute",
            "name": "selectedCells",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 147,
            "description": "Flag to allow either single \"selections\" (false) or multiple selections (true).\nFor Macintosh OSX-type systems the modifier key \"Cmd\" is held for multiple selections,\n and for Windows or Linux type systems the modifier key is \"Ctrl\".",
            "itemtype": "attribute",
            "name": "selectionMulti",
            "type": "{Boolean}",
            "default": "false",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 166,
            "itemtype": "property",
            "name": "_selections",
            "type": "Array",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 175,
            "description": "Holder for the classname for the \"highlight\" TR or TD",
            "itemtype": "property",
            "name": "_classHighlight",
            "type": "String",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 185,
            "description": "Holder for the classname for the \"selected\" TR or TD",
            "itemtype": "property",
            "name": "_classSelected",
            "type": "String",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 195,
            "description": "Holder for the most recent \"click\" event modifier keys from last click,\n used for assessing \"multi\" selections.\n\nContains properties;  altKey, ctrlKey, shiftKey, metaKey, button and which\n\nFilled initially by .initializer and on each Table \"click\".",
            "itemtype": "property",
            "name": "_clickModifiers",
            "type": "Object",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 211,
            "description": "Holder for the event subscription handles so that this compoent can be destroyed\n by removing listeners",
            "itemtype": "property",
            "name": "_subscrSelectComp",
            "type": "Array of EventHandles",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 223,
            "description": "Holder for the event subscription handles so that this compoent can be destroyed\n by removing listeners",
            "itemtype": "property",
            "name": "_subscrSelect",
            "type": "EventHandle",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 235,
            "description": "Holder for the event subscription handles so that this compoent can be destroyed\n by removing listeners",
            "itemtype": "property",
            "name": "_subscrHighlight",
            "type": "EventHandle",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 252,
            "description": "Initializes and sets initial bindings for the datatable-selection module",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 261,
            "description": "Destructor to clean up bindings.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 276,
            "description": "Method to enable the datatable-selection module",
            "itemtype": "method",
            "name": "disableSelection",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 286,
            "description": "Method to disable the datatable-selection module (cleans up listeners and user interface).",
            "itemtype": "method",
            "name": "disableSelection",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 296,
            "description": "Returns the Column object (from the original \"columns\") associated with the input TD Node.",
            "itemtype": "method",
            "name": "getColumnByTd",
            "params": [
                {
                    "name": "cell",
                    "description": "Node of TD for which column object is desired",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "column The column object entry associated with the desired cell",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 309,
            "description": "Returns the column \"key\" or \"name\" string for the requested TD Node",
            "itemtype": "method",
            "name": "getColumnNameByTd",
            "params": [
                {
                    "name": "cell",
                    "description": "Node of TD for which column name is desired",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "colName Column name or key name",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 332,
            "description": "Removes all \"selected\" classes from DataTable and resets internal selections counters and \"selected\" attribute.",
            "itemtype": "method",
            "name": "clearSelections",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 343,
            "description": "Removes all \"highlight\" classes from DataTable and resets `highlighted` attribute.",
            "itemtype": "method",
            "name": "clearHighlighted",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 353,
            "description": "Removes all highlighting and selections on the DataTable.",
            "itemtype": "method",
            "name": "clearAll",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 367,
            "description": "Sets listeners and initial class names required for this \"datatable-selector\" module\n\nNote:  Delegated \"click\" listeners are defined in _setSelectedMode and _setHightlightMode methods",
            "itemtype": "method",
            "name": "_bindSelector",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 402,
            "description": "Cleans up listener event handlers and static properties.",
            "itemtype": "method",
            "name": "_unbindSelector",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 456,
            "description": "Method that updates the \"highlighted\" classes for the selection and unhighlights the prevVal",
            "itemtype": "method",
            "name": "_highlightChange",
            "params": [
                {
                    "name": "o",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 467,
            "description": "Method that updates the \"selected\" classes for the selection and un-selects the prevVal.\nThis method works with multiple selections (via ATTR `selectionMulti` true) by pushing\nthe current selection to the this._selections property.",
            "itemtype": "method",
            "name": "_selectedChange",
            "params": [
                {
                    "name": "o",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 536,
            "description": "Event that fires on every \"select\" action and returns the LAST SELECTED item, either a cell or a row.\nPlease see the event \"selection\" which provides a cumulative total of all selected items as opposed to\njust the last item.   (Fired from method [_selectedChange](#method__selectedChange)",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "obj",
                    "description": "Return object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "ochange",
                            "description": "Change event object passed from attribute 'selected'",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "DataTable record (Y.Model) instance for the selection",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 547,
            "description": "Event that fires on every DataTable \"select\" event, returns current selections, either cells or rows depending\non the current \"selectionMode\".  (Fired from method [_selectedChange](#method__selectedChange)",
            "itemtype": "event",
            "name": "selection",
            "params": [
                {
                    "name": "obj",
                    "description": "Return object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "selectionMode",
                            "description": "Current setting of attribute [selectionMode](#attr_selectionMode)",
                            "type": "Object"
                        },
                        {
                            "name": "cells",
                            "description": "Returns the current setting of the attribute [selectedCells](#attr_selectedCells)",
                            "type": "Object"
                        },
                        {
                            "name": "rows",
                            "description": "Returns the current setting of the attribute [selectedRows](#attr_selectedRows)",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 560,
            "description": "Called when a \"range\" selection is detected (i.e. SHIFT key held during click) that selects\na range of TD's or TR's (depending on [selectionMode](#attr_selectionMode) setting.",
            "itemtype": "method",
            "name": "_processRange",
            "params": [
                {
                    "name": "o",
                    "description": "Last clicked TD of range selection",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 638,
            "description": "Returns the current settings of row selections, includes multiple selections.  If the\ncurrent `selectionMode` is \"cell\" mode, this function returns the unique \"records\" associated with\nthe selected cells.\n\n**Returned** `rows` {Array} of objects in format;\n<ul>\n  <li>`rows.tr` {Node} Node instance of the TR that was selected</li>\n  <li>`rows.record` {Model} The Model associated with the data record for the selected TR</li>\n  <li>`rows.recordIndex` {Integer} The record index of the selected TR within the current \"data\" set</li>\n  <li>`rows.recordClientId {String} The record clientId attribute setting</li>\n</ul>",
            "itemtype": "method",
            "name": "_getSelectedRows",
            "return": {
                "description": "rows Array of selected \"rows\" as objects in {tr,record,recordIndex} format",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 684,
            "description": "Getter method that returns an Array of the selected cells in record/column coordinate format.\nIf rows or TR elements were selected, it adds all of the row's child TD's.\n\n**Returned** `cells` {Array} of objects in format;\n<ul>\n  <li>`cells.td` {Node} TD Node for this cell.</li>\n  <li>`cells.record` {Model} Record for this cell as a Y.Model</li>\n  <li>`cells.recordIndex` {Integer} Record index for this cell in the current \"data\" set</li>\n  <li>`cells.column` {Object} Column for this cell defined in original \"columns\" DataTable attribute</li>\n  <li>`cells.columnName` {String} Column name or key associated with this cell</li>\n  <li>`cells.columnIndex` {Integer} Column index of the column, within the \"columns\" data</li>\n</ul>",
            "itemtype": "method",
            "name": "_getSelectedCells",
            "return": {
                "description": "cells The selected cells in {record,recordIndex,column,columnName,columnIndex} format",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 749,
            "description": "Setter method for attribute `selectedCells` that takes an array of cells as input and sets them\nas the current selected set with appropriate visual class.",
            "itemtype": "method",
            "name": "_setSelectedCells",
            "params": [
                {
                    "name": "val",
                    "description": "The desired cells to set as selected, in {record:,column:} format",
                    "type": "Array",
                    "props": [
                        {
                            "name": "record",
                            "description": "Record for this cell as either record index or record clientId",
                            "type": "String|Number"
                        },
                        {
                            "name": "column",
                            "description": "Column for this cell as either the column index or \"key\" or \"name\"",
                            "type": "String|Number"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 788,
            "description": "A setter method for attribute `selectedRows` that takes as input an array of desired DataTable\nrecord indices to be \"selected\", clears existing selections and sets the \"selected\" records and\nhighlights the TR's",
            "itemtype": "method",
            "name": "_setSelectedRows",
            "params": [
                {
                    "name": "val",
                    "description": "Array of record indices (or record \"clientId\") desired to be set as selected.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "records Array of DataTable records (Y.Model) for each selection chosen",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 817,
            "description": "Method that returns a TD's \"selection obj\" expected for the _selections buffer",
            "itemtype": "method",
            "name": "_selectTd",
            "params": [
                {
                    "name": "tar",
                    "description": "A Node instance of TD to be prepared for selection",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "obj Returned object includes properties (td,tr,recClient,colName)",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 839,
            "description": "Method that returns a TR's \"selection obj\" expected for the _selections buffer",
            "itemtype": "method",
            "name": "_selectTr",
            "params": [
                {
                    "name": "tar",
                    "description": "A Node instance of TR to be prepared for selection",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "obj Returned object includes properties (tr,recClient)",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 859,
            "description": "Method is fired AFTER a \"reset\" action takes place on the \"data\", usually related to a column sort.\nThis function reads the pre-sorted selections that were stored by  [_beforeResetDataSelect](#method__beforeResetDataSelect)\ntemporarily in this._selections.\n\nDepending upon the current \"selectionMode\", either post-sorted TBODY selections are re-applied, by determining either\nthe TR's (from the Model data) or the TD's (from the Model and Column Index data).",
            "itemtype": "method",
            "name": "_afterResetDataSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 905,
            "description": "Method used to derive from the clicked selection, either the TR or TD of the selection, and\nreturns the current `selectionMode` or `highlightMode` Node (based on the setting of prefix).\n\nThis method adds the required class, and if erasePrev is true, removes the class from the prior setting.",
            "itemtype": "method",
            "name": "_processNodeAction",
            "params": [
                {
                    "name": "o",
                    "description": "Attribute change event object",
                    "type": "Object"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "erasePrev",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "node Returned target Y.Node, either TR or TD based upon current `selectionMode` or `highlightMode`",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 957,
            "description": "Method removes the specified `type` CSS class from all nodes within the TBODY data node.",
            "itemtype": "method",
            "name": "_clearAll",
            "params": [
                {
                    "name": "type",
                    "description": "Class name to remove from all nodes attached to TBODY DATA",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 970,
            "description": "Setter for `highlightMode` attribute, removes prior event handle (if exists) and defines\na new delegated \"mouseover\" handler that updates the `highlighted` attribute.\n\nA change to this setting clears all prior highlighting.",
            "itemtype": "method",
            "name": "_setHighlightMode",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 1002,
            "description": "Setter for `selectionMode` attribute, removes prior event handle (if exists) and defines\na new delegated \"click\" handler that updates the `selected` attribute.\n\nA change to this setting clears all prior selections.",
            "itemtype": "method",
            "name": "_setSelectionMode",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/datatable-selection.js",
            "line": 1048,
            "description": "Helper method to clear DOM \"selected\" text or ranges",
            "itemtype": "method",
            "name": "_clearDOMSelection",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "gallery-datatable-selection"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 92,
            "description": "Defines the default TD HTML template for a calculated field within the footer",
            "itemtype": "property",
            "name": "TMPL_td",
            "type": "String",
            "default": "'<td class=\"yui3-datatable-even {tdClass}\">{content}</td>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 103,
            "description": "Defines the default TH HTML template for the header content within the footer",
            "itemtype": "property",
            "name": "TMPL_th",
            "type": "String",
            "default": "'<th colspan=\"{colspan}\" class=\"{thClass}\">{content}</th>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 114,
            "description": "Defines the default TR HTML template for the footer",
            "itemtype": "property",
            "name": "TMPL_tr",
            "type": "String",
            "default": "'<tr>{th_content}{td_content}</tr>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 125,
            "description": "Defines the default TFOOT HTML template for the footer",
            "itemtype": "property",
            "name": "TMPL_tfoot",
            "type": "String",
            "default": "'<tfoot class=\"{footClass}\"><tr>{th_content}{td_content}</tr></tfoot>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 137,
            "description": "Defines the default TABLE HTML template for the \"fixed\" footer type ... i.e. with scrolling",
            "itemtype": "property",
            "name": "TMPL_table_fixed",
            "type": "String",
            "default": "'<table cellspacing=\"0\" aria-hidden=\"true\" class=\"{className}\"></table>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 155,
            "description": "Storage array of objects, each object represents a rendered \"cell or column\" within the\nfooter view.  The first element is typically a TH element (with a colspan), and the\nremaining elements are the TD's for each requested footer field.\n\nCreated and populated by the render() method",
            "itemtype": "property",
            "name": "node_cols",
            "type": "Array of Object hashes",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 171,
            "description": "Placeholder for subscriber event handles, used to destroy cleanly",
            "itemtype": "property",
            "name": "_subscr",
            "type": "{EventHandles} Array of eventhandles",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "private",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 182,
            "description": "DataTable instance that utilizes this footerview, derived from initializer \"config.host\"\nUsed to reference changes to DT modellist, and to retrieve the underlying \"data\"",
            "itemtype": "property",
            "name": "_dt",
            "type": "Y.DataTable",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "private",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 195,
            "description": "Called when view is initialized.  Stores reference to calling DataTable and\n creates listeners to link building or refreshing the footer back to the\n parent DataTable.",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 223,
            "description": "Default destructor method, cleans up the listeners that were created and\n removes and/or empties the created DOM elements for the footerView.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 239,
            "description": "Creates the DOM elements and attaches them to the footerView container.\n Reads the configuration parameters (i.e. from DataTable's config as \"footerConfig\")\n and structures a single TR element, with a leading TH in first column, and the\n requested TD elements following.",
            "itemtype": "method",
            "name": "render",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "return": {
                "description": "this"
            },
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 396,
            "description": "Fires after the footer has been created and rendered.",
            "itemtype": "event",
            "name": "renderFooter",
            "params": [
                {
                    "name": "none",
                    "description": ""
                }
            ],
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 406,
            "description": "Calculates a DataSet summary item defined in 'calc' for the given colKey, by\n  looping through the current \"data\" (i.e. Recordset).\n\n  Currently, the 'calc' is set to lowercase ...\n\nExample calc settings are as follows (for given 'colKey');\n\n{sum}\t\tCalculate the arithmetic sum of dataset\n{min}\t\tCalculate the minimum value within the dataset\n{max}\t\tCalculate the maximum value within the dataset\n{avg}\t\tCalculate the arithmetic average of the datset\n               (synonyms are {mean}, {average})\n\nAlso, non-dataset iterating calcs are;\n {row_count}\t Returns the number of rows in the dataset\n {col_count}  Returns the number of columns in the dataset (no visibility check)\n {date}\t\t Returns the current date (via dateFormat setting)\n {time}\t\t Returns the current time (via timeFormat setting)\n\nIf 'calc' argument is a function(), then call it (in the \"this\" context of this\n FooterView) with one argument, the DataTable.data property.\n\nDoesn't handle non-numeric calculations (i.e. `Date` or `String`)\n\nTODO:  Consider one call to this (with mult keys) for one loop thru only ...\n\n not a really possible use case, but ...\n whatif user tries to enter calc='this is a {sum} and {min} value' ??",
            "itemtype": "method",
            "name": "calcDatasetValue",
            "params": [
                {
                    "name": "colKey",
                    "description": "The column key name to be calculated",
                    "type": "String"
                },
                {
                    "name": "calc",
                    "description": "A recognizable calc setting from above",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the return value",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 518,
            "description": "Calculates a DataSet summary item defined in 'calc' for the given colKey, by",
            "itemtype": "method",
            "name": "formatFootCell",
            "params": [
                {
                    "name": "col",
                    "description": "The column key name to be calculated",
                    "type": "String"
                },
                {
                    "name": "foot_col",
                    "description": "A recognizable calc setting from above",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the return value",
                "type": "Float"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 557,
            "description": "Refreshes the summary items in the footer view and populates the footer\n elements based on the current \"data\" contents.",
            "itemtype": "method",
            "name": "refreshFooter",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "access": "public",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 606,
            "description": "Fires after the footer has been recalculated and updated.",
            "itemtype": "event",
            "name": "refreshFooter",
            "params": [
                {
                    "name": "none",
                    "description": ""
                }
            ],
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 613,
            "description": "For scrollable tables only, adjusts the sizes of the TFOOT cells to match the widths\nof the THEAD cells.",
            "itemtype": "method",
            "name": "resizeFooter",
            "return": {
                "description": "this"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 660,
            "description": "Fires after the footer has been resized to match the parent DataTable",
            "itemtype": "event",
            "name": "resizeFooter",
            "params": [
                {
                    "name": "none",
                    "description": ""
                }
            ],
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 670,
            "description": "Method that builds a separate TABLE / TFOOT container outside of the Y-scrolling\n container and places the view \"container\" within this.\n\nThis is specifically required for a \"fixed\" footer ... i.e. with a scrolling DataTable,\nwhere the footer is expected to remain stationary as the records are scrolled through.\n\n NOTE: A bug exists where the viewFooter container (TFOOT) is improperly placed within\n       the y-scroller container (http://yuilibrary.com/projects/yui3/ticket/2531723)\n       This function is a workaround for that.",
            "itemtype": "method",
            "name": "_buildFixedFooter",
            "access": "private",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 721,
            "description": "Flag indicating if the footer is desired to be \"fixed\" (i.e. non-scrolling, true) or floating with Datatable scrolling (false)",
            "itemtype": "attribute",
            "name": "fixed",
            "type": "boolean",
            "default": "false",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 728,
            "description": "Defines the TH properties for the footer row, the leftmost column (including optional colspan)",
            "itemtype": "attribute",
            "name": "heading",
            "type": "Object",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 735,
            "description": "A string template defining the contents of the TH column.  May include any non-set related fields, including `{row_count}`, `{col_count}`, `{date}`,`{time}`\n\nExample:\n\n    heading.content : 'Totals for {row_count} Orders as-of {date} :'",
            "itemtype": "attribute",
            "name": "heading.content",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 747,
            "description": "The number of columns from the DataTable columns that should be spanned for the TH in the footer",
            "itemtype": "attribute",
            "name": "heading.colspan",
            "type": "Integer",
            "default": "1",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 754,
            "description": "A CSS class name to be added to the TH element of the footer",
            "itemtype": "attribute",
            "name": "heading.className",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 761,
            "description": "An array of objects, one row per *desired* column of TD representing a summary from the dataset.\n\nOnly TD's with a row included in this array will be processed and rendered, otherwise any visible\n columns from the DataTable, that are not within a TH colspan, will be created as empty.",
            "itemtype": "attribute",
            "name": "columns",
            "type": "Array",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 771,
            "description": "The dataset \"key\" corresponding to the columns of the DataTable for this desired TD in the footer.",
            "itemtype": "attribute",
            "name": "columns.key",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 778,
            "description": "A string template defining the contents of this TD column in the footer.  May include any set-based (i.e. `{sum}`,`{min}`,`{max}`,`{avg}`) or non-set related fields, including `{row_count}`, `{col_count}`, `{date}`,`{time}`.\n<br/>The {average} and {mean} placeholders are equivalent to {avg} in this implementation.\n\nExample:\n\n    columns[2].content : '{sum}'",
            "itemtype": "attribute",
            "name": "columns.content",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 791,
            "description": "A CSS class name to be added to this TD element of the footer",
            "itemtype": "attribute",
            "name": "columns.className",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 799,
            "description": "Specifies a formatter to apply to the numeric field denoted in this TD column.  A formatter from the original DataTable columns can be specified.\n\nIf this attribute is set to null (or missing), the formatter from the DataTable column associated with the \"key\" (if any), will be used.\n\nIf this attribute is set to '', no formatting will be applied.",
            "itemtype": "attribute",
            "name": "columns.formatter",
            "type": "{String|Function}",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 811,
            "description": "Specifies a strftime format string to be applied for {date} entries, using Y.DataType.Date.format",
            "itemtype": "attribute",
            "name": "dateFormat",
            "type": "String",
            "default": "\"%D\"",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 818,
            "description": "Specifies a strftime format string to be applied for {time} entries, using Y.DataType.Date.format",
            "itemtype": "attribute",
            "name": "timeFormat",
            "type": "String",
            "default": "\"%T\"",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 34,
            "description": "Placeholder for calculated # of pages required",
            "itemtype": "property",
            "name": "_npages",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 43,
            "description": "Placeholder for Event subscribers created by this model, kept for detaching on destroy.",
            "itemtype": "property",
            "name": "_subscr",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 52,
            "description": "Creates self-listeners to recalculate paginator settings on items / itemsPerPage\n changes.  Also sets listener to track 'lastPage' changes.",
            "itemtype": "method",
            "name": "initializer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 73,
            "description": "Default destructor method, cleans up the listeners that were created.",
            "itemtype": "method",
            "name": "destructor",
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 84,
            "description": "Method responds to changes to \"page\" (via `pageChange` attribute change), validates the change compared to the\n current paginator settings, and stores the prior page in \"lastPage\".\n\nIf a page change is invalid (i.e. less than 1, non-numeric or greater than `totalPages`) the change is prevented.",
            "itemtype": "method",
            "name": "_changePage",
            "params": [
                {
                    "name": "e",
                    "description": "`page` Attribute change event object",
                    "type": "EventFacade"
                }
            ],
            "return": {
                "description": "Nothing"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 119,
            "description": "Method to calculate the current paginator settings, specifically the\n number of pages required, including a modulus calc for extra records requiring a final page.\n\nThis method resets the `page` to 1 (first page) upon completion.",
            "itemtype": "method",
            "name": "_recalcPagnParams",
            "return": {
                "description": "Indicating the \"success\" or failure of recalculating the pagination state.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 163,
            "description": "Getter for returning the start index for the current `page`",
            "itemtype": "method",
            "name": "_getItemIndexStart",
            "return": {
                "description": "Index of first item on the current `page`",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 177,
            "description": "Getter for returning the inclusive ending index for the current `page`",
            "itemtype": "method",
            "name": "_getItemIndexEnd",
            "return": {
                "description": "Index of the last item on the current `page`",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 194,
            "description": "Fires after the `page` attribute is changed",
            "itemtype": "event",
            "name": "pageChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 199,
            "description": "Fires after the `itemsPerPage` attribute is changed",
            "itemtype": "event",
            "name": "itemsPerPageChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 204,
            "description": "Fires after the `totalItems` attribute is changed",
            "itemtype": "event",
            "name": "totalItemsChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 209,
            "description": "Fires after the `totalPages` attribute is changed",
            "itemtype": "event",
            "name": "totalPagesChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 214,
            "description": "Fires after the `lastPage` attribute is changed",
            "itemtype": "event",
            "name": "lastPageChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 223,
            "description": "Total number of items used by this paginator-model.",
            "itemtype": "attribute",
            "name": "totalItems",
            "type": "{Integer}",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 235,
            "description": "Number of items per page for this paginator.",
            "itemtype": "attribute",
            "name": "itemsPerPage",
            "type": "{Integer}",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 247,
            "description": "The current page selected for this paginator-model.\n\nThis is intended as the **primary** change parameter to be .set() by the user, for interacting\nwith the Paginator Model.",
            "itemtype": "attribute",
            "name": "page",
            "type": "{Integer}",
            "default": "1",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 262,
            "description": "The last active `page` that was selected, this is populated by a `pageChange` listener on the Model.",
            "itemtype": "attribute",
            "name": "lastPage",
            "type": "{Integer}",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 274,
            "description": "The total number of pages required to complete this pagination state (based upon `totalItems` and\n`itemsPerPage`, specifically).\n\nThis attribute is set / maintained by the method [_recalcPagnParams](#method__recalcPagnParams) and\nshouldn't be set by the user.",
            "itemtype": "attribute",
            "name": "totalPages",
            "type": "Integer",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 291,
            "description": "The index for the starting item on the current `page` within the pagination state.\n\nThis attribute is calculated on the fly in a getter method [_getItemIndexStart](#method__getItemIndexStart) and\nshould not be \"set\" by the user, as it will be disregarded.",
            "itemtype": "attribute",
            "name": "itemIndexStart",
            "type": "Integer",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 307,
            "description": "The index for the ending item on the current `page` within the pagination state.\n\nThis attribute is calculated on the fly in a getter method [_getItemIndexEnd](#method__getItemIndexEnd) and\nshould not be \"set\" by the user, as it will be disregarded.",
            "itemtype": "attribute",
            "name": "itemIndexEnd",
            "type": "Integer",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 421,
            "description": "Default HTML content to be used as basis for Paginator.  This default is only used if the paginatorTemplate\nattribute is unused OR the container does not contain the HTML template.\n\nThe paginator HTML content includes replacement tokens throughout.\n\nThe DEFAULT setting is;\n\n<a href=\"#\" data-pglink=\"first\" class=\"{pageLinkClass}\" title=\"First Page\">First</a> |\n<a href=\"#\" data-pglink=\"prev\" class=\"{pageLinkClass}\" title=\"Prior Page\">Prev</a> |\n{pageLinks}\n| <a href=\"#\" data-pglink=\"next\" class=\"{pageLinkClass}\" title=\"Next Page\">Next</a> |\n<a href=\"#\" data-pglink=\"last\" class=\"{pageLinkClass}\" title=\"Last Page\">Last</a>",
            "itemtype": "property",
            "name": "TMPL_PAGINATOR",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 445,
            "description": "Default HTML content that will be used to prepare individual links within the Paginator and inserted\nat the location denoted **{pageLinks}** replacement token in the template.\n\nThe DEFAULT setting is;\n\n<a href=\"#\" data-pglink=\"{page}\" class=\"{pageLinkClass}\" title=\"Page {page}\">{page}</a>",
            "itemtype": "property",
            "name": "TMPL_LINK",
            "type": "{String}",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 463,
            "description": "Default HTML template for the Rows Per Page SELECT box signified by the **{selectRowsPerPage}** replacement toke\nwithin the paginator template.\n\nThe DEFAULT setting is;\n\n<select class=\"{selectRPPClass}\"></select>",
            "itemtype": "property",
            "name": "TMPL_selectRPP",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 476,
            "description": "Default HTML template for the Page SELECT box signified by the **{selectPage}** replacement token with the\npaginator template.\n\nThe DEFAULT setting is;\n\n<select class=\"{selectPageClass}\"></select>",
            "itemtype": "property",
            "name": "TMPL_selectPage",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 489,
            "description": "Default HTML template for the \"Rows Per Page\" INPUT[text] control signified by the **{inputRowsPerPage}** replacement\ntoken within the paginator template.\n\nThe DEFAULT setting is;\n\n<input type=\"text\" class=\"{inputRPPClass}\" value=\"{itemsPerPage}\"/>",
            "itemtype": "property",
            "name": "TMPL_inputRPP",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 502,
            "description": "Default HTML template for the \"Page\" INPUT[text] control signified by the **{inputPage}** replacement token with the\npaginator template.\n\nThe DEFAULT setting is;\n\n<input type=\"text\" class=\"{inputPageClass}\" value=\"{page}\"/>",
            "itemtype": "property",
            "name": "TMPL_inputPage",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 516,
            "description": "A public property, provided as a convenience property, equivalent to the \"model\" attribute.",
            "itemtype": "property",
            "name": "model",
            "type": "Y.PaginatorModel",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 528,
            "description": "Placeholder property to store the initial container HTML for used later in the\n render method.  This property is populated by the View initializer.",
            "itemtype": "property",
            "name": "_pagHTML",
            "access": "protected",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 550,
            "description": "Holder for Event subscribers created by this View, saved so they can be cleaned up later.",
            "itemtype": "property",
            "name": "_subscr",
            "type": "Array",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 561,
            "description": "Helper function, because I was too lazy to figure out how to get widget getClassName working",
            "itemtype": "method",
            "name": "_myClassName",
            "params": [
                {
                    "name": "String",
                    "description": "variable number of strings, to be concatenated"
                }
            ],
            "return": {
                "description": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 581,
            "description": "Initializer sets up classes and the initial container and HTML templating for this View.",
            "itemtype": "method",
            "name": "initializer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 640,
            "description": "Setup listeners on this View, specifically on all UI elements and\n \"most importantly\", listen to \"pageChange\" on the underlying Model.",
            "itemtype": "method",
            "name": "_bindUI",
            "return": {
                "description": "this"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 678,
            "description": "Default destructor method, cleans up the listeners that were created and\n cleans up the view contents.",
            "itemtype": "method",
            "name": "destructor",
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 698,
            "description": "Renders the current settings of the Paginator using the supplied HTML content from the\nfor the paginator template and Y.Lang.sub for replacement of tokens and of Model attributes.\n\nNOTE: The render method is not called on every page \"click\", but is called if the Model changes\n`totalItems` or `itemsPerPage`.\n\n<h6>Recognized tokens:</h6>\nRecognizeable tokens are supported, specifically as *placeholders* within the html template where generated content\ncan be inserted and ultimately rendered in the view container.\n\nTokens replaced within this method include all of the PaginatorModel attributes;\n\n**{page}**, **{totalItems}**, **{itemsPerPage}**, **{lastPage}**, **{totalPages}**, **{itemIndexStart}**, **{itemIndexEnd}**\n\nAdditionally, specific tokens intended for view HTML construction and recognized by PaginatorView are;\n<ul>\n<li><b>{pageLinks}</b> : The placeholder within the html template where the View-generated page links will\n<br/>be inserted via a loop over all pages (DEFAULT: see <a href=\"#property_TMPL_LINK\">TMPL_LINK</a>)</li>\n<li><b>{inputPage}</b> : An INPUT[type=text] box which the view listens for change events on\n(Default: see <a href=\"#property_TMPL_inputPage\">TMPL_inputPage</a>)</li>\n<li><b>{selectRowsPerPage}</b> : A SELECT type pulldown that will be populated with the <a href=\"#attr_pageOptions\">pageOptions</a>\narray <br/>of \"Rows per Page\" selections (Default: see <a href=\"#property_TMPL_selectRPP\">TMPL_selectRPP</a>)</li>\n<li><b>{inputRowsPerPage}</b> : An INPUT[type=text] box what will be listened to for changes to \"Rows per Page\"\n(Default: see <a href=\"#property_TMPL_inputRPP\">TMPL_inputRPP</a>)</li>\n<li><b>{selectPage}</b> (Not implemented at this time!)</li>\n<li><b>{pageStartIndex}</b> : Represents the starting index for a specific \"page\" (intended for use\nwithin <a href=\"#attr_pageLinkTemplate\">pageLinkTemplate</a> )</li>\n<li><b>{pageEndIndex}</b> : Represents the ending index for a specific \"page\" (intended for use\nwithin <a href=\"#attr_pageLinkTemplate\">pageLinkTemplate</a> )</li>\n</ul>\n\nAnd if that wasn't enough, the CSS class names supported by this view are also provided via tokens as;\n**{pagClass}**, **{pageLinkClass}**, **{inputPageClass}**, **{selectRPPClass}**, **{selectPageClass}**,\n*  **{inputRPPClass}**\n\n\nThis method utilizes the Y.substitute tool (with recursion) for token replacement.\n\nThe `container` visibility is disabled during construction and insertion of DOM elements into the `container` node.\n\nThis method fires the `render` event, for View listeners.",
            "itemtype": "method",
            "name": "render",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 837,
            "description": "Main handler that accomodates Page changes and updates visual cues for highlighting\n the selected page link and the active Page selector link list.\n\nThis method also fires the View's \"pageChange\" event.\n\nNOTE: This method is *private* because page changes should be made by the user at\nthe Model level (Model.set('page',...) and not using the _processPageChange method.",
            "itemtype": "method",
            "name": "_processPageChange",
            "params": [
                {
                    "name": "cpage",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 967,
            "description": "Helper method to calculate offset either side of Selected Page link\n for abbreviated Page List.\n\n Called by _processPageChange",
            "itemtype": "method",
            "name": "_calcOffset",
            "params": [
                {
                    "name": "cpage",
                    "description": "Current page number",
                    "type": "Integer"
                },
                {
                    "name": "offset",
                    "description": "Number of links both sides of page number to return for (usually 1)",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "containing left {Integer} and right {Integer} properties",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 991,
            "description": "Method that toggles the visibility of Page Link selector fields based upon\ntheir data-pglink attribute setting.\n\n Called by _processPageChange",
            "itemtype": "method",
            "name": "_disablePageSelector",
            "params": [
                {
                    "name": "linkSel",
                    "description": ""
                },
                {
                    "name": "visible",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1022,
            "description": "Setter for the \"model\" attribute, that for convenience also sets a public property to this View.",
            "itemtype": "method",
            "name": "_setModel",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1039,
            "description": "Handler responds to Model's `pageChange` event, if a valid page is set this listener\n fires off a page change request.\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_modelPageChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1056,
            "description": "Handler responds to Model's `itemsPerPageChange` event, not really functional at present\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_modelStateChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1071,
            "description": "Handler responds to Model's `itemsPerPageChange` event\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_modelItemsChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1092,
            "description": "Method fired after the Paginator View is rendered,\n  so that the SELECT[rowsPerPage] control can be updated\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_updateRPPSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1140,
            "description": "Method that responds to changes in the SELECT box for \"page\"",
            "itemtype": "method",
            "name": "_updatePageSelect",
            "access": "private",
            "tagname": "",
            "beta": 1,
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1161,
            "description": "Handler responding to INPUT[text] box page change.\n\nListener set in _bindUI",
            "itemtype": "method",
            "name": "_inputChangePage",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1182,
            "description": "Handler responding to a Page Selector \"click\" event.  The clicked Node is\nreviewed for its data-pglink=\"\" setting, and processed from that.\n\nChanged page is then sent back to the Model, which reprocesses the\n paginator settings (i.e. indices) and fires a `pageChange` event.\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_clickChangePage",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1235,
            "description": "Handler that responds to SELECT changes for no. of rows per page\n\nListener set in _bindUI",
            "itemtype": "method",
            "name": "_selectChangeRowOptions",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1256,
            "description": "Fires after the Paginator has been completely rendered.",
            "itemtype": "event",
            "name": "render",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1261,
            "description": "Fires after the _processPageChange method has updated the pagination state.",
            "itemtype": "event",
            "name": "pageChange",
            "params": [
                {
                    "name": "state",
                    "description": "The PaginatorModel `getAttrs()` \"state\" after updating to the current page as an object.",
                    "type": "Object"
                }
            ],
            "since": "3.5.0",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1270,
            "description": "The default set of attributes which will be available for instances of this class",
            "itemtype": "property",
            "name": "ATTRS",
            "type": "Object",
            "static": 1,
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1279,
            "description": "The base PaginatorModel that serves as data / change provider for this View.",
            "example": [
                "\n    paginator:  new Y.PaginatorModel({\n        itemsPerPage:  250\n    }),\n    OR\n    paginator:  myPagModel // where myPagModel is an instance previously created ..."
            ],
            "itemtype": "attribute",
            "name": "model",
            "default": "null",
            "type": "{Y.PaginatorModel}",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1299,
            "description": "The container holder for the contents of this View.  Can be entered either as\na Y.Node instance or as a DOM \"id\" attribute (if prepended by \"#\").",
            "example": [
                "\ncontainer: Y.one(\"#myDiv\"),\nOR\ncontainer: \"#myDiv\"\n\nNOTE: If the container node contains HTML <b>it will be used as the paginatorTemplate</b>"
            ],
            "itemtype": "attribute",
            "name": "container",
            "default": "null",
            "type": "{Node|String}",
            "required": 1,
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1320,
            "description": "An array that will be used to populate the rows per page SELECT box ( using string replacement \"{selectRowsPerPage}\" or\nclass selector \"yui3-pagview-select-rowsperpage\" ).",
            "itemtype": "attribute",
            "name": "pageOptions",
            "type": "{Array}",
            "default": "[ 10, 20, 'All' ]",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1333,
            "description": "A string that defines the Paginator HTML contents.  Can either be entered as a {String} including replacement parameters\nor as a {Node} instance whose contents will be read via .getHTML() or a DOM \"id\" element (indicated by '#' in first character)\n<br/><br/>\nTo disable creation of any template (in order to do your own replacements of the template), set this to ''.",
            "example": [
                "\npaginatorTemplate:  '<div data-pglink=\"first\">FIRST</div> {pageLinks} <div data-pglink=\"last\">LAST</div>',\npaginatorTemplate:  Y.one('#script-id-tmpl'),\npaginatorTemplate:  Y.one('#script-id-tmpl').getHTML(),\npaginatorTemplate:  '#script-id-tmpl',   // where"
            ],
            "itemtype": "attribute",
            "name": "paginatorTemplate",
            "type": "{Node|String}",
            "default": "See TMPL_PAGINATOR static property",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1355,
            "description": "Defines the HTML template to be used for each individual page within the Paginator.  This can be used along\nwith replacement tokens to create UI elements for each page link.  The template is used to construct the\n`{pageLinks}` replacement token with the paginator body.\n\nRecognized replacement tokens most appropriate to this attribute are `{page}`, `{pageStartIndex}` and\n`{pageEndIndex}`.\n\nA few examples of this template are listed below;",
            "example": [
                "\npageLinkTemplate: '<a href=\"#\" data-pglink=\"{page}\" class=\"\" title=\"Page No. {page}\">{page}</a>'"
            ],
            "itemtype": "attribute",
            "name": "pageLinkTemplate",
            "type": "String",
            "default": "See TMPL_LINK static property",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1383,
            "description": "Used to set the maximum number of page links that will be displayed for individual pages within `{pageLinks}`.\nThis is the primary attribute to use to setup **abbreviated page links**, to avoid a long line of page links\nthat travel across the page!\n\nSetting this to some number less than the total number of pages will begin abbreviating the links.\n<br/>(See also attributes [`linkListOffset`](#attr_linkListOffset) and [`pageLinkFiller`](#attr_pageLinkFiller),\nwhich work in conjunction with this attribute).",
            "itemtype": "attribute",
            "name": "maxPageLinks",
            "type": "Integer",
            "default": "9999",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1401,
            "description": "Setting that represents the number of links adjacent to the current page that should be displayed for instances where\nan *abbreviated* page link list is desired.\n<br/>(See [maxPageLinks](#attr_maxPageLinks) and [pageLinkFiller](#attr_pageLinkFiller) attributes).\n\nFor example, a setting of this attribute to 1, will result in 3 page links (current page plus 1 each side),\n<br/>likewise a setting of 2, will results in 5 page links in the center of the paginator, etc.",
            "itemtype": "attribute",
            "name": "linkListOffset",
            "type": "Integer",
            "default": "1",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1418,
            "description": "Setting the the \".. more\" indicator to be used specifically for *abbreviated* page link lists.\n<br/>(See [maxPageLinks](#attr_maxPageLinks) and [linkListOffset](#attr_linkListOffset) attributes).",
            "itemtype": "attribute",
            "name": "pageLinkFiller",
            "type": "String",
            "default": "'...'",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1431,
            "description": "Flag to indicate whether the first page link **within the `{pageLinks}` template** is to be displayed or not.\n<br/>Specifically intended for *abbreviated* page link lists (See [maxPageLinks](#attr_maxPageLinks) attribute).\n\nFor Example;\n<br/>If our paginator state currently has 9 pages, and the current page is 5, if `alwaysShowLast:false`\nand `alwaysShowFirst:false` the link list will resemble;\n<br/>First | Prev | ... 4 5 6 ... | Next | Last\n\nLikewise, with `'alwaysShowLast:true` (and alwaysShowFirst:true) the link list will resemble;\n<br/>First | Prev | 1 ... 4 5 6 ... 9 | Next | Last",
            "itemtype": "attribute",
            "name": "alwaysShowFirst",
            "type": "Boolean",
            "default": "false",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1452,
            "description": "Flag to indicate whether the last page link **within the `{pageLinks}` template** is to be displayed or not.\n<br/>Specifically intended for *abbreviated* page link lists (See [maxPageLinks](#attr_maxPageLinks) attribute).\n\nSee `alowsShowFirst` for an example.",
            "itemtype": "attribute",
            "name": "alwaysShowLast",
            "type": "Boolean",
            "default": "false",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1467,
            "description": "Not implemented at this time.",
            "itemtype": "attribute",
            "name": "selectPageFormat",
            "type": "String",
            "default": "'Page {page}'",
            "beta": 1,
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1479,
            "description": "Flag indicating whether \"circular\" behavior of the Paginator View is desired.  If `true` the paginator\nwill stop \"disabling\" First|Previous or Next|Last toggling and will continue at either 1st page or last\npage selections.  (i.e. when on *last* page, a *next* click will return to page 1)",
            "itemtype": "attribute",
            "name": "circular",
            "type": "Boolean",
            "default": "false",
            "class": "Y.PaginatorView",
            "module": "gallery-paginator-view"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 23,
            "description": "The Array to populate the SELECT / OPTIONS on the left-side, herein referred to\nas \"options\" in this widget.\n\nElements of this array aren't required to have members { text:'', value:''}, \nif the members are different they can be mapped to the expected settings using \nthe \"optionsMap\" attribute. \n\nIf the members of this array are non-object single-items, they are assumed to be \nthe \"text\" item, and the \"value\" will also be set to this item.",
            "itemtype": "attribute",
            "name": "options",
            "type": "{Array}",
            "default": "[]",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 44,
            "description": "The Array to populate the SELECT / OPTIONS on the right-side, herein referred \nto as \"selected\" in this widget.  For example, if a FORM is opened with default \nmulti-selected items, they would be provided in this attribute as an array.\n\nElements of this array aren't required to have members { text:'', value:''}, \nif the members are different they can be mapped to the expected settings using \nthe \"optionsMap\" attribute. \n\nIf the members of this array are non-object single-items, they are assumed to be \nthe \"text\" item, and the \"value\" will also be set to this item.",
            "itemtype": "attribute",
            "name": "selected",
            "type": "{Array}",
            "default": "[]",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 66,
            "description": "An object having members \"value, text, title\" that defines the mapping \nbetween the provided \"options\" array data and the expected parameters of \nthe JavaScript &lt;option&gt; (value, text title).",
            "itemtype": "attribute",
            "name": "optionsMap",
            "type": "{Object}",
            "default": "{ value:'value', text:'text', title:'title' }",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 90,
            "description": "Classname to be applied to the \"options\" <SELECT> element, usually used to \nspecify the \"width\" of the element.",
            "itemtype": "attribute",
            "name": "optClassName",
            "type": "{String}",
            "default": "''",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 104,
            "description": "Classname to be applied to the \"selected\" <SELECT> element, usually used to \nspecify the \"width\" of the element.",
            "itemtype": "attribute",
            "name": "selClassName",
            "type": "{String}",
            "default": "''",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 118,
            "description": "The DOM ID element of the \"template\" to be used for defining the OPTIONS, SELECTIONS, \nand the BUTTONS.\n \nExpected replacable placeholder tokens positioned within the \"template\" are identified as;\n\n\t{OPTIONS_CONTAINER}\t\t:  Left-hand side \"Options\" <select> placeholder\n\t{SELECTIONS_CONTAINER}\t:  Right-hand side \"Selected\" <select> placeholder\n\t{ACTION_ALL}\t\t\t:  Placeholder for the \"Add All\" button\n \t     \t{ACTION_ONE}\t\t\t:  Placeholder for the \"Add One\" button\n\t{ACTION_BACK}\t\t\t:  Placeholder for the \"Remove One\" button\n\t{ACTION_ALLBACK}\t\t:  Placeholder for the \"Remove All\" button",
            "itemtype": "attribute",
            "name": "template",
            "type": "{String}",
            "default": "''",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 141,
            "description": "Attribute allows specifying the \"button\" type to be used during construction of the\nWidget template.  Currently supported are HTML <button>, a Y.Button object, a Y.Button \nCSSButton, and a simple HTML <a> link.\n\nRecognized settings are 'htmlbutton', 'ybutton', 'cssbutton', 'link'",
            "itemtype": "attribute",
            "name": "buttonType",
            "type": "{String}",
            "default": "'htmlbutton'",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 165,
            "description": "The source \"ID\" of the container for this widget, REQUIRED.",
            "itemtype": "attribute",
            "name": "srcNode",
            "type": "{String}",
            "default": "null",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 178,
            "description": "The number of options to display in the left and right side SELECT / OPTIONS control.",
            "itemtype": "attribute",
            "name": "selectSize",
            "type": "{Int}",
            "default": "10",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 191,
            "description": "The default \"width\" style of the left and right side SELECT / OPTIONS control.",
            "itemtype": "attribute",
            "name": "selectSize",
            "type": "{String}",
            "default": "'9em'",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 204,
            "description": "A flag setting for enabling \"stack\" mode of this widget.  In \"stack\" mode \nthe JS Options are moved from left-to-right individually, so that they can't \nbe re-used inadvertantly.  \n\nFor example, \"Add One\" from the left option MOVES the option to the right-side \n\"selections\".  If \"Remove One\" is chosen, the right-side selected item is returned\nto the bottom of the left-hand side options.  (Can't currently return it to the \nindex of where it came from ... see \"preserveOrder\").",
            "itemtype": "attribute",
            "name": "stackMode",
            "type": "{Boolean}",
            "default": "false",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 225,
            "description": "NOT IMPLEMENTED AT THIS TIME\n \n\t     A flag setting for preserving the original order of the options, when add or \n\t     remove actions are taken.   With \"preserveOrder\" false, all items are added to the \n\t     bottom of the left / right side HTML SELECT / OPTIONS.  If set to TRUE, the \n\t     options are returned to proper order from the original \"options\" setting.\n\t     \n\t     This only has relevance when \"stackMode\" is TRUE.",
            "itemtype": "attribute",
            "name": "preserveOrder",
            "type": "{Boolean}",
            "default": "false",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 246,
            "description": "The label to be used for the BUTTON face for \"Add All\" action.",
            "itemtype": "attribute",
            "name": "actionLabelAll",
            "type": "{String}",
            "default": "'Add All'",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 258,
            "description": "The label to be used for the BUTTON face for \"Add One\" action.",
            "itemtype": "attribute",
            "name": "actionLabelOne",
            "type": "{String}",
            "default": "'Add'",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 270,
            "description": "The label to be used for the BUTTON face for \"Remove\" action.",
            "itemtype": "attribute",
            "name": "actionLabelRmv",
            "type": "{String}",
            "default": "'Remove'",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 282,
            "description": "The label to be used for the BUTTON face for \"Remove All\" action.",
            "itemtype": "attribute",
            "name": "actionLabelRmvAll",
            "type": "{String}",
            "default": "'Remove All'",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 302,
            "description": "The default \"template\" to use for rendering of this widget.",
            "itemtype": "property",
            "name": "TMPL_control",
            "type": "String",
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 312,
            "description": "The template to use for constructing the HTML <SELECT> elements for left/right side",
            "itemtype": "property",
            "name": "TMPL_inputs",
            "type": "String",
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 320,
            "description": "The template to use for constructing the HTML <SELECT> elements for left/right side",
            "itemtype": "property",
            "name": "TMPL_inputs",
            "type": "String",
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 328,
            "description": "The template to use for constructing the HTML <BUTTON> elements within \nthe widget (for buttonType='htmlbutton' or 'ybutton')",
            "itemtype": "property",
            "name": "TMPL_button",
            "type": "String",
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 337,
            "description": "The template to use for constructing the HTML <button> elements within \nthe widget (for buttonType='cssbutton')",
            "itemtype": "property",
            "name": "TMPL_cssbtn",
            "type": "String",
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 346,
            "description": "The template to use for constructing the HTML <A> elements within \nthe widget (for buttonType='link')",
            "itemtype": "property",
            "name": "TMPL_alink",
            "type": "String",
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 356,
            "itemtype": "property",
            "name": "CLASS_ACTION",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 363,
            "description": "Holder for the Y.Node of the SELECT left-hand side \"available\" options.",
            "itemtype": "property",
            "name": "_optionNode",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 371,
            "description": "Holder for the Y.Node of the SELECT right-hand side \"selected\" or chosen options",
            "itemtype": "property",
            "name": "_selectNode",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 379,
            "description": "Holder for the \"action\" click event handlers",
            "itemtype": "property",
            "name": "_eventHandles",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 387,
            "description": "Holder for the Y.Button Widget instances (if \"buttonType\" === \"ybutton\" )",
            "itemtype": "property",
            "name": "_ybuttons",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 394,
            "description": "Holder for the original OPTIONS order, to be used with \"preserveOrder\"  (NOT IMPLEMENTED)",
            "itemtype": "property",
            "name": "_optOrder",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 468,
            "description": "Method that binds the button pushes to their handlers.  Keep a reference to the handler \nin this._eventHandles so we can detach them later.",
            "itemtype": "method",
            "name": "bindUI",
            "access": "public",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 508,
            "description": "Method to clear the left-hand side \"options\" SELECT OPTIONS completely.",
            "itemtype": "method",
            "name": "clearOptions",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "true"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 520,
            "description": "Method to clear the right-hand side \"selections\" SELECT OPTIONS completely.",
            "itemtype": "method",
            "name": "clearSelections",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "true"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 531,
            "description": "Returns the current items in the \"right side\" SELECT OPTIONS box.",
            "itemtype": "method",
            "name": "getSelections",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "An array of options Objects, members are { value, text, title };",
                "type": "Array"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 555,
            "description": "Method to create the DOM elements for this Widget, including two HTML <SELECT> elements,\nand four BUTTONS to operate on the Widget.\n\nThe method uses the \"template\" attribute if set for positioning of the above UI elements,\nif none is provided a default template is used.",
            "itemtype": "method",
            "name": "_renderInput",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "true"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 655,
            "description": "Method creates an <option> Node instance based upon an input object that includes \nvalue, text and title properties.\n(This is in lieu of using JS new Option() language ...)",
            "itemtype": "method",
            "name": "_createOption",
            "params": [
                {
                    "name": "opt_obj",
                    "description": "Object with members \"value\", \"text\" and \"title\"",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "instance of Option object",
                "type": "Node"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 675,
            "description": "Method to load the left-hand side \"options\" HTML <SELECT> element with the \nuser-defined options array.",
            "itemtype": "method",
            "name": "_loadOptions",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "options.length",
                "type": "Number"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 725,
            "description": "Method to clear the right-hand side \"selections\" OPTIONS completely.",
            "itemtype": "method",
            "name": "_clearOptions",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "true"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 738,
            "description": "Internal method to normalize the 'text', 'value', and 'title' data based upon the input \n\"optionsMap\" of the \"options\" attribute.  Returns an object that can be used directly by \nthe JS new Option( text, value ) command.",
            "itemtype": "method",
            "name": "_optStdFormat",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "An object that contains { value, text, title } for defining the JS Option",
                "type": "Object"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 770,
            "description": "Internal method intended to return the provided opt_node object back to the \"options\" \nSELECT OPTION in the original defined order. \nThis would only be used for \"stackMode\" and \"preserveOrder\" true.",
            "itemtype": "method",
            "name": "_returnOptionPerOrder",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": ""
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 795,
            "description": "Creates a Y.Button object by using the input \"bnode\" as the srcNode of the Button.",
            "itemtype": "method",
            "name": "_createYButtonNode",
            "params": [
                {
                    "name": "bnode,",
                    "description": "The Node of the HTML <button> to use to create Y.Button",
                    "type": "String || Node"
                }
            ],
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "object",
                "type": "Y.Button"
            },
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 811,
            "description": "Creates an HTML <button> object that can be used with the \"cssbutton\" module of 3.5.0.\nUses the internal \"TMPL_cssbtn\" property as a template for the HTML. \n\nThe cssButton design uses a <span> to specify the location of the IMG, on either the \nright or left side of the button contents (i.e. \"Click Me\").\n\nSo this method defines either lcontent or rcontent to specify which side of the \"content\" \nthe IMG is defined on.",
            "itemtype": "method",
            "name": "_createCssButton",
            "params": [
                {
                    "name": "subname,",
                    "description": "The sub-class name to be added to the button class",
                    "type": "String"
                },
                {
                    "name": "lcontent,",
                    "description": "The sub-class name to add to the left-hand side IMG span class",
                    "type": "String"
                },
                {
                    "name": "rcontent,",
                    "description": "The sub-class name to add to the right-hand side IMG span class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "code for <button> element",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 841,
            "description": "Creates an HTML <button> object that will be inserted into the template.  The \"subname\" \nis a sub-class name to be appended to the <button> class to identify it.\nUses the internal \"TMPL_button\" property as a template for the HTML.",
            "itemtype": "method",
            "name": "_createHtmlButton",
            "params": [
                {
                    "name": "subname,",
                    "description": "The sub-class name to be appended to the \"class\" for this button",
                    "type": "String"
                },
                {
                    "name": "content,",
                    "description": "The contents of the button face (i.e. \"Click Me\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "code for <button> element",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 860,
            "description": "Creates an HTML <a> link object that will be inserted into the template.  The \"subname\" \nis a sub-class name to be appended to the <a> class to identify it.  Uses the internal \n\"TMPL_alink\" property as a template for the HTML.",
            "itemtype": "method",
            "name": "_createALinkButton",
            "params": [
                {
                    "name": "subname,",
                    "description": "The sub-class name to be appended to the \"class\" for this item",
                    "type": "String"
                },
                {
                    "name": "content,",
                    "description": "The contents of the <a> text node (i.e. \"Click Me\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "code for <button> element",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 879,
            "description": "Returns all of the HTML <select> OPTIONS, as an array of objects containing an index, optionObject \nformat.  This is really intended to return the right-hand side \"selections\" Options element, \nirregardless of whether an Option is \"selected\" / highlighted or not.",
            "itemtype": "method",
            "name": "_getSelectedOptions",
            "params": [
                {
                    "name": "sel_node,",
                    "description": "The SELECT object to get all options of (whether \"selected\" flag is set or not)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "of Object containing the right-option elements as {index, optionObj} format",
                "type": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 899,
            "description": "Utility function to avoid duplicate adding an option to the right-hand side \"selections\" Options element. \nThis method checks if the \"opt_node\" already exists in the \"selections\" Options, if so it returns TRUE, \nif not it returns FALSE.",
            "itemtype": "method",
            "name": "_selOptionExists",
            "params": [
                {
                    "name": "opt_node,",
                    "description": "The Option node to check for existence.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "true or false,  If the opt_node already exists in the Options array"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 925,
            "description": "The \"Add All\" button click handler. \nAdds all of the \"Available\" options to the \"selected\" Options, checking to avoid duplicates.\nThis method checks if the Widget is a \"stack\", if so, it moves the Option from left to right.",
            "itemtype": "method",
            "name": "_onButtonAll",
            "params": [
                {
                    "name": "e,",
                    "description": "The button's Eventhandle from the button .on \"click\" event",
                    "type": "EventHandle"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 975,
            "description": "The \"Add One\" button click handler. \nAdds the DOM selected option(s) from the \"Available\" options to the right-hand side HTML <select>, \nchecking to avoid duplicates. This method checks if the Widget is a \"stack\", if so, it moves the \nOption from left to right.",
            "itemtype": "method",
            "name": "_onButtonOne",
            "params": [
                {
                    "name": "e,",
                    "description": "The button's Eventhandle from the button .on \"click\" event",
                    "type": "EventHandle"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 1009,
            "description": "The \"Remove One\" button click handler. \nRemoves the DOM selected option(s) from the \"Selections\" right-side options.  This method checks if the \nWidget is a \"stack\", if so, it moves the Option from right to left, otherwise it destroys it.",
            "itemtype": "method",
            "name": "_onButtonBack",
            "params": [
                {
                    "name": "e,",
                    "description": "The button's Eventhandle from the button .on \"click\" event",
                    "type": "EventHandle"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        },
        {
            "file": "gallery-js/picklist.js",
            "line": 1041,
            "description": "The \"Remove All\" button click handler. \nRemoves all of the option(s) from the \"Selections\" right-side options.  This method checks if the \nWidget is a \"stack\", if so, it moves the Option from right to left, otherwise it destroys it.",
            "itemtype": "method",
            "name": "_onButtonAllBack",
            "params": [
                {
                    "name": "e,",
                    "description": "The button's Eventhandle from the button .on \"click\" event",
                    "type": "EventHandle"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "access": "protected",
            "tagname": "",
            "class": "PickList",
            "module": "gallery-picklist"
        }
    ]
}